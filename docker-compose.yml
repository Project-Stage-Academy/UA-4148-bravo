# Docker Compose for local development with Django, FastAPI, PostgreSQL and Elasticsearch 7.x
# Key changes:
# - Pin Elasticsearch to 7.17.12 to match python client 7.x
# - Override ELASTICSEARCH_HOST for app containers to use "elasticsearch" hostname inside the Docker network

version: '3.9'

services:
  web:
    build: .
    container_name: api-dev
    restart: on-failure
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      # Inside Docker network the Elasticsearch hostname is the service name
      ELASTICSEARCH_HOST: http://elasticsearch:9200
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - forum

  fastapi:
    build: .
    container_name: fastapi
    command: uvicorn core.asgi:application --host 0.0.0.0 --port 8001 --reload
    ports:
      - "8001:8001"
    env_file:
      - .env
    environment:
      # Ensure FastAPI/Django layer also reaches ES via service hostname
      ELASTICSEARCH_HOST: http://elasticsearch:9200
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - forum

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.12
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      # Wait for at least yellow cluster status
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - forum

  db:
    image: postgres:14
    container_name: db
    restart: always
    volumes:
      - ./configs/postgres:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - forum

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    env_file:
      - .env
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin/data
    depends_on:
      db:
        condition: service_healthy
    networks:
      - forum

volumes:
  postgres_data:
  pgadmin_data:
  esdata:
    driver: local

networks:
  forum:

