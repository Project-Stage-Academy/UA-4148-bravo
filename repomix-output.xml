This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/
  workflows/
    ci-cd.yml
chat/
  management/
    commands/
      populate_messages.py
  views/
    chat_views.py
  admin.py
  apps.py
  consumers.py
  documents.py
  middlewares.py
  routing.py
  serializers.py
  urls.py
common/
  company.py
  enums.py
communications/
  migrations/
    0001_initial.py
    0002_initial.py
    0003_remove_notification_related_project_id_and_more.py
  admin.py
  apps.py
  models.py
  serializers.py
  services.py
  signals.py
  urls.py
  views.py
configs/
  postgres/
    init-db.sh
core/
  settings/
    __init__.py
    base_settings.py
    constants.py
    logging_settings.py
    test_settings.py
    third_party_settings.py
  __init__.py
  asgi.py
  celery.py
  healthcheck.py
  urls_docs.py
  urls.py
  wsgi.py
dashboard/
  admin.py
  apps.py
  tests.py
  views.py
docs/
  API.md
  CONTRIBUTING_DOCS.md
fastapi_app/
  main.py
frontend/
  public/
    pictures/
      svg/
        arrow-right.svg
        avatar.svg
        box.svg
        bread.svg
        building.svg
        cart.svg
        check.svg
        eye-invisible.svg
        eye.svg
        footer-logo.svg
        header-logo-text.svg
        header-logo.svg
        img-fallback.svg
        loupe.svg
        mail.svg
        menu-close-btn.svg
        menu-open-btn.svg
        opentech-logo.svg
        people.svg
        phone.svg
        rocket.svg
        star-filled.svg
        star.svg
        truck.svg
        vine.svg
    index.html
    manifest.json
  src/
    api/
      client.js
      csrfService.js
    components/
      App/
        app.jsx
      Button/
        button.css
        button.jsx
      Checkbox/
        checkbox.css
        checkbox.jsx
      Dimmer/
        dimmer.css
        dimmer.jsx
      FollowStar/
        followStar.jsx
      Footer/
        footer.css
        footer.jsx
      GenericGrid/
        genericGrid.jsx
      Header/
        header.css
        header.jsx
      HiddenInput/
        hiddenInput.css
        hiddenInput.jsx
      Image/
        image.css
        image.jsx
      Layout/
        layout.jsx
      Loading/
        loading.css
        loading.jsx
      Panel/
        panel.css
        panel.jsx
      ParticipantCard/
        participantCard.css
        participantCard.jsx
      RequireAuth/
        requireAuth.jsx
      Search/
        search.css
        search.jsx
      Sidebar/
        sidebar.css
        sidebar.jsx
      TextInput/
        textInput.css
        textInput.jsx
    css/
      aria.css
      link.css
      main.css
      reset.css
      text.css
      variables.css
    hooks/
      useFormWithProtection.jsx
      useFormWithServerErrors.jsx
      useIsMobile.jsx
    pages/
      AuthorizationWrapper/
        authorizationWrapper.css
        authorizationWrapper.jsx
      CompanyList/
        companyList.jsx
      EmailConfirmationHandler/
        emailConfirmationHandler.css
        emailConfirmationHandler.jsx
      FeedbackForm/
        feedbackForm.jsx
      ForgotPassword/
        forgotPassword.jsx
      ForgotPasswordDone/
        forgotPasswordDone.jsx
      Home/
        home.css
        home.jsx
      LogIn/
        logIn.jsx
      NotFound/
        notFound.css
        notFound.jsx
      Policy/
        policy.jsx
      ProfileEditing/
        profileEditing.jsx
      ProfilePage/
        profilePage.jsx
      Registration/
        registration.jsx
      RegistrationCompleted/
        registrationCompleted.jsx
      RegistrationConfirmation/
        registrationConfirmation.jsx
      RegistrationError/
        registrationError.jsx
      RegistrationReconfirmation/
        registrationReconfirmation.jsx
      RegistrationUserConfirmed/
        registrationUserConfirmed.jsx
      RegistrationUserRepresent/
        registrationUserRepresent.jsx
      RestorePassword/
        restorePassword.jsx
      RestorePasswordDone/
        restorePasswordDone.jsx
      WhoWeAre/
        whoWeAre.css
        whoWeAre.jsx
    provider/
      AuthProvider/
        authProvider.jsx
    utils/
      bruteForce/
        bruteForce.js
      formUtils/
        isFormDisabled.jsx
      validation/
        validate.js
        validate.test.js
    index.css
    index.js
    logo.svg
    reportWebVitals.js
  .gitignore
  .prettierrc.json
  package.json
  README.md
investments/
  migrations/
    0001_initial.py
    0002_initial.py
    0003_initial.py
  serializers/
    subscription_create.py
    subscription_update.py
  services/
    investment_share_service.py
    subscription_validation_service.py
    subscriptions.py
  admin.py
  apps.py
  models.py
  signals.py
  tasks.py
  urls.py
  views.py
investors/
  migrations/
    0001_initial.py
    0002_initial.py
    0003_initial.py
    0004_investor_social_links.py
    0005_alter_investor_company_name_alter_investor_stage.py
  serializers/
    __init__.py
    investor_create.py
    investor.py
  admin.py
  apps.py
  models.py
  permissions.py
  urls.py
  views_saved.py
  views.py
mixins/
  social_links_mixin.py
projects/
  migrations/
    0001_initial.py
    0002_initial.py
    0003_project_milestones_project_technologies_used_and_more.py
  admin.py
  apps.py
  documents.py
  models.py
  permissions.py
  serializers.py
  signals.py
  urls.py
  views.py
search/
  admin.py
  apps.py
  documents.py
  models.py
  serializers.py
  services.py
  urls.py
  views.py
startups/
  migrations/
    0001_initial.py
    0002_initial.py
    0003_alter_startup_company_name_alter_startup_stage.py
  serializers/
    startup_base.py
    startup_create.py
    startup_elasticsearch.py
    startup_full.py
    startup_project.py
    startup_short.py
  views/
    __init__.py
    startup_base.py
    startup_elasticsearch.py
    startup.py
  admin.py
  apps.py
  documents.py
  models.py
  signals.py
  urls.py
templates/
  email/
    activation.html
    activation.txt
    base.html
    password_reset.html
    welcome_oauth_email.txt
tests/
  chat/
    test_consumer.py
    test_documents.py
  communications/
    __init__.py
    factories.py
    test_notification_preferences.py
    test_notification_triggers.py
    test_notifications_api.py
  elasticsearch/
    setup_tests_data.py
    test_project_elasticsearch.py
    test_startup_elasticsearch.py
  fastapi_app/
    test_hello.py
  investments/
    test_api_subscription_create.py
    test_model.py
    test_serializer_create_concurrency.py
    test_serializer_create.py
    test_serializer_update.py
    test_services.py
  investors/
    test_api_create.py
    test_api.py
    test_logging.py
    test_model.py
    test_saved_startup_viewset.py
    test_saved_startups_endpoints.py
    test_saved_startups.py
    test_serializer.py
  projects/
    test_api.py
    test_category_model.py
    test_project_model.py
    test_serializer.py
    test_updates.py
  search/
    test_search.py
  startups/
    test_api_create.py
    test_api.py
    test_industry_model.py
    test_location_model.py
    test_serializer.py
    test_startup_model.py
    test_startup_preferences.py
  users/
    __init__.py
    test_auth_cookie.py
    test_company_bind_serializer.py
    test_company_bind.py
    test_login.py
    test_me_endpoint.py
    test_oauth_login.py
    test_password_reset.py
    test_registration.py
    test_resend_email.py
  factories.py
  setup_tests_data.py
  test_base_case.py
  test_disable_signal_mixin.py
users/
  management/
    commands/
      cleanup_email_tokens.py
      create_default_user.py
    __init__.py
  migrations/
    0001_initial.py
  serializers/
    company_bind_serializer.py
    password_reset_serializers.py
    resend_email_serializer.py
    token_serializer.py
    user_serializers.py
  views/
    auth_views.py
    base_protected_view.py
    bind_company_view.py
    email_views.py
    oauth_view.py
    password_views.py
    token_views.py
  admin.py
  apps.py
  backends.py
  constants.py
  cookie_jwt.py
  models.py
  permissions.py
  pipelines.py
  signals.py
  tasks.py
  tokens.py
  urls.py
  validators.py
utils/
  authenticate_client.py
  cookies.py
  error_response.py
  get_default_user_role.py
  get_field_value.py
validation/
  validate_document.py
  validate_email.py
  validate_image.py
  validate_names.py
  validate_role.py
  validate_self_investment.py
  validate_social_links.py
  validate_string_fields.py
  validate_token.py
.dockerignore
.env.example
.gitattributes
.gitignore
.pylintrc
CODE_QUALITY.md
docker-compose.yml
Dockerfile
entrypoint.sh
manage.py
openapi.yaml
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="chat/management/commands/populate_messages.py">
import logging
import os
from django.core.management.base import BaseCommand
from users.documents import UserDocument, UserRoleDocument, UserRoleEnum
from chat.documents import Room, Message
from random import shuffle
from mongoengine import ValidationError

TEST_USER_PASSWORD = os.getenv("TEST_USER_PASSWORD", "testpassword123")

TEST_USERS = [
    {"email": "user1@example.com", "first_name": "User", "last_name": "One"},
    {"email": "user2@example.com", "first_name": "User", "last_name": "Two"},
    {"email": "user3@example.com", "first_name": "User", "last_name": "Three"},
]

MESSAGES = [
    "Hello everyone!",
    "How are you?",
    "All good, thanks!",
    "What's new?",
    "Who’s here?"
]

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = "Populate MongoDB with test users, rooms and messages"

    def handle(self, *args, **kwargs):
        role_user = UserRoleDocument.objects(role=UserRoleEnum.USER).first()
        if not role_user:
            role_user = UserRoleDocument(role=UserRoleEnum.USER).save()

        users = []
        for u in TEST_USERS:
            try:
                user = UserDocument.objects(email=u["email"]).first()
                if not user:
                    user = UserDocument(
                        email=u["email"],
                        first_name=u["first_name"],
                        last_name=u["last_name"],
                        password=TEST_USER_PASSWORD,
                        role=role_user,
                        is_active=True,
                    ).save()
                users.append(user)
            except Exception as e:
                logger.error("Failed to create user %s: %s", u.get("email"), e)

        room_name = kwargs.get('room_name', 'TestRoom')
        room = Room.objects(name=room_name).first()
        if not room:
            try:
                room = Room(name="TestRoom", participants=users).save()
                logger.info("Created test room 'TestRoom' with %d participants", len(users))
            except ValidationError as ve:
                logger.error("Failed to create test room 'TestRoom': %s", ve)
                raise ve

        num_messages = 10
        shuffled_users = users.copy()
        shuffled_texts = MESSAGES.copy()
        shuffle(shuffled_users)
        shuffle(shuffled_texts)

        for sender, text in zip(shuffled_users * ((num_messages // len(shuffled_users)) + 1),
                                shuffled_texts * ((num_messages // len(shuffled_texts)) + 1)):
            try:
                Message(room=room, sender=sender, text=text).save()
            except ValidationError as ve:
                logger.warning("Failed to save test message from %s: %s", sender.email, ve)

        self.stdout.write(self.style.SUCCESS("MongoDB populated with test data!"))
</file>

<file path="chat/admin.py">
from django.contrib import admin

# Register your models here.
</file>

<file path="chat/apps.py">
from django.apps import AppConfig


class ChatConfig(AppConfig):
    name = 'chat'
</file>

<file path="common/company.py">
import datetime

from django.core.exceptions import ValidationError
from django.core.validators import (
    MinValueValidator,
    MaxValueValidator
)
from django.db import models

from typing import cast
from core import settings

from common.enums import Stage
from validation.validate_email import validate_email_custom
from validation.validate_image import validate_image_file
from validation.validate_names import validate_company_name, validate_latin
from validation.validate_social_links import validate_social_links_dict


class Company(models.Model):
    """
    Abstract base model representing common attributes of companies such as
    startups and investors.

    Fields:
    - user: One-to-one link to the associated user account.
    - industry: Industry category of the company.
    - company_name: Official name of the company.
    - location: Geographic location of the company.
    - logo: Image file for the company's logo, validated for file type and size.
    - description: Optional textual description of the company.
    - website: Company's website URL.
    - email: Contact email address (must be unique).
    - founded_year: Year the company was founded, constrained between 1900 and current year.
    - team_size: Number of employees or team members, minimum of 1.
    - stage: Current stage of the company lifecycle, optional but set by default
      depending on whether it is a startup or investor.
    - created_at: Timestamp when the record was created.
    - updated_at: Timestamp when the record was last updated.

    Validation:
    - Website must begin with 'http://' or 'https://'.
    - Founded year cannot be in the future.
    - Team size must be at least 1.
    - Description must be at least 10 characters if provided.
    - Default stage is assigned during validation if not set, based on subclass type.

    This class is abstract and intended to be subclassed.
    """
    user = models.OneToOneField(
        'users.User',
        on_delete=models.CASCADE
    )
    industry = models.ForeignKey(
        'startups.Industry',
        on_delete=models.PROTECT
    )
    company_name = models.CharField(
        max_length=254,
        validators=[validate_company_name, validate_latin],
        unique=True
    )
    location = models.ForeignKey(
        'startups.Location',
        on_delete=models.PROTECT
    )
    logo = models.ImageField(
        upload_to='company/logos/',
        validators=[validate_image_file],
        blank=True,
        null=True
    )
    description = models.TextField(blank=True, default="")
    website = models.URLField(blank=True, default="")
    email = models.EmailField(
        max_length=254,
        validators=[validate_email_custom],
        unique=True
    )
    founded_year = models.IntegerField(
        validators=[
            MinValueValidator(1900),
            MaxValueValidator(datetime.datetime.now().year)
        ]
    )
    team_size = models.PositiveIntegerField(
        blank=True,
        default=1,
        validators=[MinValueValidator(1)]
    )
    stage = models.CharField(
        max_length=20,
        choices=Stage.choices,
        blank=True
    )
    social_links = models.JSONField(
        blank=True,
        default=dict,
        verbose_name="Social Links",
        help_text="Social media links as a JSON object"
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def clean(self):
        """ Description must be at least 10 characters if provided. """
        if self.description:
            trimmed_description = self.description.strip()
            if len(trimmed_description) < 10:
                raise ValidationError({
                    'description': "Description must be at least 10 characters long if provided."
                })
            
        social_links = cast(dict, self.social_links)
        validate_social_links_dict(
            social_links=social_links,
            allowed_platforms=settings.ALLOWED_SOCIAL_PLATFORMS,
            raise_serializer=False
        )
    class Meta:
        abstract = True
        ordering = ['company_name']
</file>

<file path="common/enums.py">
from django.db.models import TextChoices


class Stage(TextChoices):
    """
    Represents the lifecycle stage of a startup or company.

    Stages:
    - IDEA: Initial concept phase
    - MVP: Minimum Viable Product developed
    - LAUNCH: Public release, product is live
    - SCALE: Growth phase, expanding user base or market
    - EXIT: Final stage — acquisition, IPO, or shutdown
    """
    IDEA = 'idea', 'Idea'
    MVP = 'mvp', 'MVP'
    SEED = 'seed', 'Seed'
    LAUNCH = 'launch', 'Launch'
    SCALE = 'scale', 'Scale'
    EXIT = 'exit', 'Exit'

    def display(self):
        """
        Returns the human-readable label of the current stage.
        """
        return self.label


class ProjectStatus(TextChoices):
    """
    Indicates the current status of a project.

    Statuses:
    - DRAFT: Initial draft, not yet active
    - IN_PROGRESS: Actively being worked on
    - COMPLETED: Finished and delivered
    - CANCELLED: Terminated before completion
    """
    DRAFT = 'draft', 'Draft'
    IN_PROGRESS = 'in_progress', 'In Progress'
    COMPLETED = 'completed', 'Completed'
    CANCELLED = 'cancelled', 'Cancelled'
</file>

<file path="communications/migrations/0001_initial.py">
# Generated by Django 5.2.4 on 2025-08-22 23:11

import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notification_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('triggered_by_type', models.CharField(blank=True, choices=[('investor', 'Investor'), ('startup', 'Startup'), ('system', 'System')], max_length=20, null=True)),
                ('related_startup_id', models.PositiveIntegerField(blank=True, null=True)),
                ('related_project_id', models.PositiveIntegerField(blank=True, null=True)),
                ('related_message_id', models.PositiveIntegerField(blank=True, null=True)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=10)),
                ('is_read', models.BooleanField(default=False)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.SlugField(help_text='Unique code for the notification type', unique=True)),
                ('name', models.CharField(help_text='Human-readable name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Description of when this notification is sent')),
                ('default_frequency', models.CharField(choices=[('immediate', 'Immediate'), ('daily_digest', 'Daily Digest'), ('weekly_summary', 'Weekly Summary'), ('disabled', 'Disabled')], default='immediate', help_text='Default frequency for this notification type', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this notification type is active')),
            ],
            options={
                'verbose_name': 'Notification Type',
                'verbose_name_plural': 'Notification Types',
                'ordering': ['name'],
            },
        ),
    ]
</file>

<file path="communications/migrations/0002_initial.py">
# Generated by Django 5.2.4 on 2025-08-22 23:11

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('communications', '0001_initial'),
        ('users', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserNotificationPreference',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='notification_preferences', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('enable_in_app', models.BooleanField(default=True, verbose_name='Enable in-app notifications')),
                ('enable_email', models.BooleanField(default=True, verbose_name='Enable email notifications')),
                ('enable_push', models.BooleanField(default=False, verbose_name='Enable push notifications')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='notification',
            name='triggered_by_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='triggered_notifications', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notification',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notification',
            name='notification_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='notifications', to='communications.notificationtype'),
        ),
        migrations.CreateModel(
            name='UserNotificationTypePreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('frequency', models.CharField(choices=[('immediate', 'Immediate'), ('daily_digest', 'Daily Digest'), ('weekly_summary', 'Weekly Summary'), ('disabled', 'Disabled')], default='immediate', max_length=20)),
                ('notification_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_preferences', to='communications.notificationtype')),
                ('user_preference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='type_preferences', to='communications.usernotificationpreference')),
            ],
            options={
                'verbose_name': 'User Notification Type Preference',
            },
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'is_read', 'created_at'], name='idx_notif_user_read'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['expires_at'], name='idx_notif_expires'),
        ),
        migrations.AddConstraint(
            model_name='usernotificationtypepreference',
            constraint=models.UniqueConstraint(fields=('user_preference', 'notification_type'), name='unique_user_preference_notification_type'),
        ),
    ]
</file>

<file path="communications/admin.py">
from django.contrib import admin
from django.utils.translation import gettext_lazy as _
from .models import (
    NotificationType,
    UserNotificationPreference,
    UserNotificationTypePreference
)


class NotificationTypeAdmin(admin.ModelAdmin):
    """Admin interface for NotificationType model."""
    list_display = ('name', 'code', 'is_active', 'created_at')
    list_filter = ('is_active',)
    search_fields = ('name', 'code', 'description')
    readonly_fields = ('created_at', 'updated_at')
    def get_fieldsets(self, request, obj=None):
        main_fields = [f.name for f in self.model._meta.get_fields() 
                      if f.name not in ('id', 'created_at', 'updated_at')]
        
        return (
            (None, {
                'fields': main_fields
            }),
            (_('Timestamps'), {
                'fields': ('created_at', 'updated_at'),
                'classes': ('collapse',)
            }),
        )


class UserNotificationTypePreferenceInline(admin.TabularInline):
    """Inline admin for user notification type preferences."""
    model = UserNotificationTypePreference
    extra = 0
    readonly_fields = ('created_at', 'updated_at')
    fields = ('notification_type', 'frequency', 'created_at', 'updated_at')


class UserNotificationPreferenceAdmin(admin.ModelAdmin):
    """Admin interface for UserNotificationPreference model."""
    list_display = ('user', 'enable_in_app', 'enable_email', 'enable_push', 'updated_at')
    list_filter = ('enable_in_app', 'enable_email', 'enable_push')
    search_fields = ('user__email', 'user__username')
    readonly_fields = ('created_at', 'updated_at')
    inlines = [UserNotificationTypePreferenceInline]
    
    def get_fieldsets(self, request, obj=None):
        user_fields = ['user']
        
        NOTIFICATION_CHANNELS = [
            'enable_in_app',
            'enable_email',
            'enable_push',
            # Add new notification channel fields here as they're added to the model
        ]
        
        other_fields = [f.name for f in self.model._meta.get_fields() 
                       if f.name not in user_fields + NOTIFICATION_CHANNELS + 
                       ['id', 'created_at', 'updated_at']]
        
        fieldsets = [
            (_('User'), {
                'fields': user_fields
            }),
            (_('Notification Channels'), {
                'fields': NOTIFICATION_CHANNELS
            }),
            (_('Timestamps'), {
                'fields': ('created_at', 'updated_at'),
                'classes': ('collapse',)
            }),
        ]

        if other_fields:
            fieldsets.insert(1, (None, {
                'fields': other_fields
            }))
            
        return fieldsets


admin.site.register(NotificationType, NotificationTypeAdmin)
admin.site.register(UserNotificationPreference, UserNotificationPreferenceAdmin)
</file>

<file path="communications/apps.py">
from django.apps import AppConfig

class CommunicationsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "communications"
    verbose_name = "Communications"

    def ready(self):
        # важливо: імпорт реєструє ресівери сигналів
        from . import signals  # noqa: F401
</file>

<file path="communications/models.py">
import uuid

from django.conf import settings
from django.db import models
from django.utils.translation import gettext_lazy as _


class TimeStampedModel(models.Model):
    """Abstract model for created_at and updated_at fields."""
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        abstract = True


class NotificationFrequency(models.TextChoices):
    IMMEDIATE = 'immediate', _('Immediate')
    DAILY_DIGEST = 'daily_digest', _('Daily Digest')
    WEEKLY_SUMMARY = 'weekly_summary', _('Weekly Summary')
    DISABLED = 'disabled', _('Disabled')


class NotificationTrigger(models.TextChoices):
    INVESTOR = 'investor', _('Investor')
    STARTUP = 'startup', _('Startup')
    SYSTEM = 'system', _('System')


class NotificationPriority(models.TextChoices):
    LOW = 'low', _('Low')
    MEDIUM = 'medium', _('Medium')
    HIGH = 'high', _('High')


class NotificationChannel(models.TextChoices):
    """Channels for delivering notifications."""
    IN_APP = 'in_app', _('In-App')
    EMAIL = 'email', _('Email')
    PUSH = 'push', _('Push')


class NotificationType(TimeStampedModel):
    """Model to store different types of notifications."""
    code = models.SlugField(
        max_length=50,
        unique=True,
        help_text=_('Unique code for the notification type')
    )
    name = models.CharField(
        max_length=100,
        help_text=_('Human-readable name')
    )
    description = models.TextField(
        blank=True,
        help_text=_('Description of when this notification is sent')
    )
    default_frequency = models.CharField(
        max_length=20,
        choices=NotificationFrequency.choices,
        default=NotificationFrequency.IMMEDIATE,
        help_text=_('Default frequency for this notification type')
    )
    is_active = models.BooleanField(
        default=True,
        help_text=_('Whether this notification type is active')
    )

    class Meta:
        ordering = ['name']
        verbose_name = _('Notification Type')
        verbose_name_plural = _('Notification Types')

    def __str__(self):
        return self.name

    @classmethod
    def get_default_pk(cls):
        """Get or create a default notification type to use as a fallback.

        This is useful for database migrations and testing.

        Returns:
            int: The primary key of the default notification type
        """
        obj, _ = cls.objects.get_or_create(
            code='default',
            defaults={
                'name': 'Default Notification',
                'description': 'Default notification type',
            }
        )
        return obj.pk


class Notification(TimeStampedModel):
    """
    Stores notifications for users about various platform events.
    
    NOTIFICATION TRIGGER FIELD USAGE GUIDELINES:

    1. For user-initiated actions:
       - triggered_by_user: Set to the User instance
       - triggered_by_type: Set to the user's current active role ('investor' or 'startup')
       
    2. For system-generated notifications:
       - triggered_by_user: Set to None
       - triggered_by_type: Set to 'system'
       
    3. Examples:
       - Investor saves a startup: triggered_by_user=investor_user, triggered_by_type='investor'
       - Startup updates project: triggered_by_user=startup_user, triggered_by_type='startup'
       - Weekly digest email: triggered_by_user=None, triggered_by_type='system'
       - Password reset reminder: triggered_by_user=None, triggered_by_type='system'

    4. Validation Rules:
       - If triggered_by_user is set, triggered_by_type should not be 'system'
       - If triggered_by_type is 'system', triggered_by_user should be None
    """
    notification_id = models.UUIDField(unique=True, editable=False, primary_key=True, default=uuid.uuid4)
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='notifications'
    )
    notification_type = models.ForeignKey(
        NotificationType,
        on_delete=models.PROTECT,
        related_name='notifications'
    )
    title = models.CharField(max_length=255)
    message = models.TextField()

    triggered_by_user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='triggered_notifications'
    )
    triggered_by_type = models.CharField(
        max_length=20,
        choices=NotificationTrigger.choices,
        null=True,
        blank=True
    )

    related_startup_id = models.CharField(max_length=64, null=True, blank=True)
    related_message_id = models.CharField(max_length=64, null=True, blank=True)
    related_message_id = models.PositiveIntegerField(null=True, blank=True)

    priority = models.CharField(
        max_length=10,
        choices=NotificationPriority.choices,
        default=NotificationPriority.MEDIUM
    )
    is_read = models.BooleanField(default=False)
    expires_at = models.DateTimeField(null=True, blank=True)

    class Meta:
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['user', 'is_read', 'created_at'], name='idx_notif_user_read'),
            models.Index(fields=['expires_at'], name='idx_notif_expires'),
        ]

    def __str__(self):
        return f"{self.notification_type.name} - {self.user.email}"


class UserNotificationPreference(TimeStampedModel):
    """Model to store user notification preferences."""
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='notification_preferences',
        primary_key=True
    )
    enable_in_app = models.BooleanField(
        _('Enable in-app notifications'),
        default=True
    )
    enable_email = models.BooleanField(
        _('Enable email notifications'),
        default=True
    )
    enable_push = models.BooleanField(
        _('Enable push notifications'),
        default=False
    )

    def __str__(self):
        return f"Preferences for {self.user.email}"


class UserNotificationTypePreference(TimeStampedModel):
    """Model to store user preferences for specific notification types."""
    user_preference = models.ForeignKey(
        UserNotificationPreference,
        on_delete=models.CASCADE,
        related_name='type_preferences'
    )
    notification_type = models.ForeignKey(
        NotificationType,
        on_delete=models.CASCADE,
        related_name='user_preferences'
    )
    frequency = models.CharField(
        max_length=20,
        choices=NotificationFrequency.choices,
        default=NotificationFrequency.IMMEDIATE
    )

    class Meta:
        constraints = [
            models.UniqueConstraint(
                fields=['user_preference', 'notification_type'],
                name='unique_user_preference_notification_type'
            )
        ]
        verbose_name = _('User Notification Type Preference')

    def __str__(self):
        return f"{self.user_preference.user.email} - {self.notification_type.name}"
</file>

<file path="communications/serializers.py">
from django.db.models import Q
from django.urls import reverse
from rest_framework import serializers
from .models import (
    Notification, 
    UserNotificationPreference,
    NotificationType,
    UserNotificationTypePreference,
    NotificationTrigger,
)
from investors.models import Investor

class NotificationTypeSerializer(serializers.ModelSerializer):
    """Serializer for notification types."""
    class Meta:
        model = NotificationType
        fields = ['id', 'code', 'name', 'description', 'is_active']
        read_only_fields = ['id', 'code'] 


class NotificationFrequencyField(serializers.ChoiceField):
    """Custom field for notification frequency choices."""
    def __init__(self, **kwargs):
        from .models import NotificationFrequency
        kwargs.setdefault('choices', NotificationFrequency.choices)
        super().__init__(**kwargs)


class UserNotificationTypePreferenceSerializer(serializers.ModelSerializer):
    """Serializer for the UserNotificationTypePreference model."""
    notification_type = NotificationTypeSerializer(read_only=True)
    notification_type_id = serializers.PrimaryKeyRelatedField(
        source='notification_type',
        write_only=True,
        queryset=NotificationType.objects.none()
    )
    frequency = NotificationFrequencyField()
    
    class Meta:
        model = UserNotificationTypePreference
        fields = [
            'id', 'notification_type', 'notification_type_id', 
            'frequency', 'created_at', 'updated_at'
        ]
        read_only_fields = ['id', 'notification_type', 'created_at', 'updated_at']
    
    def get_fields(self):
        """
        Dynamically set queryset for notification_type_id field.
        - For updates: Allow current notification type (even if inactive) + all active types
        - For creation: Only allow active notification types
        """
        fields = super().get_fields()
        
        if self.instance and getattr(self.instance, 'notification_type_id', None):
            queryset = NotificationType.objects.filter(
                Q(is_active=True) | Q(pk=self.instance.notification_type_id)
            )
        else:
            queryset = NotificationType.objects.filter(is_active=True)
            
        fields['notification_type_id'].queryset = queryset
        return fields


class UserNotificationPreferenceSerializer(serializers.ModelSerializer):
    """    
    Serializer for the UserNotificationPreference model.
    Handles both creation and updates of notification preferences.
    The user is automatically set from the request context on creation.
    """
    type_preferences = UserNotificationTypePreferenceSerializer(
        source='type_preferences.all',
        many=True,
        read_only=True
    )
    user_id = serializers.PrimaryKeyRelatedField(
        source='user',
        read_only=True
    )
    
    class Meta:
        model = UserNotificationPreference
        fields = [
            'user_id', 'enable_in_app', 'enable_email', 'enable_push',
            'type_preferences', 'created_at', 'updated_at'
        ]
        read_only_fields = ['user_id', 'created_at', 'updated_at']

    def create(self, validated_data):
        """Create notification preferences for the authenticated user."""
        request = self.context.get('request')
        
        if not request or not hasattr(request, 'user') or not request.user.is_authenticated:
            raise serializers.ValidationError('Authentication required for creating preferences.')
        
        validated_data['user'] = request.user
        
        if UserNotificationPreference.objects.filter(user=request.user).exists():
            raise serializers.ValidationError(
                'Notification preferences already exist for this user.'
            )
            
        return super().create(validated_data)


    def update(self, instance, validated_data):
        """Update notification preference fields."""
        update_fields = ['enable_in_app', 'enable_email', 'enable_push']
        for field in update_fields:
            if field in validated_data:
                setattr(instance, field, validated_data[field])
        
        instance.save()
        return instance


class UpdateTypePreferenceSerializer(serializers.Serializer):
    """Serializer to validate and apply per-type preference updates.

    Expects context['pref'] with the user's UserNotificationPreference instance.
    On save(), updates and returns the matching UserNotificationTypePreference.
    """
    notification_type_id = serializers.IntegerField()
    frequency = NotificationFrequencyField()

    def validate(self, attrs):
        pref = self.context.get('pref')
        if pref is None:
            raise serializers.ValidationError('Preference context is required')
        nt_id = attrs.get('notification_type_id')
        type_pref = pref.type_preferences.filter(notification_type_id=nt_id).first()
        if not type_pref:
            raise serializers.ValidationError('Notification type preference not found', code='not_found')
        attrs['type_pref'] = type_pref
        return attrs

    def save(self, **kwargs):
        type_pref = self.validated_data['type_pref']
        type_pref.frequency = self.validated_data['frequency']
        type_pref.save()
        return type_pref

class NotificationSerializer(serializers.ModelSerializer):
    """Serializer for notifications."""
    notification_type = NotificationTypeSerializer(read_only=True)
    priority_display = serializers.CharField(
        source='get_priority_display',
        read_only=True
    )
    actor = serializers.SerializerMethodField(read_only=True)
    redirect = serializers.SerializerMethodField(read_only=True)
    
    class Meta:
        model = Notification
        fields = [
            'notification_id',
            'notification_type',
            'title',
            'message',
            'is_read',
            'priority',
            'priority_display',
            'actor',
            'redirect',
            'created_at',
            'updated_at',
            'expires_at',
        ]
        read_only_fields = [
            'notification_id', 'created_at', 'updated_at'
        ]

    def _get_investor_from_user(self, user):
        """Return Investor instance for a user, if present, else None."""
        try:
            investor = user.investor 
        except (Investor.DoesNotExist, AttributeError):
            return None
        return investor if isinstance(investor, Investor) else None

    def get_actor(self, obj):
        """Return actor details for the notification trigger.
        Includes investor details if the triggering user is an investor.
        """
        actor = {
            'type': obj.triggered_by_type,
            'user_id': getattr(obj, 'triggered_by_user_id', None),
            'investor_id': None,
            'display_name': None,
        }
        user = getattr(obj, 'triggered_by_user', None)
        if user:
            investor = self._get_investor_from_user(user)
            if investor:
                actor['investor_id'] = investor.pk
                actor['display_name'] = getattr(investor, 'company_name', None)
            else:
                first = getattr(user, 'first_name', '') or ''
                last = getattr(user, 'last_name', '') or ''
                full = (first + ' ' + last).strip()
                actor['display_name'] = full or None
        return actor

    def get_redirect(self, obj):
        """Compute a redirect target the frontend can use to navigate users.
        Priority order: message -> project -> startup -> investor. Returns None if not applicable.
        """
        for field, kind in [
            ('related_message_id', 'message'),
            ('related_project_id', 'project'),
            ('related_startup_id', 'startup'),
        ]:
            rid = getattr(obj, field, None)
            if not rid:
                continue
            url = None
            if kind == 'project':
                try:
                    url = reverse('project-detail', kwargs={'pk': rid})
                except Exception:
                    url = f"/projects/{rid}"
            elif kind == 'startup':
                try:
                    url = reverse('startup-detail', kwargs={'pk': rid})
                except Exception:
                    url = f"/startups/{rid}"
            elif kind == 'message':
                url = f"/messages/{rid}"
            return {'kind': kind, 'id': rid, 'url': url}

        user = getattr(obj, 'triggered_by_user', None)
        if user and getattr(obj, 'triggered_by_type', None) == NotificationTrigger.INVESTOR:
            investor = self._get_investor_from_user(user)
            if investor:
                try:
                    url = reverse('investor-detail', kwargs={'pk': investor.pk})
                except Exception:
                    url = f"/investors/{investor.pk}"
                return {'kind': 'investor', 'id': investor.pk, 'url': url}
        return None
</file>

<file path="communications/urls.py">
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import (
    NotificationViewSet,
    NotificationTypeViewSet,
    UserNotificationPreferenceViewSet,
)

router = DefaultRouter()

router.register(
    r'notifications',
    NotificationViewSet,
    basename='notification'
)

router.register(
    r'notification-types',
    NotificationTypeViewSet,
    basename='notification-type'
)

router.register(
    r'preferences',
    UserNotificationPreferenceViewSet,
    basename='user-notification-preference'
)

app_name = 'communications'

urlpatterns = [
    path('', include(router.urls)),
]
</file>

<file path="configs/postgres/init-db.sh">
#!/bin/bash
set -euo pipefail

# Function to validate database/user name (allow only a-z, A-Z, 0-9, and _)
function is_valid_name() {
  local name="$1"
  if [[ "$name" =~ ^[a-zA-Z0-9_]+$ ]]; then
    return 0
  else
    return 1
  fi
}

function create_user_and_database() {
  local database="$1"

  # Validate name
  if ! is_valid_name "$database"; then
    echo "Error: database/user name '$database' contains invalid characters."
    exit 1
  fi

  echo "Creating user and database '$database' if they do not exist"
  psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" <<-EOSQL
    DO
    \$\$
    BEGIN
      IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '$database') THEN
        EXECUTE format('CREATE USER %I;', '$database');
      END IF;

      IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = '$database') THEN
        EXECUTE format('CREATE DATABASE %I;', '$database');
      END IF;

      EXECUTE format('GRANT ALL PRIVILEGES ON DATABASE %I TO %I;', '$database', '$database');
    END
    \$\$
    ;
EOSQL
}

if [ -n "${POSTGRES_MULTIPLE_DATABASES:-}" ]; then
  echo "Multiple databases requested: $POSTGRES_MULTIPLE_DATABASES"
  IFS=',' read -ra DBS <<< "$POSTGRES_MULTIPLE_DATABASES"
  for db in "${DBS[@]}"; do
    create_user_and_database "$db"
  done
fi
</file>

<file path="core/settings/__init__.py">
from .base_settings import *
from .constants import *
from .logging_settings import *
from .test_settings import *
from .third_party_settings import *
</file>

<file path="core/settings/constants.py">
# File validation settings
ALLOWED_IMAGE_EXTENSIONS = ["jpg", "jpeg", "png"]
ALLOWED_IMAGE_MIME_TYPES = ["image/jpeg", "image/png"]
ALLOWED_IMAGE_MODES = ["RGB", "RGBA", "L"]
MAX_IMAGE_SIZE_MB = 10
MAX_DOCUMENT_SIZE_MB = 20
MAX_IMAGE_DIMENSIONS = (5000, 5000)

ALLOWED_DOCUMENT_EXTENSIONS = [
    "pdf", "doc", "docx", "txt", "odt", "rtf",
    "xls", "xlsx", "ppt", "pptx", "zip", "rar"
]

ALLOWED_DOCUMENT_MIME_TYPES = [
    "application/pdf",
    "application/msword",
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    "text/plain",
    "application/vnd.oasis.opendocument.text",
    "application/rtf",
    "application/vnd.ms-excel",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    "application/vnd.ms-powerpoint",
    "application/vnd.openxmlformats-officedocument.presentationml.presentation",
    "application/zip",
    "application/x-rar-compressed",
]

# Social platform validation settings
ALLOWED_SOCIAL_PLATFORMS = {
    'facebook': ['facebook.com'],
    'twitter': ['twitter.com'],
    'linkedin': ['linkedin.com'],
    'instagram': ['instagram.com'],
    'youtube': ['youtube.com', 'youtu.be'],
    'tiktok': ['tiktok.com'],
    'telegram': ['t.me', 'telegram.me'],
}

# Communications app: notification types seeding configuration
COMMUNICATIONS_NOTIFICATION_TYPES = [
    {
        'code': 'startup_saved',
        'name': 'Startup Saved',
        'description': 'Notification when a user saves a startup to their favorites',
        'default_frequency': 'immediate',
        'is_active': True,
    },
    {
        'code': 'project_followed',
        'name': 'Project Followed',
        'description': 'Notification when a user follows a project',
        'default_frequency': 'immediate',
        'is_active': True,
    },
    {
        'code': 'message_received',
        'name': 'Message Received',
        'description': 'Notification when a user receives a new message',
        'default_frequency': 'immediate',
        'is_active': True,
    },
    {
        'code': 'project_updated',
        'name': 'Project Updated',
        'description': 'Notification when a followed project is updated',
        'default_frequency': 'daily_digest',
        'is_active': True,
    },
]

# Chat words settings
FORBIDDEN_WORDS_SET = {
    "spam", "scam", "xxx", "viagra", "free money", "lottery", "bitcoin",
    "crypto", "click here", "subscribe", "buy now", "offer", "promotion",
    "gamble", "casino", "adult", "nsfw", "sex", "porn", "nude"
}
</file>

<file path="core/settings/logging_settings.py">
import os
from core.settings.base_settings import BASE_DIR

# Logs
LOG_DIR = BASE_DIR / 'logs'
try:
    LOG_DIR.mkdir(exist_ok=True)
except Exception as e:
    print(f"Could not create log dir: {e}")

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json': {
            '()': 'pythonjsonlogger.json.JsonFormatter',
            'format': '%(asctime)s %(levelname)s %(name)s %(message)s',
        },
        'verbose': {
            'format': '{asctime} {levelname} {name} - {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'level': 'INFO',
        },
        'file_django': {
            'level': 'INFO',
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'django.log'),
            'backupCount': 7,
            'formatter': 'verbose',
            'encoding': 'utf-8',
            'mode': 'a',
            'delay': True,
        },
        'file_apps': {
            'level': 'DEBUG',
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'apps.log'),
            'backupCount': 7,
            'formatter': 'verbose',
            'encoding': 'utf-8',
            'mode': 'a',
            'delay': True,
        },
        'file_errors': {
            'level': 'ERROR',
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'errors.log'),
            'backupCount': 7,
            'formatter': 'verbose',
            'encoding': 'utf-8',
            'mode': 'a',
            'delay': True,
        },
        'db_file': {
            'level': 'INFO',
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'db_queries.log'),
            'backupCount': 7,
            'formatter': 'verbose',
            'encoding': 'utf-8',
            'mode': 'a',
            'delay': True,
        },
        'file_json': {
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'json_logs.log'),
            'backupCount': 7,
            'formatter': 'json',
            'level': 'INFO',
            'encoding': 'utf-8',
            'mode': 'a',
            'delay': True,
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file_django', 'file_errors'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console', 'db_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['console', 'file_django'],
            'level': 'WARNING',
            'propagate': False,
        },
        'users': {
            'handlers': ['console', 'file_apps'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'startups': {
            'handlers': ['console', 'file_apps'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'investors': {
            'handlers': ['console', 'file_apps'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'projects': {
            'handlers': ['console', 'file_apps'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'communications': {
            'handlers': ['console', 'file_apps'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'dashboard': {
            'handlers': ['console', 'file_apps'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console', 'file_errors', 'file_json'],
        'level': 'INFO',
    },
}
</file>

<file path="core/settings/test_settings.py">
from core.settings import *

ELASTICSEARCH_DSL = {
    'default': {
        'hosts': 'localhost',
        'port': 9200
    },
    'signals': {
        'pre_save': [],
        'post_save': [],
        'pre_delete': [],
        'post_delete': []
    }
}

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config('DB_NAME'),
        "USER": config('DB_USER'),
        "PASSWORD": config('DB_PASSWORD'),
        "HOST": config('DB_HOST', default='db'),
        "PORT": config('DB_PORT', default='5432'),
    }
}

# Disable password hashing for faster tests
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.MD5PasswordHasher",
]

# Use in-memory email backend
EMAIL_BACKEND = "django.core.mail.backends.locmem.EmailBackend"

REST_FRAMEWORK = {
    "DEFAULT_THROTTLE_CLASSES": [],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
    "TEST_REQUEST_DEFAULT_FORMAT": "json"
}

CELERY_TASK_ALWAYS_EAGER = True
CELERY_TASK_EAGER_PROPAGATES = True

CELERY_BROKER_URL = "redis://localhost:6379/0"
CELERY_RESULT_BACKEND = "redis://localhost:6379/0"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"
</file>

<file path="core/__init__.py">
from .celery import app as celery_app

__all__ = ('celery_app',)
</file>

<file path="core/asgi.py">
import os
from channels.auth import AuthMiddlewareStack
from channels.routing import ProtocolTypeRouter
from channels.routing import URLRouter
from channels.security.websocket import AllowedHostsOriginValidator
from django.core.asgi import get_asgi_application
from starlette.applications import Starlette
from starlette.routing import Mount
from chat.routing import websocket_urlpatterns
from fastapi_app.main import app as fastapi_app

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

# Django HTTP
django_asgi_app = get_asgi_application()

# Django WebSockets
django_channels_app = ProtocolTypeRouter({
    "http": django_asgi_app,
    "websocket": AllowedHostsOriginValidator(
        AuthMiddlewareStack(
            URLRouter(websocket_urlpatterns)
        )
    ),
})

# Django WebSockets + FastAPI
application = Starlette(
    routes=[
        Mount("/api/fastapi", app=fastapi_app),
        Mount("/", app=django_channels_app),
    ]
)
</file>

<file path="core/celery.py">
import os
from celery import Celery
from django.conf import settings

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

app = Celery('forum_project')

app.config_from_object('django.conf:settings', namespace='CELERY')

app.autodiscover_tasks()

app.conf.beat_schedule = {
    'cleanup-email-tokens-weekly': {
        'task': 'users.tasks.cleanup_email_tokens',
        'schedule': 604800.0,
    },
}

@app.task(bind=True)
def debug_task(self):
    print(f'Request: {self.request!r}')
</file>

<file path="core/healthcheck.py">
from django.http import JsonResponse
from elasticsearch import Elasticsearch
from django.conf import settings


def elasticsearch_healthcheck(request):
    """
    Performs a health check to verify connectivity with the Elasticsearch cluster.

    The function:
    - Retrieves Elasticsearch hosts from the Django settings (ELASTICSEARCH_DSL).
    - Normalizes the hosts to a list of strings.
    - Adds the "http://" scheme to hosts that lack a scheme.
    - Pings the Elasticsearch cluster to check if it is reachable.
    - Returns a JSON response indicating the health status.

    Returns:
        JsonResponse:
            - {"status": "ok"} if Elasticsearch is reachable.
            - {"status": "error", "message": "..."} if Elasticsearch is unreachable or any error occurs.
            - HTTP 400 if no valid hosts are configured.
    """
    es_config = getattr(settings, 'ELASTICSEARCH_DSL', {}).get('default', {})
    hosts = es_config.get('hosts', 'http://localhost:9200')

    hosts = hosts if isinstance(hosts, list) else [hosts]

    valid_hosts = []
    for h in hosts:
        h = str(h).strip()
        if not h:
            continue
        if not h.startswith(('http://', 'https://')):
            h = f"http://{h}"
        if h.startswith(('http://', 'https://')):
            valid_hosts.append(h)

    if not valid_hosts:
        return JsonResponse({"status": "error", "message": "No valid Elasticsearch hosts configured"}, status=400)

    try:
        client = Elasticsearch(valid_hosts)
        if client.ping():
            return JsonResponse({"status": "ok"})
        return JsonResponse({"status": "error", "message": "Elasticsearch not reachable"}, status=500)
    except Exception as e:
        return JsonResponse({"status": "error", "message": str(e)}, status=500)
</file>

<file path="core/urls_docs.py">
from django.urls import path
from drf_spectacular.views import (
    SpectacularAPIView,
    SpectacularYAMLAPIView,
    SpectacularRedocView,
    SpectacularSwaggerView,
)

urlpatterns = [
    path("schema/", SpectacularAPIView.as_view(), name="schema-json"),
    path("schema.yaml", SpectacularYAMLAPIView.as_view(), name="schema-yaml"),
    path("docs/", SpectacularSwaggerView.as_view(url_name="schema-json"), name="swagger-ui"),
    path("redoc/", SpectacularRedocView.as_view(url_name="schema-json"), name="redoc"),
]
</file>

<file path="core/wsgi.py">
"""
WSGI config for core project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', os.getenv('DJANGO_SETTINGS_MODULE', 'core.settings'))

application = get_wsgi_application()
</file>

<file path="dashboard/admin.py">
from django.contrib import admin

# Register your models here.
</file>

<file path="dashboard/apps.py">
from django.apps import AppConfig


class DashboardConfig(AppConfig):
    name = 'dashboard'
</file>

<file path="dashboard/tests.py">
from django.test import TestCase

# Create your users here.
</file>

<file path="dashboard/views.py">
from django.shortcuts import render
import logging

logger = logging.getLogger(__name__)

logger.debug("This is a debug message.")
logger.info("Informational message.")
logger.warning("Warning occurred!")
logger.error("An error happened.")
logger.critical("Critical issue!")

# Create your views here.
</file>

<file path="docs/CONTRIBUTING_DOCS.md">
# Contributing to API Documentation

This guide explains how to contribute new API documentation to the `docs/API.md` file in a consistent and maintainable way.

## Where to Add

All API documentation is maintained in `docs/API.md`. Each endpoint should be documented as a separate section using the following structure.

## Format Guidelines

Please follow this format for each new endpoint:

### Endpoint

<HTTP_METHOD> <URL_PATH>

**Example:**  
`POST /api/users/auth/jwt/logout/`

### Description

Briefly describe what the endpoint does and who should use it.

### Request Headers

List required headers, if any.

```
Content-Type: application/json  
Authorization: Bearer <access_token>
```

### Request Body

Provide a JSON example of the request payload.

```json
{
  "refresh": "<your_refresh_token>"
}
```

### Response

Describe the expected response format and status codes.

```json
{
  "detail": "Successfully logged out."
}
```

**Status codes:**

- `200 OK` – Successful operation  
- `401 Unauthorized` – Invalid or missing token  
- `400 Bad Request` – Malformed input  

### Notes

Include any additional notes, such as:

- Required permissions  
- Rate limits  
- Side effects (e.g., token blacklisting)  

## Writing Tips

- Be concise but clear.  
- Use triple backticks for code blocks.  
- Use consistent indentation and formatting.  
- Prefer present tense: "Returns a list of..." instead of "Will return..."  

## Submitting Changes

- Make your edits in a new branch.  
- Ensure formatting is consistent with existing entries.  
- Open a Pull Request referencing the related issue (if any).  
- Request review from at least one core contributor.
</file>

<file path="fastapi_app/main.py">
from fastapi import FastAPI

app = FastAPI()

@app.get("/hello")
async def hello():
    return {"message": "Hello from FastAPI"}

@app.get("/healthcheck")
async def healthcheck():
    return {"status": "ok"}
</file>

<file path="frontend/public/pictures/svg/arrow-right.svg">
<svg width="16" height="15" viewBox="0 0 16 15" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0.768024 7.90895L12.5223 7.90895L5.487 14.0161C5.3745 14.1145 5.4428 14.2973 5.59146 14.2973L7.36936 14.2973C7.44771 14.2973 7.52204 14.2692 7.5803 14.219L15.172 7.63172C15.2416 7.57145 15.2973 7.49694 15.3356 7.41323C15.3738 7.32953 15.3936 7.23858 15.3936 7.14657C15.3936 7.05455 15.3738 6.96361 15.3356 6.8799C15.2973 6.79619 15.2416 6.72168 15.172 6.66141L7.53611 0.0339549C7.50597 0.00783851 7.46981 -0.00622437 7.43164 -0.00622437L5.59347 -0.00622454C5.44481 -0.00622455 5.37651 0.178598 5.48901 0.275025L12.5223 6.38217L0.768024 6.38217C0.679632 6.38217 0.60731 6.45449 0.60731 6.54288L0.60731 7.74824C0.60731 7.83663 0.679632 7.90895 0.768024 7.90895Z" fill="black" fill-opacity="0.85"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/avatar.svg">
<svg width="38" height="38" viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="38" height="38" rx="19" fill="#AAAAAA"/>
<g clip-path="url(#clip0_5925_6127)">
<path d="M19 38C29.4778 38 38 29.4778 38 19C38 8.52216 29.4778 0 19 0C8.52216 0 0 8.52216 0 19C0 29.4778 8.52216 38 19 38ZM19 7.75132C22.2974 7.75132 24.9722 10.426 24.9722 13.7235C24.9722 17.0209 22.2975 19.6995 19 19.6995C15.7025 19.6995 13.0278 17.0248 13.0278 13.7273C13.0278 10.4299 15.7025 7.75132 19 7.75132ZM13.684 20.2752C15.1078 21.5224 16.9628 22.2827 19 22.2827C21.0372 22.2827 22.8922 21.5206 24.316 20.279C27.2621 22.0782 29.2304 25.3085 29.2304 29.0115C18.8049 31.8051 8.7696 29.0115 8.7696 29.0115C8.7696 25.3052 10.7398 22.0744 13.684 20.2752Z" fill="#EAEAEA"/>
</g>
<defs>
<clipPath id="clip0_5925_6127">
<rect width="38" height="38" fill="white"/>
</clipPath>
</defs>
</svg>
</file>

<file path="frontend/public/pictures/svg/box.svg">
<svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0 2.6786C0 1.28526 1.14 0.145264 2.53333 0.145264H22.8C23.4719 0.145264 24.1162 0.412168 24.5913 0.88726C25.0664 1.36235 25.3333 2.00672 25.3333 2.6786V5.21193H0V2.6786ZM1.26667 6.4786H24.0667V22.9453C24.0667 23.6171 23.7998 24.2615 23.3247 24.7366C22.8496 25.2117 22.2052 25.4786 21.5333 25.4786H3.8C3.12812 25.4786 2.48375 25.2117 2.00866 24.7366C1.53357 24.2615 1.26667 23.6171 1.26667 22.9453V6.4786ZM8.86667 9.01193V11.5453H16.4667V9.01193H8.86667Z" fill="#232424"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/bread.svg">
<svg width="27" height="29" viewBox="0 0 27 29" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M3.54235 28.7853C1.65051 28.7853 0.890902 25.4029 0.733248 24.0557C0.563522 22.7477 0.72111 21.4181 1.19188 20.186C1.39878 19.5998 1.75468 19.0774 2.22458 18.6703C2.69448 18.2632 3.26222 17.9854 3.87199 17.8642C5.54886 17.5776 6.73843 18.5808 8.25764 18.9248C8.54301 19.0164 8.84726 19.0325 9.1407 18.9714C9.43413 18.9104 9.70675 18.7744 9.93195 18.5766C10.1572 18.3788 10.3273 18.1261 10.4257 17.843C10.5241 17.5599 10.5474 17.2561 10.4935 16.9613C9.86284 14.4962 5.37687 14.4532 3.54235 14.4532C3.54235 11.7874 6.46612 11.4434 8.55861 11.644C9.79997 11.764 11.0223 12.0334 12.199 12.4467C12.9156 12.6903 13.7469 13.3066 14.5351 13.2493C15.7247 13.1489 15.9683 11.9164 15.4524 11.0134C14.2055 8.89227 10.6654 8.72029 8.55861 8.72029C8.55861 5.85385 11.0381 5.30923 13.4172 5.73919C14.6456 5.98103 15.8428 6.36085 16.9859 6.87144C17.7169 7.18674 18.5911 7.78869 19.3937 7.51638C21.4576 6.88577 19.3077 4.67861 18.3905 4.14832C17.7467 3.79308 17.0637 3.51411 16.3553 3.31706C15.5814 3.08774 14.6355 3.17374 15.3377 2.27081C16.4359 1.30198 17.7983 0.68314 19.2504 0.49362C21.9592 -0.136995 25.6999 -0.251653 26.3592 3.1594C26.5789 4.96031 26.1467 6.78038 25.1409 8.29032C22.4702 12.857 19.1647 17.0215 15.3234 20.659C13.2885 22.745 11.0832 24.6578 8.7306 26.3775C7.29738 27.4094 5.40554 28.7853 3.54235 28.7853Z" fill="#232424"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/building.svg">
<svg width="32" height="29" viewBox="0 0 32 29" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M31.1111 3.7286C31.6022 3.7286 32 3.32771 32 2.83276V1.0411C32 0.546149 31.6022 0.145264 31.1111 0.145264H0.888889C0.397778 0.145264 0 0.546149 0 1.0411V2.83276C0 3.32771 0.397778 3.7286 0.888889 3.7286H1.77667V25.2286H0.888889C0.397778 25.2286 0 25.6295 0 26.1244V27.9161C0 28.411 0.397778 28.8119 0.888889 28.8119H14.2222V24.3328C14.2222 23.8401 14.6222 23.4369 15.1111 23.4369H16.8889C17.3778 23.4369 17.7778 23.8401 17.7778 24.3328V28.8119H31.1111C31.6022 28.8119 32 28.411 32 27.9161V26.1244C32 25.6295 31.6022 25.2286 31.1111 25.2286H30.2222V3.7286H31.1111ZM14.2222 6.23693C14.2222 5.8786 14.5778 5.52026 14.9333 5.52026H17.0667C17.4222 5.52026 17.7778 5.8786 17.7778 6.23693V8.38693C17.7778 8.74526 17.4222 9.1036 17.0667 9.1036H14.9333C14.5778 9.1036 14.2222 8.74526 14.2222 8.38693V6.23693ZM14.2222 11.6119C14.2222 11.2536 14.5778 10.8953 14.9333 10.8953H17.0667C17.4222 10.8953 17.7778 11.2536 17.7778 11.6119V13.7619C17.7778 14.1203 17.4222 14.4786 17.0667 14.4786H14.9333C14.5778 14.4786 14.2222 14.1203 14.2222 13.7619V11.6119ZM7.11111 6.23693C7.11111 5.8786 7.46667 5.52026 7.82222 5.52026H9.95556C10.3111 5.52026 10.6667 5.8786 10.6667 6.23693V8.38693C10.6667 8.74526 10.3111 9.1036 9.95556 9.1036H7.82222C7.46667 9.1036 7.11111 8.74526 7.11111 8.38693V6.23693ZM9.95556 14.4786H7.82222C7.46667 14.4786 7.11111 14.1203 7.11111 13.7619V11.6119C7.11111 11.2536 7.46667 10.8953 7.82222 10.8953H9.95556C10.3111 10.8953 10.6667 11.2536 10.6667 11.6119V13.7619C10.6667 14.1203 10.3111 14.4786 9.95556 14.4786ZM10.6667 21.6453C10.6667 18.6767 13.0544 16.2703 16 16.2703C18.9456 16.2703 21.3333 18.6767 21.3333 21.6453H10.6667ZM24.8889 13.7619C24.8889 14.1203 24.5333 14.4786 24.1778 14.4786H22.0444C21.6889 14.4786 21.3333 14.1203 21.3333 13.7619V11.6119C21.3333 11.2536 21.6889 10.8953 22.0444 10.8953H24.1778C24.5333 10.8953 24.8889 11.2536 24.8889 11.6119V13.7619ZM24.8889 8.38693C24.8889 8.74526 24.5333 9.1036 24.1778 9.1036H22.0444C21.6889 9.1036 21.3333 8.74526 21.3333 8.38693V6.23693C21.3333 5.8786 21.6889 5.52026 22.0444 5.52026H24.1778C24.5333 5.52026 24.8889 5.8786 24.8889 6.23693V8.38693Z" fill="#232424"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/cart.svg">
<svg width="32" height="29" viewBox="0 0 32 29" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0 1.45776C0 0.73042 0.599528 0.145264 1.34474 0.145264H3.89413C5.12681 0.145264 6.21941 0.845264 6.72929 1.89526H29.7579C31.2315 1.89526 32.3073 3.26245 31.9207 4.65151L29.6234 12.9804C29.1472 14.6976 27.5503 15.8953 25.7293 15.8953H9.56444L9.86701 17.4539C9.99027 18.0718 10.545 18.5203 11.1893 18.5203H27.343C28.0882 18.5203 28.6877 19.1054 28.6877 19.8328C28.6877 20.5601 28.0882 21.1453 27.343 21.1453H11.1893C9.25067 21.1453 7.58656 19.8 7.22796 17.946L4.33678 3.12573C4.29755 2.91792 4.11265 2.77026 3.89413 2.77026H1.34474C0.599528 2.77026 0 2.18511 0 1.45776ZM7.17193 25.5203C7.17193 25.1755 7.24149 24.8342 7.37665 24.5157C7.51181 24.1972 7.70992 23.9079 7.95966 23.6641C8.2094 23.4204 8.50588 23.227 8.83219 23.0951C9.15849 22.9632 9.50822 22.8953 9.8614 22.8953C10.2146 22.8953 10.5643 22.9632 10.8906 23.0951C11.2169 23.227 11.5134 23.4204 11.7631 23.6641C12.0129 23.9079 12.211 24.1972 12.3462 24.5157C12.4813 24.8342 12.5509 25.1755 12.5509 25.5203C12.5509 25.865 12.4813 26.2063 12.3462 26.5248C12.211 26.8433 12.0129 27.1327 11.7631 27.3764C11.5134 27.6202 11.2169 27.8135 10.8906 27.9454C10.5643 28.0774 10.2146 28.1453 9.8614 28.1453C9.50822 28.1453 9.15849 28.0774 8.83219 27.9454C8.50588 27.8135 8.2094 27.6202 7.95966 27.3764C7.70992 27.1327 7.51181 26.8433 7.37665 26.5248C7.24149 26.2063 7.17193 25.865 7.17193 25.5203ZM25.9982 22.8953C26.7115 22.8953 27.3956 23.1718 27.9 23.6641C28.4044 24.1564 28.6877 24.8241 28.6877 25.5203C28.6877 26.2165 28.4044 26.8841 27.9 27.3764C27.3956 27.8687 26.7115 28.1453 25.9982 28.1453C25.285 28.1453 24.6009 27.8687 24.0965 27.3764C23.5921 26.8841 23.3088 26.2165 23.3088 25.5203C23.3088 24.8241 23.5921 24.1564 24.0965 23.6641C24.6009 23.1718 25.285 22.8953 25.9982 22.8953Z" fill="#232424"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/check.svg">
<svg width="12" height="8" viewBox="0 0 12 8" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M5.10545 7.60407L5.08783 7.62169L0.687988 3.22185L2.12067 1.78917L5.10551 4.77402L9.87953 0L11.3122 1.43268L5.12313 7.62175L5.10545 7.60407Z" fill="white"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/eye-invisible.svg">
<svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M13.722 6.59537C13.1727 5.43819 12.519 4.49443 11.761 3.76412L10.966 4.55912C11.6143 5.17865 12.179 5.98912 12.6673 6.9985C11.3673 9.68912 9.52197 10.9672 7.00009 10.9672C6.24311 10.9672 5.54587 10.8507 4.90837 10.6176L4.04697 11.479C4.93238 11.8878 5.91676 12.0922 7.00009 12.0922C10.0032 12.0922 12.2438 10.5282 13.722 7.40006C13.7814 7.27426 13.8122 7.13685 13.8122 6.99772C13.8122 6.85858 13.7814 6.72118 13.722 6.59537ZM12.7287 1.58537L12.0626 0.918497C12.051 0.906875 12.0372 0.897655 12.022 0.891364C12.0068 0.885074 11.9906 0.881836 11.9742 0.881836C11.9577 0.881836 11.9415 0.885074 11.9263 0.891364C11.9111 0.897655 11.8973 0.906875 11.8857 0.918497L10.1768 2.62662C9.23462 2.14537 8.17571 1.90475 7.00009 1.90475C3.99697 1.90475 1.75634 3.46881 0.278215 6.59693C0.218802 6.72274 0.187988 6.86015 0.187988 6.99928C0.187988 7.13841 0.218802 7.27582 0.278215 7.40162C0.868736 8.64537 1.57967 9.6423 2.41103 10.3924L0.75759 12.0454C0.734166 12.0688 0.721008 12.1006 0.721008 12.1337C0.721008 12.1669 0.734166 12.1987 0.75759 12.2221L1.42462 12.8891C1.44806 12.9125 1.47984 12.9257 1.51298 12.9257C1.54612 12.9257 1.5779 12.9125 1.60134 12.8891L12.7287 1.76225C12.7403 1.75064 12.7495 1.73685 12.7558 1.72168C12.7621 1.7065 12.7653 1.69024 12.7653 1.67381C12.7653 1.65738 12.7621 1.64112 12.7558 1.62594C12.7495 1.61077 12.7403 1.59698 12.7287 1.58537ZM1.3329 6.9985C2.63447 4.30787 4.47978 3.02975 7.00009 3.02975C7.85228 3.02975 8.62712 3.176 9.33009 3.47334L8.23165 4.57178C7.71145 4.29422 7.1158 4.19121 6.5326 4.27794C5.94939 4.36468 5.4095 4.63656 4.99258 5.05348C4.57565 5.47041 4.30377 6.0103 4.21704 6.59351C4.1303 7.17671 4.23331 7.77235 4.51087 8.29256L3.20743 9.596C2.48603 8.95928 1.86415 8.09662 1.3329 6.9985ZM5.18759 6.9985C5.18786 6.72297 5.25313 6.4514 5.37808 6.20584C5.50303 5.96027 5.68414 5.74765 5.9067 5.58523C6.12926 5.42281 6.387 5.31519 6.65898 5.27109C6.93095 5.227 7.20949 5.24769 7.47197 5.33147L5.27056 7.53287C5.21538 7.36012 5.18739 7.17985 5.18759 6.9985Z" fill="#989FA6"/>
<path d="M6.93786 8.75109C6.8838 8.75109 6.83052 8.74859 6.7777 8.74375L5.95239 9.56906C6.44878 9.75916 6.98961 9.80141 7.5095 9.69069C8.02939 9.57997 8.50608 9.32103 8.88194 8.94517C9.2578 8.56931 9.51674 8.09262 9.62746 7.57273C9.73818 7.05285 9.69593 6.51202 9.50583 6.01562L8.68052 6.84094C8.68536 6.89375 8.68786 6.94703 8.68786 7.00109C8.68798 7.23094 8.6428 7.45856 8.5549 7.67094C8.467 7.88331 8.3381 8.07628 8.17557 8.23881C8.01305 8.40133 7.82008 8.53023 7.6077 8.61813C7.39533 8.70604 7.16771 8.75122 6.93786 8.75109Z" fill="#989FA6"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/eye.svg">
<svg width="12" height="10" viewBox="0 0 12 10" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M11.8817 4.64727C10.5856 1.91699 8.62639 0.542969 6.00002 0.542969C3.37228 0.542969 1.41447 1.91699 0.118377 4.64863C0.0663905 4.75871 0.0394287 4.87894 0.0394287 5.00068C0.0394287 5.12242 0.0663905 5.24265 0.118377 5.35273C1.41447 8.08301 3.37365 9.45703 6.00002 9.45703C8.62775 9.45703 10.5856 8.08301 11.8817 5.35137C11.9869 5.12988 11.9869 4.87285 11.8817 4.64727ZM6.00002 8.47266C3.79474 8.47266 2.1801 7.3543 1.04123 5C2.1801 2.6457 3.79474 1.52734 6.00002 1.52734C8.20529 1.52734 9.81994 2.6457 10.9588 5C9.82131 7.3543 8.20666 8.47266 6.00002 8.47266Z" fill="#989FA6"/>
<path d="M5.9453 2.59375C4.61639 2.59375 3.53905 3.67109 3.53905 5C3.53905 6.32891 4.61639 7.40625 5.9453 7.40625C7.27421 7.40625 8.35155 6.32891 8.35155 5C8.35155 3.67109 7.27421 2.59375 5.9453 2.59375ZM5.9453 6.53125C5.09901 6.53125 4.41405 5.84629 4.41405 5C4.41405 4.15371 5.09901 3.46875 5.9453 3.46875C6.79159 3.46875 7.47655 4.15371 7.47655 5C7.47655 5.84629 6.79159 6.53125 5.9453 6.53125Z" fill="#989FA6"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/footer-logo.svg">
<svg width="208" height="30" viewBox="0 0 208 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M30.5022 0.861606C30.6133 0.965485 30.6628 1.11372 30.6347 1.25826L29.7323 5.9012C29.7304 5.91076 29.7282 5.92027 29.7257 5.9297C29.4727 6.8765 28.6991 8.00554 27.5333 8.58077C26.9402 8.87342 26.245 9.02209 25.4783 8.9238C24.8218 8.83963 24.137 8.57758 23.4367 8.10445L22.6063 8.88124C22.4194 9.05607 22.1164 9.05607 21.9295 8.88124C21.7426 8.7064 21.7426 8.42294 21.9295 8.24811L22.7571 7.47388C22.2102 6.78346 21.9011 6.11719 21.7935 5.48487C21.6686 4.75012 21.821 4.08985 22.143 3.53221C22.7749 2.43778 24.0426 1.75928 25.1163 1.58167L30.0782 0.737702C30.2327 0.711422 30.3912 0.757727 30.5022 0.861606ZM24.1238 7.46167C24.6695 7.80819 25.1671 7.98015 25.6083 8.03671C26.1585 8.10725 26.6533 8.00268 27.0867 7.78882C27.9685 7.35371 28.5914 6.46497 28.7935 5.72609L29.4189 2.50814L26.1304 5.58447H27.2311C27.4954 5.58447 27.7096 5.78491 27.7096 6.03216C27.7096 6.27941 27.4954 6.47985 27.2311 6.47985L25.1733 6.47985L24.1238 7.46167ZM25.4537 4.95134L28.7421 1.87501L25.2839 2.46323C24.4402 2.6025 23.4527 3.14794 22.9851 3.95775C22.7572 4.35244 22.6487 4.81466 22.7388 5.34418C22.8127 5.77883 23.0238 6.27738 23.4425 6.83271L24.4965 5.84672V3.92173C24.4965 3.67448 24.7108 3.47404 24.9751 3.47404C25.2394 3.47404 25.4537 3.67448 25.4537 3.92173V4.95134Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M0.536961 28.967C0.648004 29.0709 0.80646 29.1172 0.960966 29.0909L5.92411 28.2468C5.93433 28.245 5.94449 28.243 5.95457 28.2406C6.96667 28.0039 8.17357 27.2802 8.78848 26.1896C9.1013 25.6348 9.26023 24.9845 9.15516 24.2673C9.06518 23.6531 8.78506 23.0124 8.2793 22.3573L9.10966 21.5805C9.29655 21.4057 9.29655 21.1222 9.10966 20.9474C8.92277 20.7726 8.61976 20.7726 8.43287 20.9474L7.60525 21.7216C6.86721 21.2099 6.15499 20.9208 5.47907 20.8202C4.69364 20.7033 3.98784 20.8458 3.39174 21.1471C2.22183 21.7382 1.49654 22.9242 1.30669 23.9285L0.404513 28.5704C0.376421 28.7149 0.425919 28.8631 0.536961 28.967ZM7.59219 23.0001C7.96261 23.5106 8.14643 23.9761 8.20689 24.3888C8.2823 24.9036 8.17051 25.3665 7.9419 25.7719C7.47679 26.5968 6.52676 27.1795 5.73692 27.3685L2.29705 27.9536L5.58553 24.8773V25.9069C5.58553 26.1542 5.79979 26.3546 6.0641 26.3546C6.3284 26.3546 6.54266 26.1542 6.54266 25.9069L6.54266 23.9819L7.59219 23.0001ZM4.90874 24.2442L1.62026 27.3205L2.24904 24.0853C2.39792 23.2961 2.98098 22.3723 3.84663 21.9349C4.26854 21.7217 4.76263 21.6202 5.32868 21.7044C5.7933 21.7736 6.32623 21.9711 6.91985 22.3628L5.86587 23.3488H3.80812C3.54382 23.3488 3.32956 23.5492 3.32956 23.7965C3.32956 24.0437 3.54382 24.2442 3.80812 24.2442H4.90874Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M30.463 28.967C30.352 29.0709 30.1935 29.1172 30.039 29.0909L25.0759 28.2468C25.0657 28.245 25.0555 28.243 25.0454 28.2406C24.0333 28.0039 22.8264 27.2802 22.2115 26.1896C21.8987 25.6348 21.7398 24.9845 21.8448 24.2673C21.9348 23.6531 22.2149 23.0124 22.7207 22.3573L21.8903 21.5805C21.7035 21.4057 21.7035 21.1222 21.8903 20.9474C22.0772 20.7726 22.3802 20.7726 22.5671 20.9474L23.3948 21.7216C24.1328 21.2099 24.845 20.9208 25.5209 20.8202C26.3064 20.7033 27.0122 20.8458 27.6083 21.1471C28.7782 21.7382 29.5035 22.9242 29.6933 23.9285L30.5955 28.5704C30.6236 28.7149 30.5741 28.8631 30.463 28.967ZM23.4078 23.0001C23.0374 23.5106 22.8536 23.9761 22.7931 24.3888C22.7177 24.9035 22.8295 25.3665 23.0581 25.7719C23.5232 26.5968 24.4732 27.1795 25.2631 27.3685L28.703 27.9536L25.4145 24.8773V25.9069C25.4145 26.1542 25.2002 26.3546 24.9359 26.3546C24.6716 26.3546 24.4573 26.1542 24.4573 25.9069V23.9819L23.4078 23.0001ZM26.0913 24.2442L29.3797 27.3205L28.751 24.0853C28.6021 23.2961 28.019 22.3723 27.1534 21.9349C26.7315 21.7217 26.2374 21.6202 25.6713 21.7044C25.2067 21.7736 24.6738 21.9711 24.0801 22.3628L25.1341 23.3488H27.1919C27.4562 23.3488 27.6704 23.5492 27.6704 23.7965C27.6704 24.0437 27.4562 24.2442 27.1919 24.2442H26.0913Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M0.458587 0.898257C0.347544 1.00214 0.298046 1.15037 0.326138 1.29491L1.22853 5.93785C1.23039 5.94741 1.23258 5.95692 1.2351 5.96635C1.48812 6.91315 2.26175 8.04219 3.42752 8.61743C4.02058 8.91007 4.71577 9.05874 5.48248 8.96045C6.13903 8.87628 6.82386 8.61423 7.52413 8.1411L8.35449 8.91789C8.54138 9.09272 8.84439 9.09272 9.03129 8.91789C9.21818 8.74306 9.21818 8.45959 9.03129 8.28476L8.20367 7.51054C8.75065 6.82011 9.05973 6.15384 9.16727 5.52152C9.29223 4.78677 9.13985 4.1265 8.81785 3.56886C8.18591 2.47443 6.91819 1.79593 5.84454 1.61832L0.882591 0.774353C0.728086 0.748074 0.56963 0.794378 0.458587 0.898257ZM6.83702 7.49832C6.29134 7.84484 5.79372 8.0168 5.35252 8.07336C4.8023 8.1439 4.30747 8.03933 3.87406 7.82547C2.99229 7.39036 2.36944 6.50163 2.16731 5.76274L1.54188 2.54479L4.83036 5.62112H3.72975C3.46544 5.62112 3.25118 5.82156 3.25118 6.06881C3.25118 6.31606 3.46544 6.5165 3.72975 6.5165L5.78749 6.5165L6.83702 7.49832ZM5.50716 4.98799L2.21867 1.91166L5.67696 2.49988C6.52062 2.63915 7.50813 3.1846 7.97573 3.9944C8.20363 4.38909 8.31209 4.85131 8.22203 5.38084C8.14811 5.81548 7.93702 6.31404 7.51827 6.86936L6.46428 5.88337V3.95838C6.46428 3.71113 6.25002 3.51069 5.98572 3.51069C5.72142 3.51069 5.50716 3.71113 5.50716 3.95838V4.98799Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M16.2896 14.1574C15.8535 13.7494 15.1465 13.7494 14.7104 14.1574C14.2743 14.5653 14.2743 15.2267 14.7104 15.6347C15.1465 16.0426 15.8535 16.0426 16.2896 15.6347C16.7257 15.2267 16.7257 14.5653 16.2896 14.1574ZM14.0336 13.5242C14.8435 12.7666 16.1565 12.7666 16.9664 13.5242C17.7762 14.2819 17.7762 15.5102 16.9664 16.2678C16.1565 17.0254 14.8435 17.0254 14.0336 16.2678C13.2238 15.5102 13.2238 14.2819 14.0336 13.5242Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M18.32 12.258C18.5069 12.4328 18.5069 12.7163 18.32 12.8911L16.9664 14.1574C16.7795 14.3322 16.4765 14.3322 16.2896 14.1574C16.1027 13.9825 16.1027 13.6991 16.2896 13.5243L17.6432 12.258C17.8301 12.0832 18.1331 12.0832 18.32 12.258Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M14.7104 15.6347C14.8973 15.8095 14.8973 16.093 14.7104 16.2678L13.3568 17.5341C13.1699 17.7089 12.8669 17.7089 12.68 17.5341C12.4931 17.3593 12.4931 17.0758 12.68 16.901L14.0336 15.6347C14.2205 15.4599 14.5235 15.4598 14.7104 15.6347Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M16.2896 15.6347C16.4765 15.4598 16.7795 15.4599 16.9664 15.6347L18.32 16.901C18.5069 17.0758 18.5069 17.3593 18.32 17.5341C18.1331 17.7089 17.8301 17.7089 17.6432 17.5341L16.2896 16.2678C16.1027 16.093 16.1027 15.8095 16.2896 15.6347Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M12.68 12.258C12.8669 12.0832 13.1699 12.0832 13.3568 12.258L14.7104 13.5243C14.8973 13.6991 14.8973 13.9825 14.7104 14.1574C14.5235 14.3322 14.2205 14.3322 14.0336 14.1574L12.68 12.8911C12.4931 12.7163 12.4931 12.4328 12.68 12.258Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M18.1074 16.0798C17.5687 15.966 17.1831 16.0651 16.9664 16.2678C16.7497 16.4705 16.6437 16.8313 16.7654 17.3352C16.8854 17.8326 17.2181 18.4027 17.756 18.9059C18.2939 19.409 18.9032 19.7202 19.4349 19.8325C19.9736 19.9463 20.3592 19.8472 20.5759 19.6445C20.7927 19.4418 20.8986 19.081 20.7769 18.5771C20.6569 18.0797 20.3242 17.5097 19.7863 17.0065C19.2485 16.5033 18.6391 16.1921 18.1074 16.0798ZM18.3182 15.2064C19.0522 15.3614 19.8174 15.7692 20.4631 16.3733C21.1089 16.9774 21.5448 17.6933 21.7106 18.3799C21.8747 19.0598 21.7836 19.781 21.2527 20.2776C20.7219 20.7742 19.9509 20.8595 19.2241 20.7059C18.4902 20.5509 17.7249 20.1431 17.0792 19.539C16.4334 18.9349 15.9975 18.219 15.8318 17.5325C15.6676 16.8525 15.7587 16.1313 16.2896 15.6347C16.8204 15.1381 17.5914 15.0529 18.3182 15.2064Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M14.2346 17.3352C14.3562 16.8312 14.2503 16.4705 14.0336 16.2678C13.8169 16.0651 13.4313 15.9659 12.8926 16.0797C12.3609 16.1921 11.7515 16.5032 11.2136 17.0064C10.6758 17.5096 10.3431 18.0797 10.2231 18.577C10.1014 19.081 10.2073 19.4417 10.4241 19.6445C10.6408 19.8472 11.0264 19.9463 11.5651 19.8325C12.0968 19.7202 12.7061 19.409 13.244 18.9058C13.7819 18.4026 14.1145 17.8326 14.2346 17.3352ZM15.1682 17.5324C15.0025 18.219 14.5666 18.9348 13.9208 19.5389C13.2751 20.143 12.5098 20.5508 11.7759 20.7059C11.0491 20.8594 10.2781 20.7742 9.74726 20.2776C9.21642 19.781 9.12531 19.0598 9.28944 18.3798C9.45516 17.6932 9.89109 16.9774 10.5368 16.3733C11.1826 15.7692 11.9478 15.3614 12.6817 15.2064C13.4086 15.0528 14.1796 15.1381 14.7104 15.6347C15.2413 16.1313 15.3324 16.8525 15.1682 17.5324Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M20.7769 11.215C20.8986 10.711 20.7927 10.3503 20.5759 10.1475C20.3592 9.94478 19.9736 9.8457 19.4349 9.9595C18.9032 10.0718 18.2939 10.383 17.756 10.8862C17.2181 11.3894 16.8854 11.9594 16.7654 12.4568C16.6437 12.9607 16.7497 13.3215 16.9664 13.5242C17.1831 13.727 17.5687 13.826 18.1074 13.7122C18.6391 13.5999 19.2485 13.2887 19.7863 12.7856C20.3242 12.2824 20.6569 11.7123 20.7769 11.215ZM21.7105 11.4122C21.5448 12.0987 21.1089 12.8146 20.4631 13.4187C19.8174 14.0228 19.0521 14.4306 18.3182 14.5856C17.5914 14.7392 16.8204 14.654 16.2896 14.1574C15.7587 13.6608 15.6676 12.9395 15.8318 12.2596C15.9975 11.573 16.4334 10.8571 17.0792 10.253C17.7249 9.64895 18.4902 9.24114 19.2241 9.08611C19.9509 8.93257 20.7219 9.0178 21.2527 9.51439C21.7836 10.011 21.8747 10.7322 21.7105 11.4122Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M11.5651 9.95955C11.0264 9.84575 10.6408 9.94483 10.4241 10.1476C10.2073 10.3503 10.1014 10.711 10.2231 11.215C10.3431 11.7124 10.6758 12.2824 11.2137 12.7856C11.7515 13.2888 12.3609 13.6 12.8926 13.7123C13.4313 13.8261 13.8169 13.727 14.0336 13.5242C14.2503 13.3215 14.3563 12.9608 14.2346 12.4568C14.1146 11.9595 13.7819 11.3894 13.244 10.8862C12.7061 10.383 12.0968 10.0719 11.5651 9.95955ZM11.7759 9.08615C12.5098 9.24119 13.2751 9.649 13.9208 10.2531C14.5666 10.8572 15.0025 11.573 15.1682 12.2596C15.3324 12.9396 15.2413 13.6608 14.7104 14.1574C14.1796 14.654 13.4086 14.7392 12.6818 14.5857C11.9479 14.4306 11.1826 14.0228 10.5369 13.4187C9.89111 12.8146 9.45517 12.0988 9.28945 11.4122C9.12532 10.7323 9.21643 10.011 9.74727 9.51444C10.2781 9.01785 11.0491 8.93261 11.7759 9.08615Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M15.9744 1.84724C15.7688 1.46274 15.5735 1.39538 15.5 1.39538C15.4265 1.39538 15.2312 1.46274 15.0257 1.84724C14.8345 2.20495 14.7024 2.73046 14.7024 3.33537C14.7024 3.94028 14.8345 4.46578 15.0257 4.8235C15.2312 5.20799 15.4265 5.27536 15.5 5.27536C15.5735 5.27536 15.7688 5.20799 15.9744 4.8235C16.1655 4.46578 16.2976 3.94028 16.2976 3.33537C16.2976 2.73046 16.1655 2.20495 15.9744 1.84724ZM16.8304 1.44681C17.1011 1.95327 17.2547 2.6216 17.2547 3.33537C17.2547 4.04914 17.1011 4.71747 16.8304 5.22392C16.5741 5.7036 16.1313 6.17074 15.5 6.17074C14.8687 6.17074 14.426 5.7036 14.1696 5.22392C13.8989 4.71747 13.7453 4.04914 13.7453 3.33537C13.7453 2.6216 13.8989 1.95327 14.1696 1.44681C14.426 0.967135 14.8687 0.5 15.5 0.5C16.1313 0.5 16.5741 0.967135 16.8304 1.44681Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M16.5793 9.75321C16.579 9.1985 16.098 8.74852 15.5051 8.74829C14.9124 8.74806 14.4323 9.1972 14.4326 9.75161L14.4331 10.9131C14.4332 11.1603 14.219 11.3608 13.9547 11.3609C13.6904 11.361 13.4761 11.1607 13.476 10.9134L13.4754 9.75199C13.475 8.70278 14.3839 7.85247 15.5055 7.85291C16.6267 7.85335 17.5359 8.70391 17.5364 9.75283L17.5369 10.8917C17.537 11.1389 17.3229 11.3394 17.0586 11.3395C16.7943 11.3396 16.5799 11.1393 16.5798 10.892L16.5793 9.75321Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M1.44015 15.4437C1.02914 15.2515 0.957128 15.0687 0.957128 15C0.957128 14.9312 1.02914 14.7485 1.44015 14.5562C1.82253 14.3774 2.38428 14.2538 3.03091 14.2538C3.67753 14.2538 4.23928 14.3774 4.62166 14.5562C5.03267 14.7485 5.10468 14.9312 5.10468 15C5.10468 15.0687 5.03267 15.2515 4.62166 15.4437C4.23928 15.6226 3.67753 15.7461 3.03091 15.7461C2.38428 15.7461 1.82253 15.6226 1.44015 15.4437ZM1.01211 16.2446C1.55349 16.4978 2.26791 16.6415 3.03091 16.6415C3.7939 16.6415 4.50832 16.4978 5.04971 16.2446C5.56246 16.0047 6.06181 15.5906 6.06181 15C6.06181 14.4094 5.56246 13.9952 5.04971 13.7554C4.50832 13.5022 3.7939 13.3585 3.03091 13.3585C2.26791 13.3585 1.55349 13.5022 1.01211 13.7554C0.499351 13.9952 0 14.4094 0 15C0 15.5906 0.499351 16.0047 1.01211 16.2446Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M9.89135 16.0096C9.29838 16.0094 8.81738 15.5594 8.81713 15.0047C8.81688 14.4503 9.29699 14.0012 9.88964 14.0014L11.1312 14.0019C11.3955 14.002 11.6098 13.8016 11.6099 13.5544C11.6101 13.3071 11.3959 13.1066 11.1316 13.1065L9.89004 13.106C8.76847 13.1056 7.85953 13.9559 7.86 15.0051C7.86047 16.054 8.76969 16.9046 9.89094 16.905L11.1083 16.9055C11.3726 16.9056 11.587 16.7052 11.5871 16.458C11.5872 16.2107 11.373 16.0102 11.1087 16.0101L9.89135 16.0096Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M29.5599 14.5563C29.9709 14.7485 30.0429 14.9313 30.0429 15C30.0429 15.0688 29.9709 15.2515 29.5599 15.4438C29.1775 15.6226 28.6157 15.7462 27.9691 15.7462C27.3225 15.7462 26.7607 15.6226 26.3783 15.4438C25.9673 15.2515 25.8953 15.0688 25.8953 15C25.8953 14.9313 25.9673 14.7485 26.3783 14.5563C26.7607 14.3774 27.3225 14.2539 27.9691 14.2539C28.6157 14.2539 29.1775 14.3774 29.5599 14.5563ZM29.9879 13.7554C29.4465 13.5022 28.7321 13.3585 27.9691 13.3585C27.2061 13.3585 26.4917 13.5022 25.9503 13.7554C25.4375 13.9953 24.9382 14.4094 24.9382 15C24.9382 15.5906 25.4375 16.0048 25.9503 16.2446C26.4917 16.4978 27.2061 16.6415 27.9691 16.6415C28.7321 16.6415 29.4465 16.4978 29.9879 16.2446C30.5007 16.0048 31 15.5906 31 15C31 14.4094 30.5007 13.9953 29.9879 13.7554Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M21.1087 13.9904C21.7016 13.9906 22.1826 14.4406 22.1829 14.9953C22.1831 15.5497 21.703 15.9988 21.1104 15.9986L19.8688 15.9981C19.6045 15.998 19.3902 16.1984 19.3901 16.4456C19.3899 16.6929 19.6041 16.8934 19.8684 16.8935L21.11 16.894C22.2315 16.8944 23.1405 16.0441 23.14 14.9949C23.1395 13.946 22.2303 13.0954 21.1091 13.095L19.8917 13.0945C19.6274 13.0944 19.413 13.2948 19.4129 13.542C19.4128 13.7893 19.627 13.9898 19.8913 13.9899L21.1087 13.9904Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M15.0257 28.1528C15.2312 28.5373 15.4265 28.6046 15.5 28.6046C15.5735 28.6046 15.7688 28.5373 15.9743 28.1528C16.1655 27.795 16.2976 27.2695 16.2976 26.6646C16.2976 26.0597 16.1655 25.5342 15.9743 25.1765C15.7688 24.792 15.5735 24.7246 15.5 24.7246C15.4265 24.7246 15.2312 24.792 15.0257 25.1765C14.8345 25.5342 14.7024 26.0597 14.7024 26.6646C14.7024 27.2695 14.8345 27.795 15.0257 28.1528ZM14.1696 28.5532C13.8989 28.0467 13.7453 27.3784 13.7453 26.6646C13.7453 25.9509 13.8989 25.2825 14.1696 24.7761C14.4259 24.2964 14.8687 23.8293 15.5 23.8293C16.1313 23.8293 16.574 24.2964 16.8304 24.7761C17.1011 25.2825 17.2547 25.9509 17.2547 26.6646C17.2547 27.3784 17.1011 28.0467 16.8304 28.5532C16.574 29.0329 16.1313 29.5 15.5 29.5C14.8687 29.5 14.4259 29.0329 14.1696 28.5532Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M14.4207 20.2468C14.421 20.8015 14.902 21.2515 15.4949 21.2517C16.0876 21.2519 16.5677 20.8028 16.5674 20.2484L16.5669 19.0869C16.5668 18.8397 16.781 18.6392 17.0453 18.6391C17.3096 18.639 17.5239 18.8393 17.524 19.0866L17.5246 20.248C17.525 21.2972 16.6161 22.1475 15.4945 22.1471C14.3733 22.1466 13.4641 21.2961 13.4636 20.2472L13.4631 19.1083C13.463 18.8611 13.6771 18.6606 13.9414 18.6605C14.2057 18.6604 14.4201 18.8607 14.4202 19.108L14.4207 20.2468Z" fill="white"/>
<path d="M50.756 23.36C49.02 23.36 47.488 23.004 46.16 22.292C44.832 21.58 43.796 20.572 43.052 19.268C42.308 17.964 41.936 16.424 41.936 14.648C41.936 13.352 42.152 12.168 42.584 11.096C43.024 10.016 43.64 9.084 44.432 8.3C45.232 7.516 46.172 6.912 47.252 6.488C48.34 6.056 49.528 5.84 50.816 5.84C52.216 5.84 53.392 6.016 54.344 6.368C55.296 6.72 56.156 7.22 56.924 7.868L54.932 11.144C54.468 10.664 53.908 10.308 53.252 10.076C52.596 9.836 51.872 9.716 51.08 9.716C50.296 9.716 49.596 9.832 48.98 10.064C48.372 10.288 47.852 10.612 47.42 11.036C46.996 11.46 46.672 11.972 46.448 12.572C46.224 13.172 46.112 13.844 46.112 14.588C46.112 15.612 46.312 16.488 46.712 17.216C47.12 17.944 47.7 18.504 48.452 18.896C49.204 19.28 50.104 19.472 51.152 19.472C51.904 19.472 52.648 19.36 53.384 19.136C54.128 18.904 54.832 18.532 55.496 18.02L57.32 21.368C56.544 21.968 55.616 22.452 54.536 22.82C53.456 23.18 52.196 23.36 50.756 23.36ZM59.7378 23V6.2H66.5538C67.8018 6.2 68.8898 6.404 69.8178 6.812C70.7538 7.212 71.4738 7.796 71.9778 8.564C72.4898 9.332 72.7458 10.252 72.7458 11.324C72.7458 12.148 72.5898 12.876 72.2778 13.508C71.9658 14.132 71.5378 14.652 70.9938 15.068C70.4498 15.484 69.8338 15.796 69.1458 16.004L73.6698 23H68.9418L65.1978 16.82H63.7218V23H59.7378ZM63.7218 13.628H66.0738C66.9058 13.628 67.5538 13.464 68.0178 13.136C68.4898 12.808 68.7258 12.288 68.7258 11.576C68.7258 10.856 68.5018 10.328 68.0538 9.992C67.6138 9.648 66.9818 9.476 66.1578 9.476H63.7218V13.628ZM74.3184 23L80.5944 6.2H85.2144L91.5504 23H87.0624L85.8744 19.592H79.8504L78.6864 23H74.3184ZM80.7504 16.268H84.9504L82.8384 10.46L80.7504 16.268ZM93.605 23V6.2H104.669V9.836H97.589V13.304H103.925V16.796H97.589V23H93.605ZM110.854 23V9.836H106.378V6.2H119.338V9.836H114.862V23H110.854ZM121.777 23V6.2H125.605L131.989 16.796L130.405 16.808L136.477 6.2H140.293V23H136.429L136.501 11.288L137.209 11.54L132.361 19.832H129.709L124.669 11.54L125.353 11.288L125.425 23H121.777ZM144.253 23V6.2H156.061V9.656H148.237V12.776H154.801V15.968H148.237V19.508H156.157V23H144.253ZM159.488 23V6.2H166.304C167.552 6.2 168.64 6.404 169.568 6.812C170.504 7.212 171.224 7.796 171.728 8.564C172.24 9.332 172.496 10.252 172.496 11.324C172.496 12.148 172.34 12.876 172.028 13.508C171.716 14.132 171.288 14.652 170.744 15.068C170.2 15.484 169.584 15.796 168.896 16.004L173.42 23H168.692L164.948 16.82H163.472V23H159.488ZM163.472 13.628H165.824C166.656 13.628 167.304 13.464 167.768 13.136C168.24 12.808 168.476 12.288 168.476 11.576C168.476 10.856 168.252 10.328 167.804 9.992C167.364 9.648 166.732 9.476 165.908 9.476H163.472V13.628ZM184.154 23.36C182.858 23.36 181.638 23.16 180.494 22.76C179.35 22.36 178.342 21.784 177.47 21.032C176.606 20.272 175.926 19.352 175.43 18.272C174.934 17.192 174.686 15.972 174.686 14.612C174.686 13.26 174.922 12.048 175.394 10.976C175.874 9.896 176.538 8.972 177.386 8.204C178.234 7.436 179.218 6.852 180.338 6.452C181.458 6.044 182.662 5.84 183.95 5.84C184.542 5.84 185.162 5.888 185.81 5.984C186.458 6.072 187.118 6.232 187.79 6.464C188.462 6.696 189.122 7.024 189.77 7.448L188.114 10.532C187.538 10.156 186.926 9.88 186.278 9.704C185.63 9.52 184.942 9.428 184.214 9.428C183.374 9.428 182.618 9.548 181.946 9.788C181.274 10.028 180.702 10.376 180.23 10.832C179.766 11.28 179.41 11.824 179.162 12.464C178.914 13.104 178.79 13.828 178.79 14.636C178.79 15.796 179.038 16.768 179.534 17.552C180.03 18.328 180.702 18.916 181.55 19.316C182.398 19.708 183.346 19.904 184.394 19.904C184.81 19.904 185.206 19.868 185.582 19.796C185.958 19.724 186.29 19.64 186.578 19.544V16.568H183.146V13.4H190.07V21.968C189.566 22.256 188.966 22.504 188.27 22.712C187.582 22.92 186.874 23.08 186.146 23.192C185.426 23.304 184.762 23.36 184.154 23.36ZM193.8 23V6.2H205.608V9.656H197.784V12.776H204.348V15.968H197.784V19.508H205.704V23H193.8Z" fill="white"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/header-logo-text.svg">
<svg width="165" height="19" viewBox="0 0 165 19" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M9.756 18.36C8.02 18.36 6.488 18.004 5.16 17.292C3.832 16.58 2.796 15.572 2.052 14.268C1.308 12.964 0.936 11.424 0.936 9.648C0.936 8.352 1.152 7.168 1.584 6.096C2.024 5.016 2.64 4.084 3.432 3.3C4.232 2.516 5.172 1.912 6.252 1.488C7.34 1.056 8.528 0.839999 9.816 0.839999C11.216 0.839999 12.392 1.016 13.344 1.368C14.296 1.72 15.156 2.22 15.924 2.868L13.932 6.144C13.468 5.664 12.908 5.308 12.252 5.076C11.596 4.836 10.872 4.716 10.08 4.716C9.296 4.716 8.596 4.832 7.98 5.064C7.372 5.288 6.852 5.612 6.42 6.036C5.996 6.46 5.672 6.972 5.448 7.572C5.224 8.172 5.112 8.844 5.112 9.588C5.112 10.612 5.312 11.488 5.712 12.216C6.12 12.944 6.7 13.504 7.452 13.896C8.204 14.28 9.104 14.472 10.152 14.472C10.904 14.472 11.648 14.36 12.384 14.136C13.128 13.904 13.832 13.532 14.496 13.02L16.32 16.368C15.544 16.968 14.616 17.452 13.536 17.82C12.456 18.18 11.196 18.36 9.756 18.36ZM18.7378 18V1.2H25.5538C26.8018 1.2 27.8898 1.404 28.8178 1.812C29.7538 2.212 30.4738 2.796 30.9778 3.564C31.4898 4.332 31.7458 5.252 31.7458 6.324C31.7458 7.148 31.5898 7.876 31.2778 8.508C30.9658 9.132 30.5378 9.652 29.9938 10.068C29.4498 10.484 28.8338 10.796 28.1458 11.004L32.6698 18H27.9418L24.1978 11.82H22.7218V18H18.7378ZM22.7218 8.628H25.0738C25.9058 8.628 26.5538 8.464 27.0178 8.136C27.4898 7.808 27.7258 7.288 27.7258 6.576C27.7258 5.856 27.5018 5.328 27.0538 4.992C26.6138 4.648 25.9818 4.476 25.1578 4.476H22.7218V8.628ZM33.3184 18L39.5944 1.2H44.2144L50.5504 18H46.0624L44.8744 14.592H38.8504L37.6864 18H33.3184ZM39.7504 11.268H43.9504L41.8384 5.46L39.7504 11.268ZM52.605 18V1.2H63.669V4.836H56.589V8.304H62.925V11.796H56.589V18H52.605ZM69.8539 18V4.836H65.3779V1.2H78.3379V4.836H73.8619V18H69.8539ZM80.7769 18V1.2H84.6049L90.9889 11.796L89.4049 11.808L95.4769 1.2H99.2929V18H95.4289L95.5009 6.288L96.2089 6.54L91.3609 14.832H88.7089L83.6689 6.54L84.3529 6.288L84.4249 18H80.7769ZM103.253 18V1.2H115.061V4.656H107.237V7.776H113.801V10.968H107.237V14.508H115.157V18H103.253ZM118.488 18V1.2H125.304C126.552 1.2 127.64 1.404 128.568 1.812C129.504 2.212 130.224 2.796 130.728 3.564C131.24 4.332 131.496 5.252 131.496 6.324C131.496 7.148 131.34 7.876 131.028 8.508C130.716 9.132 130.288 9.652 129.744 10.068C129.2 10.484 128.584 10.796 127.896 11.004L132.42 18H127.692L123.948 11.82H122.472V18H118.488ZM122.472 8.628H124.824C125.656 8.628 126.304 8.464 126.768 8.136C127.24 7.808 127.476 7.288 127.476 6.576C127.476 5.856 127.252 5.328 126.804 4.992C126.364 4.648 125.732 4.476 124.908 4.476H122.472V8.628ZM143.154 18.36C141.858 18.36 140.638 18.16 139.494 17.76C138.35 17.36 137.342 16.784 136.47 16.032C135.606 15.272 134.926 14.352 134.43 13.272C133.934 12.192 133.686 10.972 133.686 9.612C133.686 8.26 133.922 7.048 134.394 5.976C134.874 4.896 135.538 3.972 136.386 3.204C137.234 2.436 138.218 1.852 139.338 1.452C140.458 1.044 141.662 0.839999 142.95 0.839999C143.542 0.839999 144.162 0.887999 144.81 0.983999C145.458 1.072 146.118 1.232 146.79 1.464C147.462 1.696 148.122 2.024 148.77 2.448L147.114 5.532C146.538 5.156 145.926 4.88 145.278 4.704C144.63 4.52 143.942 4.428 143.214 4.428C142.374 4.428 141.618 4.548 140.946 4.788C140.274 5.028 139.702 5.376 139.23 5.832C138.766 6.28 138.41 6.824 138.162 7.464C137.914 8.104 137.79 8.828 137.79 9.636C137.79 10.796 138.038 11.768 138.534 12.552C139.03 13.328 139.702 13.916 140.55 14.316C141.398 14.708 142.346 14.904 143.394 14.904C143.81 14.904 144.206 14.868 144.582 14.796C144.958 14.724 145.29 14.64 145.578 14.544V11.568H142.146V8.4H149.07V16.968C148.566 17.256 147.966 17.504 147.27 17.712C146.582 17.92 145.874 18.08 145.146 18.192C144.426 18.304 143.762 18.36 143.154 18.36ZM152.8 18V1.2H164.608V4.656H156.784V7.776H163.348V10.968H156.784V14.508H164.704V18H152.8Z" fill="#231C09"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/header-logo.svg">
<svg width="31" height="30" viewBox="0 0 31 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M30.5022 0.861606C30.6133 0.965485 30.6628 1.11372 30.6347 1.25826L29.7323 5.9012C29.7304 5.91076 29.7282 5.92027 29.7257 5.9297C29.4727 6.8765 28.6991 8.00554 27.5333 8.58077C26.9402 8.87342 26.245 9.02209 25.4783 8.9238C24.8218 8.83963 24.137 8.57758 23.4367 8.10445L22.6063 8.88124C22.4194 9.05607 22.1164 9.05607 21.9295 8.88124C21.7426 8.7064 21.7426 8.42294 21.9295 8.24811L22.7571 7.47388C22.2102 6.78346 21.9011 6.11719 21.7935 5.48487C21.6686 4.75012 21.821 4.08985 22.143 3.53221C22.7749 2.43778 24.0426 1.75928 25.1163 1.58167L30.0782 0.737702C30.2327 0.711422 30.3912 0.757727 30.5022 0.861606ZM24.1238 7.46167C24.6695 7.80819 25.1671 7.98015 25.6083 8.03671C26.1585 8.10725 26.6533 8.00268 27.0867 7.78882C27.9685 7.35371 28.5914 6.46497 28.7935 5.72609L29.4189 2.50814L26.1304 5.58447H27.2311C27.4954 5.58447 27.7096 5.78491 27.7096 6.03216C27.7096 6.27941 27.4954 6.47985 27.2311 6.47985L25.1733 6.47985L24.1238 7.46167ZM25.4537 4.95134L28.7421 1.87501L25.2839 2.46323C24.4402 2.6025 23.4527 3.14794 22.9851 3.95775C22.7572 4.35244 22.6487 4.81466 22.7388 5.34418C22.8127 5.77883 23.0238 6.27738 23.4425 6.83271L24.4965 5.84672V3.92173C24.4965 3.67448 24.7108 3.47404 24.9751 3.47404C25.2394 3.47404 25.4537 3.67448 25.4537 3.92173V4.95134Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M0.536961 28.967C0.648004 29.0709 0.80646 29.1172 0.960966 29.0909L5.92411 28.2468C5.93433 28.245 5.94449 28.243 5.95457 28.2406C6.96667 28.0039 8.17357 27.2802 8.78848 26.1896C9.1013 25.6348 9.26023 24.9845 9.15516 24.2673C9.06518 23.6531 8.78506 23.0124 8.2793 22.3573L9.10966 21.5805C9.29655 21.4057 9.29655 21.1222 9.10966 20.9474C8.92277 20.7726 8.61976 20.7726 8.43287 20.9474L7.60525 21.7216C6.86721 21.2099 6.15499 20.9208 5.47907 20.8202C4.69364 20.7033 3.98784 20.8458 3.39174 21.1471C2.22183 21.7382 1.49654 22.9242 1.30669 23.9285L0.404513 28.5704C0.376421 28.7149 0.425919 28.8631 0.536961 28.967ZM7.59219 23.0001C7.96261 23.5106 8.14643 23.9761 8.20689 24.3888C8.2823 24.9036 8.17051 25.3665 7.9419 25.7719C7.47679 26.5968 6.52676 27.1795 5.73692 27.3685L2.29705 27.9536L5.58553 24.8773V25.9069C5.58553 26.1542 5.79979 26.3546 6.0641 26.3546C6.3284 26.3546 6.54266 26.1542 6.54266 25.9069L6.54266 23.9819L7.59219 23.0001ZM4.90874 24.2442L1.62026 27.3205L2.24904 24.0853C2.39792 23.2961 2.98098 22.3723 3.84663 21.9349C4.26854 21.7217 4.76263 21.6202 5.32868 21.7044C5.7933 21.7736 6.32623 21.9711 6.91985 22.3628L5.86587 23.3488H3.80812C3.54382 23.3488 3.32956 23.5492 3.32956 23.7965C3.32956 24.0437 3.54382 24.2442 3.80812 24.2442H4.90874Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M30.463 28.967C30.352 29.0709 30.1935 29.1172 30.039 29.0909L25.0759 28.2468C25.0657 28.245 25.0555 28.243 25.0454 28.2406C24.0333 28.0039 22.8264 27.2802 22.2115 26.1896C21.8987 25.6348 21.7398 24.9845 21.8448 24.2673C21.9348 23.6531 22.2149 23.0124 22.7207 22.3573L21.8903 21.5805C21.7035 21.4057 21.7035 21.1222 21.8903 20.9474C22.0772 20.7726 22.3802 20.7726 22.5671 20.9474L23.3948 21.7216C24.1328 21.2099 24.845 20.9208 25.5209 20.8202C26.3064 20.7033 27.0122 20.8458 27.6083 21.1471C28.7782 21.7382 29.5035 22.9242 29.6933 23.9285L30.5955 28.5704C30.6236 28.7149 30.5741 28.8631 30.463 28.967ZM23.4078 23.0001C23.0374 23.5106 22.8536 23.9761 22.7931 24.3888C22.7177 24.9035 22.8295 25.3665 23.0581 25.7719C23.5232 26.5968 24.4732 27.1795 25.2631 27.3685L28.703 27.9536L25.4145 24.8773V25.9069C25.4145 26.1542 25.2002 26.3546 24.9359 26.3546C24.6716 26.3546 24.4573 26.1542 24.4573 25.9069V23.9819L23.4078 23.0001ZM26.0913 24.2442L29.3797 27.3205L28.751 24.0853C28.6021 23.2961 28.019 22.3723 27.1534 21.9349C26.7315 21.7217 26.2374 21.6202 25.6713 21.7044C25.2067 21.7736 24.6738 21.9711 24.0801 22.3628L25.1341 23.3488H27.1919C27.4562 23.3488 27.6704 23.5492 27.6704 23.7965C27.6704 24.0437 27.4562 24.2442 27.1919 24.2442H26.0913Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M0.458587 0.898257C0.347544 1.00214 0.298046 1.15037 0.326138 1.29491L1.22853 5.93785C1.23039 5.94741 1.23258 5.95692 1.2351 5.96635C1.48812 6.91315 2.26175 8.04219 3.42752 8.61743C4.02058 8.91007 4.71577 9.05874 5.48248 8.96045C6.13903 8.87628 6.82386 8.61423 7.52413 8.1411L8.35449 8.91789C8.54138 9.09272 8.84439 9.09272 9.03129 8.91789C9.21818 8.74306 9.21818 8.45959 9.03129 8.28476L8.20367 7.51054C8.75065 6.82011 9.05973 6.15384 9.16727 5.52152C9.29223 4.78677 9.13985 4.1265 8.81785 3.56886C8.18591 2.47443 6.91819 1.79593 5.84454 1.61832L0.882591 0.774353C0.728086 0.748074 0.56963 0.794378 0.458587 0.898257ZM6.83702 7.49832C6.29134 7.84484 5.79372 8.0168 5.35252 8.07336C4.8023 8.1439 4.30747 8.03933 3.87406 7.82547C2.99229 7.39036 2.36944 6.50163 2.16731 5.76274L1.54188 2.54479L4.83036 5.62112H3.72975C3.46544 5.62112 3.25118 5.82156 3.25118 6.06881C3.25118 6.31606 3.46544 6.5165 3.72975 6.5165L5.78749 6.5165L6.83702 7.49832ZM5.50716 4.98799L2.21867 1.91166L5.67696 2.49988C6.52062 2.63915 7.50813 3.1846 7.97573 3.9944C8.20363 4.38909 8.31209 4.85131 8.22203 5.38084C8.14811 5.81548 7.93702 6.31404 7.51827 6.86936L6.46428 5.88337V3.95838C6.46428 3.71113 6.25002 3.51069 5.98572 3.51069C5.72142 3.51069 5.50716 3.71113 5.50716 3.95838V4.98799Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M16.2896 14.1574C15.8535 13.7494 15.1465 13.7494 14.7104 14.1574C14.2743 14.5653 14.2743 15.2267 14.7104 15.6347C15.1465 16.0426 15.8535 16.0426 16.2896 15.6347C16.7257 15.2267 16.7257 14.5653 16.2896 14.1574ZM14.0336 13.5242C14.8435 12.7666 16.1565 12.7666 16.9664 13.5242C17.7762 14.2819 17.7762 15.5102 16.9664 16.2678C16.1565 17.0254 14.8435 17.0254 14.0336 16.2678C13.2238 15.5102 13.2238 14.2819 14.0336 13.5242Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M18.32 12.258C18.5069 12.4328 18.5069 12.7163 18.32 12.8911L16.9664 14.1574C16.7795 14.3322 16.4765 14.3322 16.2896 14.1574C16.1027 13.9825 16.1027 13.6991 16.2896 13.5243L17.6432 12.258C17.8301 12.0832 18.1331 12.0832 18.32 12.258Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M14.7104 15.6347C14.8973 15.8095 14.8973 16.093 14.7104 16.2678L13.3568 17.5341C13.1699 17.7089 12.8669 17.7089 12.68 17.5341C12.4931 17.3593 12.4931 17.0758 12.68 16.901L14.0336 15.6347C14.2205 15.4599 14.5235 15.4598 14.7104 15.6347Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M16.2896 15.6347C16.4765 15.4598 16.7795 15.4599 16.9664 15.6347L18.32 16.901C18.5069 17.0758 18.5069 17.3593 18.32 17.5341C18.1331 17.7089 17.8301 17.7089 17.6432 17.5341L16.2896 16.2678C16.1027 16.093 16.1027 15.8095 16.2896 15.6347Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M12.68 12.258C12.8669 12.0832 13.1699 12.0832 13.3568 12.258L14.7104 13.5243C14.8973 13.6991 14.8973 13.9825 14.7104 14.1574C14.5235 14.3322 14.2205 14.3322 14.0336 14.1574L12.68 12.8911C12.4931 12.7163 12.4931 12.4328 12.68 12.258Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M18.1074 16.0798C17.5687 15.966 17.1831 16.0651 16.9664 16.2678C16.7497 16.4705 16.6437 16.8313 16.7654 17.3352C16.8854 17.8326 17.2181 18.4027 17.756 18.9059C18.2939 19.409 18.9032 19.7202 19.4349 19.8325C19.9736 19.9463 20.3592 19.8472 20.5759 19.6445C20.7927 19.4418 20.8986 19.081 20.7769 18.5771C20.6569 18.0797 20.3242 17.5097 19.7863 17.0065C19.2485 16.5033 18.6391 16.1921 18.1074 16.0798ZM18.3182 15.2064C19.0522 15.3614 19.8174 15.7692 20.4631 16.3733C21.1089 16.9774 21.5448 17.6933 21.7106 18.3799C21.8747 19.0598 21.7836 19.781 21.2527 20.2776C20.7219 20.7742 19.9509 20.8595 19.2241 20.7059C18.4902 20.5509 17.7249 20.1431 17.0792 19.539C16.4334 18.9349 15.9975 18.219 15.8318 17.5325C15.6676 16.8525 15.7587 16.1313 16.2896 15.6347C16.8204 15.1381 17.5914 15.0529 18.3182 15.2064Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M14.2346 17.3352C14.3562 16.8312 14.2503 16.4705 14.0336 16.2678C13.8169 16.0651 13.4313 15.9659 12.8926 16.0797C12.3609 16.1921 11.7515 16.5032 11.2136 17.0064C10.6758 17.5096 10.3431 18.0797 10.2231 18.577C10.1014 19.081 10.2073 19.4417 10.4241 19.6445C10.6408 19.8472 11.0264 19.9463 11.5651 19.8325C12.0968 19.7202 12.7061 19.409 13.244 18.9058C13.7819 18.4026 14.1145 17.8326 14.2346 17.3352ZM15.1682 17.5324C15.0025 18.219 14.5666 18.9348 13.9208 19.5389C13.2751 20.143 12.5098 20.5508 11.7759 20.7059C11.0491 20.8594 10.2781 20.7742 9.74726 20.2776C9.21642 19.781 9.12531 19.0598 9.28944 18.3798C9.45516 17.6932 9.89109 16.9774 10.5368 16.3733C11.1826 15.7692 11.9478 15.3614 12.6817 15.2064C13.4086 15.0528 14.1796 15.1381 14.7104 15.6347C15.2413 16.1313 15.3324 16.8525 15.1682 17.5324Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M20.7769 11.215C20.8986 10.711 20.7927 10.3503 20.5759 10.1475C20.3592 9.94478 19.9736 9.8457 19.4349 9.9595C18.9032 10.0718 18.2939 10.383 17.756 10.8862C17.2181 11.3894 16.8854 11.9594 16.7654 12.4568C16.6437 12.9607 16.7497 13.3215 16.9664 13.5242C17.1831 13.727 17.5687 13.826 18.1074 13.7122C18.6391 13.5999 19.2485 13.2887 19.7863 12.7856C20.3242 12.2824 20.6569 11.7123 20.7769 11.215ZM21.7105 11.4122C21.5448 12.0987 21.1089 12.8146 20.4631 13.4187C19.8174 14.0228 19.0521 14.4306 18.3182 14.5856C17.5914 14.7392 16.8204 14.654 16.2896 14.1574C15.7587 13.6608 15.6676 12.9395 15.8318 12.2596C15.9975 11.573 16.4334 10.8571 17.0792 10.253C17.7249 9.64895 18.4902 9.24114 19.2241 9.08611C19.9509 8.93257 20.7219 9.0178 21.2527 9.51439C21.7836 10.011 21.8747 10.7322 21.7105 11.4122Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M11.5651 9.95955C11.0264 9.84575 10.6408 9.94483 10.4241 10.1476C10.2073 10.3503 10.1014 10.711 10.2231 11.215C10.3431 11.7124 10.6758 12.2824 11.2137 12.7856C11.7515 13.2888 12.3609 13.6 12.8926 13.7123C13.4313 13.8261 13.8169 13.727 14.0336 13.5242C14.2503 13.3215 14.3563 12.9608 14.2346 12.4568C14.1146 11.9595 13.7819 11.3894 13.244 10.8862C12.7061 10.383 12.0968 10.0719 11.5651 9.95955ZM11.7759 9.08615C12.5098 9.24119 13.2751 9.649 13.9208 10.2531C14.5666 10.8572 15.0025 11.573 15.1682 12.2596C15.3324 12.9396 15.2413 13.6608 14.7104 14.1574C14.1796 14.654 13.4086 14.7392 12.6818 14.5857C11.9479 14.4306 11.1826 14.0228 10.5369 13.4187C9.89111 12.8146 9.45517 12.0988 9.28945 11.4122C9.12532 10.7323 9.21643 10.011 9.74727 9.51444C10.2781 9.01785 11.0491 8.93261 11.7759 9.08615Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M15.9744 1.84724C15.7688 1.46274 15.5735 1.39538 15.5 1.39538C15.4265 1.39538 15.2312 1.46274 15.0257 1.84724C14.8345 2.20495 14.7024 2.73046 14.7024 3.33537C14.7024 3.94028 14.8345 4.46578 15.0257 4.8235C15.2312 5.20799 15.4265 5.27536 15.5 5.27536C15.5735 5.27536 15.7688 5.20799 15.9744 4.8235C16.1655 4.46578 16.2976 3.94028 16.2976 3.33537C16.2976 2.73046 16.1655 2.20495 15.9744 1.84724ZM16.8304 1.44681C17.1011 1.95327 17.2547 2.6216 17.2547 3.33537C17.2547 4.04914 17.1011 4.71747 16.8304 5.22392C16.5741 5.7036 16.1313 6.17074 15.5 6.17074C14.8687 6.17074 14.426 5.7036 14.1696 5.22392C13.8989 4.71747 13.7453 4.04914 13.7453 3.33537C13.7453 2.6216 13.8989 1.95327 14.1696 1.44681C14.426 0.967135 14.8687 0.5 15.5 0.5C16.1313 0.5 16.5741 0.967135 16.8304 1.44681Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M16.5793 9.75321C16.579 9.1985 16.098 8.74852 15.5051 8.74829C14.9124 8.74806 14.4323 9.1972 14.4326 9.75161L14.4331 10.9131C14.4332 11.1603 14.219 11.3608 13.9547 11.3609C13.6904 11.361 13.4761 11.1607 13.476 10.9134L13.4754 9.75199C13.475 8.70278 14.3839 7.85247 15.5055 7.85291C16.6267 7.85335 17.5359 8.70391 17.5364 9.75283L17.5369 10.8917C17.537 11.1389 17.3229 11.3394 17.0586 11.3395C16.7943 11.3396 16.5799 11.1393 16.5798 10.892L16.5793 9.75321Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M1.44015 15.4437C1.02914 15.2515 0.957128 15.0687 0.957128 15C0.957128 14.9312 1.02914 14.7485 1.44015 14.5562C1.82253 14.3774 2.38428 14.2538 3.03091 14.2538C3.67753 14.2538 4.23928 14.3774 4.62166 14.5562C5.03267 14.7485 5.10468 14.9312 5.10468 15C5.10468 15.0687 5.03267 15.2515 4.62166 15.4437C4.23928 15.6226 3.67753 15.7461 3.03091 15.7461C2.38428 15.7461 1.82253 15.6226 1.44015 15.4437ZM1.01211 16.2446C1.55349 16.4978 2.26791 16.6415 3.03091 16.6415C3.7939 16.6415 4.50832 16.4978 5.04971 16.2446C5.56246 16.0047 6.06181 15.5906 6.06181 15C6.06181 14.4094 5.56246 13.9952 5.04971 13.7554C4.50832 13.5022 3.7939 13.3585 3.03091 13.3585C2.26791 13.3585 1.55349 13.5022 1.01211 13.7554C0.499351 13.9952 0 14.4094 0 15C0 15.5906 0.499351 16.0047 1.01211 16.2446Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M9.89135 16.0096C9.29838 16.0094 8.81738 15.5594 8.81713 15.0047C8.81688 14.4503 9.29699 14.0012 9.88964 14.0014L11.1312 14.0019C11.3955 14.002 11.6098 13.8016 11.6099 13.5544C11.6101 13.3071 11.3959 13.1066 11.1316 13.1065L9.89004 13.106C8.76847 13.1056 7.85953 13.9559 7.86 15.0051C7.86047 16.054 8.76969 16.9046 9.89094 16.905L11.1083 16.9055C11.3726 16.9056 11.587 16.7052 11.5871 16.458C11.5872 16.2107 11.373 16.0102 11.1087 16.0101L9.89135 16.0096Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M29.5599 14.5563C29.9709 14.7485 30.0429 14.9313 30.0429 15C30.0429 15.0688 29.9709 15.2515 29.5599 15.4438C29.1775 15.6226 28.6157 15.7462 27.9691 15.7462C27.3225 15.7462 26.7607 15.6226 26.3783 15.4438C25.9673 15.2515 25.8953 15.0688 25.8953 15C25.8953 14.9313 25.9673 14.7485 26.3783 14.5563C26.7607 14.3774 27.3225 14.2539 27.9691 14.2539C28.6157 14.2539 29.1775 14.3774 29.5599 14.5563ZM29.9879 13.7554C29.4465 13.5022 28.7321 13.3585 27.9691 13.3585C27.2061 13.3585 26.4917 13.5022 25.9503 13.7554C25.4375 13.9953 24.9382 14.4094 24.9382 15C24.9382 15.5906 25.4375 16.0048 25.9503 16.2446C26.4917 16.4978 27.2061 16.6415 27.9691 16.6415C28.7321 16.6415 29.4465 16.4978 29.9879 16.2446C30.5007 16.0048 31 15.5906 31 15C31 14.4094 30.5007 13.9953 29.9879 13.7554Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M21.1087 13.9904C21.7016 13.9906 22.1826 14.4406 22.1829 14.9953C22.1831 15.5497 21.703 15.9988 21.1104 15.9986L19.8688 15.9981C19.6045 15.998 19.3902 16.1984 19.3901 16.4456C19.3899 16.6929 19.6041 16.8934 19.8684 16.8935L21.11 16.894C22.2315 16.8944 23.1405 16.0441 23.14 14.9949C23.1395 13.946 22.2303 13.0954 21.1091 13.095L19.8917 13.0945C19.6274 13.0944 19.413 13.2948 19.4129 13.542C19.4128 13.7893 19.627 13.9898 19.8913 13.9899L21.1087 13.9904Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M15.0257 28.1528C15.2312 28.5373 15.4265 28.6046 15.5 28.6046C15.5735 28.6046 15.7688 28.5373 15.9743 28.1528C16.1655 27.795 16.2976 27.2695 16.2976 26.6646C16.2976 26.0597 16.1655 25.5342 15.9743 25.1765C15.7688 24.792 15.5735 24.7246 15.5 24.7246C15.4265 24.7246 15.2312 24.792 15.0257 25.1765C14.8345 25.5342 14.7024 26.0597 14.7024 26.6646C14.7024 27.2695 14.8345 27.795 15.0257 28.1528ZM14.1696 28.5532C13.8989 28.0467 13.7453 27.3784 13.7453 26.6646C13.7453 25.9509 13.8989 25.2825 14.1696 24.7761C14.4259 24.2964 14.8687 23.8293 15.5 23.8293C16.1313 23.8293 16.574 24.2964 16.8304 24.7761C17.1011 25.2825 17.2547 25.9509 17.2547 26.6646C17.2547 27.3784 17.1011 28.0467 16.8304 28.5532C16.574 29.0329 16.1313 29.5 15.5 29.5C14.8687 29.5 14.4259 29.0329 14.1696 28.5532Z" fill="#231C09"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M14.4207 20.2468C14.421 20.8015 14.902 21.2515 15.4949 21.2517C16.0876 21.2519 16.5677 20.8028 16.5674 20.2484L16.5669 19.0869C16.5668 18.8397 16.781 18.6392 17.0453 18.6391C17.3096 18.639 17.5239 18.8393 17.524 19.0866L17.5246 20.248C17.525 21.2972 16.6161 22.1475 15.4945 22.1471C14.3733 22.1466 13.4641 21.2961 13.4636 20.2472L13.4631 19.1083C13.463 18.8611 13.6771 18.6606 13.9414 18.6605C14.2057 18.6604 14.4201 18.8607 14.4202 19.108L14.4207 20.2468Z" fill="#231C09"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/img-fallback.svg">
<svg width="50" height="47" viewBox="0 0 50 47" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M49.1971 0.586051C49.3762 0.754406 49.4561 0.994646 49.4108 1.2289L47.9553 8.75367C47.9523 8.76917 47.9488 8.78457 47.9447 8.79985C47.5366 10.3343 46.2888 12.1641 44.4085 13.0964C43.452 13.5707 42.3307 13.8117 41.0941 13.6524C40.0351 13.5159 38.9306 13.0913 37.8011 12.3244L36.4618 13.5834C36.1604 13.8667 35.6716 13.8667 35.3702 13.5834C35.0688 13.3 35.0688 12.8406 35.3702 12.5573L36.7051 11.3025C35.8228 10.1835 35.3243 9.10372 35.1509 8.07893C34.9493 6.88812 35.1951 5.81804 35.7144 4.91427C36.7337 3.14054 38.7784 2.0409 40.5101 1.75305L48.5133 0.385241C48.7625 0.34265 49.018 0.417695 49.1971 0.586051ZM38.9093 11.2827C39.7895 11.8443 40.5921 12.123 41.3037 12.2147C42.1911 12.329 42.9893 12.1595 43.6883 11.8129C45.1105 11.1077 46.1151 9.66737 46.4411 8.46987L47.4499 3.25457L42.1459 8.24035H43.9211C44.3474 8.24035 44.6929 8.56519 44.6929 8.96591C44.6929 9.36663 44.3474 9.69148 43.9211 9.69148L40.6021 9.69148L38.9093 11.2827ZM41.0543 7.21424L46.3583 2.22847L40.7804 3.18178C39.4197 3.4075 37.8269 4.2915 37.0727 5.60394C36.7051 6.24361 36.5302 6.99272 36.6754 7.85092C36.7947 8.55534 37.1351 9.36335 37.8105 10.2634L39.5105 8.66537V5.54556C39.5105 5.14484 39.8561 4.81999 40.2824 4.81999C40.7087 4.81999 41.0543 5.14484 41.0543 5.54556V7.21424Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M0.866067 46.1362C1.04517 46.3046 1.30074 46.3796 1.54994 46.337L9.55501 44.9689C9.5715 44.9661 9.58788 44.9627 9.60414 44.9589C11.2366 44.5753 13.1832 43.4024 14.175 41.6349C14.6795 40.7358 14.9359 39.6818 14.7664 38.5193C14.6213 37.5239 14.1695 36.4856 13.3537 35.4239L14.693 34.165C14.9944 33.8816 14.9944 33.4222 14.693 33.1389C14.3916 32.8555 13.9028 32.8555 13.6014 33.1389L12.2665 34.3937C11.0761 33.5644 9.9274 33.0958 8.8372 32.9327C7.57039 32.7433 6.432 32.9743 5.47055 33.4625C3.5836 34.4206 2.41378 36.3426 2.10756 37.9704L0.65244 45.4934C0.60713 45.7276 0.686965 45.9679 0.866067 46.1362ZM12.2455 36.4657C12.8429 37.293 13.1394 38.0475 13.2369 38.7164C13.3585 39.5506 13.1782 40.3008 12.8095 40.9579C12.0593 42.2948 10.527 43.2391 9.2531 43.5456L3.70492 44.4938L9.00892 39.508V41.1767C9.00892 41.5774 9.35451 41.9023 9.7808 41.9023C10.2071 41.9023 10.5527 41.5774 10.5527 41.1767L10.5527 38.0569L12.2455 36.4657ZM7.91732 38.4819L2.61332 43.4677L3.62748 38.2245C3.86761 36.9454 4.80803 35.4482 6.20424 34.7392C6.88474 34.3937 7.68166 34.2293 8.59464 34.3658C9.34403 34.4779 10.2036 34.7979 11.1611 35.4328L9.46108 37.0308H6.14213C5.71584 37.0308 5.37026 37.3556 5.37026 37.7564C5.37026 38.1571 5.71584 38.4819 6.14213 38.4819H7.91732Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M49.1339 46.1362C48.9548 46.3046 48.6993 46.3796 48.4501 46.337L40.445 44.9689C40.4285 44.9661 40.4121 44.9627 40.3959 44.9589C38.7634 44.5753 36.8168 43.4024 35.825 41.6349C35.3205 40.7358 35.0641 39.6818 35.2336 38.5193C35.3787 37.5239 35.8305 36.4856 36.6463 35.4239L35.307 34.165C35.0056 33.8816 35.0056 33.4222 35.307 33.1389C35.6084 32.8555 36.0972 32.8555 36.3986 33.1389L37.7335 34.3937C38.9239 33.5644 40.0726 33.0958 41.1628 32.9327C42.4296 32.7433 43.568 32.9743 44.5294 33.4625C46.4164 34.4206 47.5862 36.3426 47.8924 37.9704L49.3476 45.4934C49.3929 45.7276 49.313 45.9679 49.1339 46.1362ZM37.7545 36.4657C37.1571 37.293 36.8606 38.0475 36.7631 38.7164C36.6415 39.5506 36.8218 40.3008 37.1905 40.9579C37.9407 42.2948 39.473 43.2391 40.7469 43.5456L46.2951 44.4938L40.9911 39.508V41.1767C40.9911 41.5774 40.6455 41.9023 40.2192 41.9023C39.7929 41.9023 39.4473 41.5774 39.4473 41.1767V38.0569L37.7545 36.4657ZM42.0827 38.4819L47.3867 43.4677L46.3725 38.2245C46.1324 36.9454 45.192 35.4482 43.7958 34.7392C43.1153 34.3937 42.3183 34.2293 41.4054 34.3658C40.656 34.4779 39.7964 34.7979 38.8389 35.4328L40.5389 37.0308H43.8579C44.2842 37.0308 44.6297 37.3556 44.6297 37.7564C44.6297 38.1571 44.2842 38.4819 43.8579 38.4819H42.0827Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M0.739656 0.645452C0.560555 0.813807 0.480719 1.05405 0.526029 1.2883L1.9815 8.81307C1.98449 8.82857 1.98803 8.84397 1.99209 8.85925C2.4002 10.3937 3.64799 12.2235 5.52825 13.1558C6.4848 13.6301 7.60609 13.8711 8.8427 13.7118C9.90166 13.5753 11.0062 13.1507 12.1357 12.3838L13.475 13.6428C13.7764 13.9261 14.2652 13.9261 14.5666 13.6428C14.868 13.3594 14.868 12.9 14.5666 12.6167L13.2317 11.3619C14.114 10.2429 14.6125 9.16312 14.7859 8.13833C14.9875 6.94752 14.7417 5.87744 14.2223 4.97367C13.2031 3.19994 11.1584 2.1003 9.42668 1.81245L1.42353 0.444642C1.17433 0.402051 0.918757 0.477096 0.739656 0.645452ZM11.0275 11.3421C10.1473 11.9037 9.34471 12.1824 8.6331 12.2741C7.74564 12.3884 6.94753 12.2189 6.24849 11.8723C4.82627 11.1671 3.82167 9.72677 3.49567 8.52927L2.48691 3.31398L7.79091 8.29975H6.01572C5.58942 8.29975 5.24384 8.62459 5.24384 9.02531C5.24384 9.42603 5.58943 9.75088 6.01572 9.75088L9.33467 9.75088L11.0275 11.3421ZM8.88251 7.27364L3.57851 2.28787L9.15638 3.24118C10.5171 3.4669 12.1099 4.3509 12.8641 5.66334C13.2317 6.30301 13.4066 7.05212 13.2613 7.91032C13.1421 8.61474 12.8016 9.42275 12.1262 10.3228L10.4263 8.72477V5.60496C10.4263 5.20424 10.0807 4.8794 9.65439 4.8794C9.22809 4.8794 8.88251 5.20424 8.88251 5.60496V7.27364Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M26.2735 22.1344C25.5702 21.4732 24.4298 21.4732 23.7265 22.1344C23.0231 22.7955 23.0231 23.8675 23.7265 24.5286C24.4298 25.1898 25.5702 25.1898 26.2735 24.5286C26.9769 23.8675 26.9769 22.7955 26.2735 22.1344ZM22.6349 21.1083C23.9411 19.8804 26.0589 19.8804 27.3651 21.1083C28.6714 22.3361 28.6714 24.3269 27.3651 25.5547C26.0589 26.7826 23.9411 26.7826 22.6349 25.5547C21.3286 24.3269 21.3286 22.3361 22.6349 21.1083Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M29.5483 19.0561C29.8498 19.3394 29.8498 19.7988 29.5483 20.0822L27.3651 22.1344C27.0637 22.4177 26.575 22.4177 26.2735 22.1344C25.9721 21.851 25.9721 21.3916 26.2735 21.1083L28.4567 19.0561C28.7582 18.7727 29.2469 18.7727 29.5483 19.0561Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M23.7265 24.5286C24.0279 24.812 24.0279 25.2714 23.7265 25.5548L21.5433 27.607C21.2418 27.8903 20.7531 27.8903 20.4517 27.607C20.1502 27.3236 20.1502 26.8642 20.4517 26.5809L22.6349 24.5286C22.9363 24.2453 23.425 24.2453 23.7265 24.5286Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M26.2735 24.5286C26.575 24.2453 27.0637 24.2453 27.3651 24.5287L29.5483 26.5809C29.8498 26.8642 29.8498 27.3236 29.5483 27.607C29.2469 27.8903 28.7582 27.8903 28.4567 27.607L26.2735 25.5548C25.9721 25.2714 25.9721 24.812 26.2735 24.5286Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M20.4517 19.0561C20.7531 18.7727 21.2418 18.7727 21.5433 19.0561L23.7265 21.1083C24.0279 21.3917 24.0279 21.851 23.7265 22.1344C23.425 22.4177 22.9363 22.4178 22.6349 22.1344L20.4517 20.0822C20.1502 19.7988 20.1502 19.3394 20.4517 19.0561Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M29.2055 25.25C28.3366 25.0656 27.7147 25.2261 27.3651 25.5547C27.0156 25.8833 26.8447 26.4679 27.0409 27.2847C27.2346 28.0908 27.7711 29.0147 28.6387 29.8302C29.5062 30.6457 30.4891 31.15 31.3466 31.332C32.2155 31.5165 32.8374 31.3559 33.187 31.0273C33.5365 30.6987 33.7074 30.1141 33.5112 29.2973C33.3175 28.4912 32.781 27.5674 31.9135 26.7519C31.0459 25.9364 30.0631 25.432 29.2055 25.25ZM29.5456 23.8345C30.7293 24.0858 31.9635 24.7467 33.0051 25.7258C34.0466 26.7048 34.7497 27.865 35.017 28.9777C35.2817 30.0797 35.1348 31.2486 34.2786 32.0534C33.4224 32.8582 32.1789 32.9964 31.0066 32.7475C29.8228 32.4963 28.5886 31.8353 27.5471 30.8563C26.5055 29.8772 25.8024 28.717 25.5351 27.6043C25.2704 26.5023 25.4173 25.3334 26.2735 24.5286C27.1297 23.7238 28.3732 23.5857 29.5456 23.8345Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.959 27.2846C23.1552 26.4679 22.9844 25.8833 22.6349 25.5547C22.2853 25.2261 21.6634 25.0655 20.7945 25.2499C19.9369 25.4319 18.9541 25.9363 18.0865 26.7518C17.219 27.5673 16.6824 28.4912 16.4888 29.2972C16.2926 30.114 16.4634 30.6986 16.813 31.0272C17.1625 31.3558 17.7845 31.5164 18.6534 31.332C19.5109 31.1499 20.4938 30.6456 21.3613 29.8301C22.2289 29.0146 22.7654 28.0907 22.959 27.2846ZM24.4649 27.6043C24.1976 28.717 23.4945 29.8772 22.4529 30.8562C21.4114 31.8353 20.1771 32.4962 18.9934 32.7474C17.8211 32.9963 16.5776 32.8582 15.7214 32.0533C14.8652 31.2485 14.7182 30.0796 14.983 28.9776C15.2503 27.8649 15.9534 26.7047 16.9949 25.7257C18.0365 24.7466 19.2707 24.0857 20.4544 23.8344C21.6268 23.5856 22.8703 23.7238 23.7265 24.5286C24.5827 25.3334 24.7296 26.5023 24.4649 27.6043Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M33.5112 17.3656C33.7074 16.5488 33.5365 15.9642 33.187 15.6356C32.8374 15.3071 32.2155 15.1465 31.3466 15.3309C30.4891 15.5129 29.5062 16.0173 28.6387 16.8328C27.7711 17.6483 27.2346 18.5721 27.0409 19.3782C26.8447 20.195 27.0156 20.7797 27.3651 21.1083C27.7147 21.4368 28.3366 21.5974 29.2055 21.4129C30.063 21.2309 31.0459 20.7266 31.9135 19.9111C32.781 19.0956 33.3175 18.1717 33.5112 17.3656ZM35.017 17.6852C34.7497 18.7979 34.0466 19.9581 33.0051 20.9372C31.9635 21.9162 30.7293 22.5772 29.5455 22.8284C28.3732 23.0773 27.1297 22.9392 26.2735 22.1344C25.4173 21.3295 25.2704 20.1606 25.5351 19.0586C25.8024 17.9459 26.5055 16.7857 27.5471 15.8067C28.5886 14.8276 29.8228 14.1667 31.0066 13.9154C32.1789 13.6666 33.4224 13.8047 34.2786 14.6095C35.1348 15.4144 35.2817 16.5832 35.017 17.6852Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M18.6534 15.331C17.7845 15.1466 17.1626 15.3071 16.813 15.6357C16.4635 15.9643 16.2926 16.5489 16.4888 17.3657C16.6825 18.1718 17.219 19.0956 18.0865 19.9112C18.9541 20.7267 19.937 21.231 20.7945 21.413C21.6634 21.5974 22.2853 21.4368 22.6349 21.1083C22.9844 20.7797 23.1553 20.1951 22.9591 19.3783C22.7654 18.5722 22.2289 17.6483 21.3613 16.8328C20.4938 16.0173 19.5109 15.513 18.6534 15.331ZM18.9934 13.9155C20.1772 14.1667 21.4114 14.8277 22.4529 15.8067C23.4945 16.7858 24.1976 17.946 24.4649 19.0587C24.7296 20.1607 24.5827 21.3295 23.7265 22.1344C22.8703 22.9392 21.6268 23.0773 20.4545 22.8285C19.2707 22.5772 18.0365 21.9163 16.9949 20.9373C15.9534 19.9582 15.2503 18.798 14.983 17.6853C14.7183 16.5833 14.8652 15.4144 15.7214 14.6096C16.5776 13.8048 17.8211 13.6667 18.9934 13.9155Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M25.7651 2.18345C25.4336 1.56031 25.1185 1.45113 25 1.45113C24.8815 1.45113 24.5664 1.56031 24.2349 2.18345C23.9266 2.7632 23.7135 3.61488 23.7135 4.59525C23.7135 5.57562 23.9266 6.4273 24.2349 7.00705C24.5664 7.63019 24.8815 7.73937 25 7.73937C25.1185 7.73937 25.4336 7.63019 25.7651 7.00705C26.0735 6.4273 26.2865 5.57562 26.2865 4.59525C26.2865 3.61488 26.0735 2.7632 25.7651 2.18345ZM27.1459 1.53449C27.5825 2.35529 27.8302 3.43845 27.8302 4.59525C27.8302 5.75205 27.5825 6.83521 27.1459 7.65601C26.7323 8.43342 26.0183 9.1905 25 9.1905C23.9817 9.1905 23.2677 8.43342 22.8541 7.65601C22.4176 6.83521 22.1698 5.75205 22.1698 4.59525C22.1698 3.43845 22.4176 2.35529 22.8541 1.53449C23.2677 0.757081 23.9817 -4.18393e-08 25 0C26.0183 4.18393e-08 26.7323 0.757081 27.1459 1.53449Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M26.7408 14.9966C26.7404 14.0976 25.9646 13.3683 25.0082 13.3679C24.0523 13.3675 23.2779 14.0955 23.2783 14.994L23.2792 16.8763C23.2793 17.2771 22.9339 17.602 22.5076 17.6022C22.0813 17.6024 21.7356 17.2777 21.7354 16.8769L21.7346 14.9946C21.7338 13.2942 23.1998 11.9161 25.0088 11.9168C26.8173 11.9175 28.2838 13.296 28.2845 14.996L28.2854 16.8417C28.2855 17.2424 27.9401 17.5674 27.5138 17.5675C27.0875 17.5677 26.7418 17.243 26.7416 16.8423L26.7408 14.9966Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M2.32282 24.2191C1.6599 23.9076 1.54376 23.6114 1.54376 23.5C1.54376 23.3886 1.6599 23.0924 2.32282 22.7808C2.93957 22.4909 3.84562 22.2907 4.88856 22.2907C5.9315 22.2907 6.83755 22.4909 7.4543 22.7808C8.11722 23.0924 8.23336 23.3886 8.23336 23.5C8.23336 23.6114 8.11722 23.9076 7.4543 24.2191C6.83755 24.509 5.9315 24.7093 4.88856 24.7093C3.84562 24.7093 2.93957 24.509 2.32282 24.2191ZM1.63243 25.5171C2.50563 25.9275 3.65792 26.1604 4.88856 26.1604C6.1192 26.1604 7.27149 25.9275 8.14469 25.5171C8.97171 25.1284 9.77712 24.4571 9.77712 23.5C9.77712 22.5428 8.97171 21.8716 8.14469 21.4829C7.27149 21.0725 6.1192 20.8396 4.88856 20.8396C3.65792 20.8396 2.50563 21.0725 1.63243 21.4829C0.805405 21.8716 0 22.5428 0 23.5C0 24.4571 0.805405 25.1284 1.63243 25.5171Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M15.9538 25.1363C14.9974 25.1359 14.2216 24.4067 14.2212 23.5077C14.2208 22.6091 14.9952 21.8812 15.951 21.8816L17.9535 21.8824C18.3798 21.8825 18.7255 21.5578 18.7257 21.1571C18.7259 20.7564 18.3805 20.4314 17.9542 20.4312L15.9517 20.4305C14.1427 20.4297 12.6767 21.8078 12.6774 23.5083C12.6782 25.2082 14.1447 26.5867 15.9531 26.5874L17.9166 26.5882C18.3429 26.5884 18.6887 26.2637 18.6888 25.863C18.689 25.4622 18.3436 25.1373 17.9173 25.1371L15.9538 25.1363Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M47.6772 22.7809C48.3401 23.0924 48.4562 23.3886 48.4562 23.5C48.4562 23.6114 48.3401 23.9076 47.6772 24.2192C47.0604 24.5091 46.1544 24.7093 45.1114 24.7093C44.0685 24.7093 43.1625 24.5091 42.5457 24.2192C41.8828 23.9076 41.7666 23.6114 41.7666 23.5C41.7666 23.3886 41.8828 23.0924 42.5457 22.7809C43.1625 22.491 44.0685 22.2907 45.1114 22.2907C46.1544 22.2907 47.0604 22.491 47.6772 22.7809ZM48.3676 21.4829C47.4944 21.0725 46.3421 20.8396 45.1114 20.8396C43.8808 20.8396 42.7285 21.0725 41.8553 21.4829C41.0283 21.8716 40.2229 22.5429 40.2229 23.5C40.2229 24.4572 41.0283 25.1284 41.8553 25.5171C42.7285 25.9275 43.8808 26.1604 45.1114 26.1604C46.3421 26.1604 47.4944 25.9275 48.3676 25.5171C49.1946 25.1284 50 24.4572 50 23.5C50 22.5429 49.1946 21.8716 48.3676 21.4829Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M34.0462 21.8637C35.0026 21.8641 35.7784 22.5933 35.7788 23.4923C35.7792 24.3909 35.0048 25.1188 34.049 25.1184L32.0465 25.1176C31.6202 25.1175 31.2745 25.4422 31.2743 25.8429C31.2741 26.2436 31.6195 26.5686 32.0458 26.5688L34.0483 26.5695C35.8573 26.5703 37.3233 25.1922 37.3226 23.4917C37.3218 21.7918 35.8553 20.4133 34.0469 20.4126L32.0834 20.4118C31.6571 20.4116 31.3113 20.7363 31.3112 21.137C31.311 21.5378 31.6564 21.8627 32.0827 21.8629L34.0462 21.8637Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M24.2349 44.8165C24.5664 45.4397 24.8815 45.5489 25 45.5489C25.1185 45.5489 25.4336 45.4397 25.7651 44.8165C26.0734 44.2368 26.2865 43.3851 26.2865 42.4048C26.2865 41.4244 26.0734 40.5727 25.7651 39.993C25.4336 39.3698 25.1185 39.2606 25 39.2606C24.8815 39.2606 24.5664 39.3698 24.2349 39.993C23.9265 40.5727 23.7135 41.4244 23.7135 42.4048C23.7135 43.3851 23.9265 44.2368 24.2349 44.8165ZM22.8541 45.4655C22.4175 44.6447 22.1698 43.5616 22.1698 42.4048C22.1698 41.2479 22.4175 40.1648 22.8541 39.344C23.2677 38.5666 23.9817 37.8095 25 37.8095C26.0183 37.8095 26.7323 38.5666 27.1458 39.344C27.5824 40.1648 27.8302 41.2479 27.8302 42.4048C27.8302 43.5616 27.5824 44.6447 27.1458 45.4655C26.7323 46.2429 26.0183 47 25 47C23.9817 47 23.2677 46.2429 22.8541 45.4655Z" fill="#CECECE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M23.2592 32.0034C23.2596 32.9024 24.0354 33.6317 24.9918 33.6321C25.9477 33.6325 26.7221 32.9045 26.7217 32.006L26.7208 30.1237C26.7207 29.7229 27.0661 29.398 27.4924 29.3978C27.9187 29.3976 28.2644 29.7223 28.2646 30.1231L28.2654 32.0054C28.2662 33.7058 26.8002 35.0839 24.9912 35.0832C23.1827 35.0825 21.7162 33.704 21.7155 32.004L21.7146 30.1583C21.7145 29.7576 22.0599 29.4326 22.4862 29.4325C22.9125 29.4323 23.2582 29.757 23.2584 30.1577L23.2592 32.0034Z" fill="#CECECE"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/loupe.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M15.1022 14.1188L10.4647 9.48129C11.1844 8.55093 11.5737 7.41343 11.5737 6.21701C11.5737 4.78486 11.0147 3.44201 10.004 2.42951C8.9933 1.41701 7.64688 0.859863 6.21652 0.859863C4.78616 0.859863 3.43973 1.41879 2.42902 2.42951C1.41652 3.44022 0.859375 4.78486 0.859375 6.21701C0.859375 7.64736 1.4183 8.99379 2.42902 10.0045C3.43973 11.017 4.78438 11.5741 6.21652 11.5741C7.41295 11.5741 8.54866 11.1849 9.47902 10.467L14.1165 15.1027C14.1301 15.1163 14.1463 15.1271 14.164 15.1345C14.1818 15.1418 14.2009 15.1456 14.2201 15.1456C14.2393 15.1456 14.2584 15.1418 14.2761 15.1345C14.2939 15.1271 14.3101 15.1163 14.3237 15.1027L15.1022 14.3259C15.1158 14.3123 15.1266 14.2962 15.134 14.2784C15.1414 14.2606 15.1452 14.2416 15.1452 14.2224C15.1452 14.2031 15.1414 14.1841 15.134 14.1663C15.1266 14.1485 15.1158 14.1324 15.1022 14.1188ZM9.04509 9.04558C8.28795 9.80094 7.28438 10.217 6.21652 10.217C5.14866 10.217 4.14509 9.80094 3.38795 9.04558C2.63259 8.28844 2.21652 7.28486 2.21652 6.21701C2.21652 5.14915 2.63259 4.14379 3.38795 3.38843C4.14509 2.63308 5.14866 2.21701 6.21652 2.21701C7.28438 2.21701 8.28973 2.63129 9.04509 3.38843C9.80045 4.14558 10.2165 5.14915 10.2165 6.21701C10.2165 7.28486 9.80045 8.29022 9.04509 9.04558Z" fill="#25292C"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/mail.svg">
<svg width="22" height="18" viewBox="0 0 22 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M20.75 0.75H1.25C0.835156 0.75 0.5 1.08516 0.5 1.5V16.5C0.5 16.9148 0.835156 17.25 1.25 17.25H20.75C21.1648 17.25 21.5 16.9148 21.5 16.5V1.5C21.5 1.08516 21.1648 0.75 20.75 0.75ZM18.8563 3.30234L11.4617 9.05625C11.2789 9.19922 11.0234 9.19922 10.8406 9.05625L3.44375 3.30234C3.41587 3.28082 3.39541 3.25112 3.38526 3.21739C3.37511 3.18367 3.37576 3.14761 3.38713 3.11427C3.3985 3.08094 3.42002 3.052 3.44867 3.0315C3.47731 3.01101 3.51165 2.99999 3.54688 3H18.7531C18.7883 2.99999 18.8227 3.01101 18.8513 3.0315C18.88 3.052 18.9015 3.08094 18.9129 3.11427C18.9242 3.14761 18.9249 3.18367 18.9147 3.21739C18.9046 3.25112 18.8841 3.28082 18.8563 3.30234Z" fill="white"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/menu-close-btn.svg">
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M23.6673 2.68337L21.3173 0.333374L12.0007 9.65004L2.68398 0.333374L0.333984 2.68337L9.65065 12L0.333984 21.3167L2.68398 23.6667L12.0007 14.35L21.3173 23.6667L23.6673 21.3167L14.3507 12L23.6673 2.68337Z" fill="#767676"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/menu-open-btn.svg">
<svg width="30" height="28" viewBox="0 0 30 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0 0.666626H30V3.99996H0V0.666626ZM0 12.3333H30V15.6666H0V12.3333ZM0 24H30V27.3333H0V24Z" fill="black"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/opentech-logo.svg">
<svg width="165" height="22" viewBox="0 0 165 22" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0.592 6.2182H1.392V4.1622H2.84C3.928 4.1622 4.544 3.4102 4.544 2.5222C4.544 1.6342 3.936 0.8822 2.84 0.8822H0.592V6.2182ZM3.72 2.5222C3.72 3.0822 3.312 3.4582 2.736 3.4582H1.392V1.5862H2.736C3.312 1.5862 3.72 1.9622 3.72 2.5222ZM6.95206 6.3142C8.16006 6.3142 8.90406 5.4022 8.90406 4.2822C8.90406 3.1702 8.16006 2.2582 6.95206 2.2582C5.75206 2.2582 5.00006 3.1702 5.00006 4.2822C5.00006 5.4022 5.75206 6.3142 6.95206 6.3142ZM6.95206 5.6742C6.18406 5.6742 5.75206 5.0182 5.75206 4.2822C5.75206 3.5542 6.18406 2.8982 6.95206 2.8982C7.72806 2.8982 8.15206 3.5542 8.15206 4.2822C8.15206 5.0182 7.72806 5.6742 6.95206 5.6742ZM9.44219 5.6902C9.81019 6.0742 10.3702 6.3142 11.0982 6.3142C12.1702 6.3142 12.7862 5.8342 12.7862 5.1782C12.7862 4.5542 12.1622 4.2742 11.7382 4.2422C12.1702 4.1782 12.7062 3.8582 12.7062 3.3062C12.7062 2.6502 12.0582 2.2582 11.0262 2.2662C10.3542 2.2662 9.85819 2.5222 9.51419 2.8982L9.87419 3.3382C10.1782 3.0102 10.5622 2.8502 11.0582 2.8502C11.5862 2.8502 11.9542 3.0742 11.9542 3.3942C11.9542 3.7862 11.5942 3.9702 11.0262 3.9702H10.3702V4.5542H11.0262C11.6342 4.5542 12.0262 4.7062 12.0262 5.1222C12.0262 5.4822 11.6902 5.7302 11.0982 5.7302C10.6022 5.7302 10.1862 5.5222 9.84219 5.1942L9.44219 5.6902ZM14.421 7.6902V5.6582C14.733 6.0822 15.181 6.3142 15.685 6.3142C16.693 6.3142 17.405 5.5462 17.405 4.2822C17.405 3.0182 16.693 2.2582 15.685 2.2582C15.165 2.2582 14.701 2.5222 14.421 2.9062V2.3542H13.701V7.6902H14.421ZM16.653 4.2822C16.653 5.0902 16.213 5.6742 15.493 5.6742C15.053 5.6742 14.613 5.4102 14.421 5.1062V3.4662C14.613 3.1542 15.053 2.8982 15.493 2.8982C16.213 2.8982 16.653 3.4822 16.653 4.2822ZM20.0302 6.3142C21.2382 6.3142 21.9822 5.4022 21.9822 4.2822C21.9822 3.1702 21.2382 2.2582 20.0302 2.2582C18.8302 2.2582 18.0782 3.1702 18.0782 4.2822C18.0782 5.4022 18.8302 6.3142 20.0302 6.3142ZM20.0302 5.6742C19.2622 5.6742 18.8302 5.0182 18.8302 4.2822C18.8302 3.5542 19.2622 2.8982 20.0302 2.8982C20.8062 2.8982 21.2302 3.5542 21.2302 4.2822C21.2302 5.0182 20.8062 5.6742 20.0302 5.6742ZM22.6643 3.9302C22.6643 5.3702 23.3923 6.3142 24.6083 6.3142C25.8323 6.3142 26.5523 5.3702 26.5523 4.2742C26.5523 3.2582 25.8323 2.3862 24.7363 2.3862C24.1123 2.3862 23.5443 2.6902 23.2243 3.2022C23.3603 2.3862 23.8483 1.8102 25.1363 1.6022L26.1443 1.4342V0.7942L25.1283 0.9542C23.2963 1.2342 22.6643 2.2262 22.6643 3.9302ZM25.8083 4.2662C25.8083 5.0182 25.3843 5.6742 24.6083 5.6742C23.8403 5.6742 23.4083 5.0182 23.4083 4.2662C23.4083 3.5542 23.8403 2.8982 24.6083 2.8982C25.3843 2.8982 25.8083 3.5542 25.8083 4.2662ZM26.9565 5.6022V6.3142C27.7485 6.3142 28.3165 5.7542 28.4925 3.3222L28.5245 2.9862H29.9965V6.2182H30.7165V2.3542H27.8845L27.8205 3.2902C27.6685 5.1222 27.3645 5.6022 26.9565 5.6022ZM31.6251 4.2822C31.6251 5.4982 32.4731 6.3142 33.6251 6.3142C34.2491 6.3142 34.7931 6.1142 35.1771 5.7382L34.8411 5.2662C34.5531 5.5622 34.1051 5.7222 33.6971 5.7222C32.9211 5.7222 32.4411 5.1782 32.3851 4.5222H35.4411V4.3462C35.4411 3.1622 34.7211 2.2582 33.5611 2.2582C32.4331 2.2582 31.6251 3.1622 31.6251 4.2822ZM33.5611 2.8502C34.3771 2.8502 34.7211 3.4902 34.7371 4.0022H32.3771C32.4171 3.4742 32.7851 2.8502 33.5611 2.8502ZM36.3416 6.2182H37.0616V4.5542H38.9496V6.2182H39.6696V2.3542H38.9496V3.9222H37.0616V2.3542H36.3416V6.2182ZM42.5302 6.3142C43.7382 6.3142 44.4822 5.4022 44.4822 4.2822C44.4822 3.1702 43.7382 2.2582 42.5302 2.2582C41.3302 2.2582 40.5782 3.1702 40.5782 4.2822C40.5782 5.4022 41.3302 6.3142 42.5302 6.3142ZM42.5302 5.6742C41.7622 5.6742 41.3302 5.0182 41.3302 4.2822C41.3302 3.5542 41.7622 2.8982 42.5302 2.8982C43.3062 2.8982 43.7302 3.5542 43.7302 4.2822C43.7302 5.0182 43.3062 5.6742 42.5302 5.6742ZM47.4588 6.2182H49.5468C50.4428 6.2182 50.8668 5.7862 50.8668 5.1702C50.8668 4.7222 50.5628 4.3222 50.1468 4.2262C50.4988 4.1222 50.7948 3.8102 50.7948 3.3462C50.7948 2.7782 50.3708 2.3542 49.5228 2.3542H47.4588V6.2182ZM50.0588 3.4582C50.0588 3.7222 49.8668 3.9222 49.5228 3.9222H48.1788V2.9862H49.5228C49.8588 2.9862 50.0588 3.1782 50.0588 3.4582ZM50.1228 5.0742C50.1228 5.3942 49.9068 5.5862 49.5468 5.5862H48.1788V4.5542H49.5468C49.9308 4.5542 50.1228 4.8022 50.1228 5.0742Z" fill="white"/>
<g clip-path="url(#clip0_5883_20926)">
<path d="M39.7546 10.5016H46.7586V11.5235H43.8244V19.7132H42.6752V11.5235H39.7546V10.5016ZM72.0687 14.4654H66.6703V10.5016H65.5211V19.7132H66.6703V15.4873H72.0687V19.7132H73.2179V10.5016H72.0687V14.4654ZM60.5411 18.8575C58.5198 18.8575 56.9839 17.2971 56.9839 15.1151C56.9839 12.9331 58.5207 11.3727 60.5411 11.3727C61.5935 11.3727 62.548 11.9392 63.0741 12.7126L64.0432 12.1741C63.3096 11.1386 62.174 10.3508 60.5411 10.3508C57.8832 10.3508 55.793 12.2843 55.793 15.1151C55.793 17.9459 57.8832 19.8794 60.5411 19.8794C62.1749 19.8794 63.2815 19.106 64.0567 18.0561L63.0741 17.5176C62.548 18.3046 61.5926 18.8575 60.5411 18.8575ZM48.2864 19.7132H54.335V18.6913H49.4347V15.5145H54.2381V14.4926H49.4347V11.5235H54.335V10.5016H48.2864V19.7132ZM9.69006 14.7627C9.69006 17.457 7.52112 19.6418 4.84503 19.6418C2.16894 19.6418 0 17.457 0 14.7627C0 12.0684 2.16894 9.88363 4.84503 9.88363C7.52112 9.88363 9.69006 12.0684 9.69006 14.7627ZM8.01649 14.7627C8.01649 14.3236 7.16521 13.9486 5.96708 13.8023C6.70788 13.645 7.21049 13.3369 7.21049 12.9818C7.21049 12.4677 6.15092 12.0503 4.84503 12.0503C3.53914 12.0503 2.47957 12.4677 2.47957 12.9818C2.47957 13.336 2.98309 13.6441 3.72298 13.8023C2.52576 13.9486 1.67357 14.3236 1.67357 14.7627C1.67357 15.2018 2.52485 15.5768 3.72298 15.7232C2.98218 15.8804 2.47957 16.1885 2.47957 16.5436C2.47957 17.0577 3.53914 17.4751 4.84503 17.4751C6.15092 17.4751 7.21049 17.0577 7.21049 16.5436C7.21049 16.1894 6.70697 15.8804 5.96708 15.7232C7.16431 15.5768 8.01649 15.2018 8.01649 14.7627ZM19.2588 13.6649C19.2588 15.3771 18.096 16.8137 15.937 16.8137H13.8052V19.7141H11.0086V10.5016H15.9361C18.0951 10.5016 19.2579 11.9383 19.2579 13.664L19.2588 13.6649ZM16.4215 13.6649C16.4215 13.168 16.0475 12.9331 15.5775 12.9331H13.8052V14.3832H15.5775C16.0484 14.3832 16.4215 14.1483 16.4215 13.6649ZM20.7277 19.7132H27.7317V17.2827H23.5233V16.2743H27.6348V13.8438H23.5233V12.9322H27.7317V10.5016H20.7277V19.7132ZM35.6178 14.8657L32.4065 10.5016H29.5275V19.7132H32.3241V15.0455L35.7292 19.7132H38.4143V10.5016H35.6178V14.8657ZM82.6906 22H83.3771V8.00156H82.6906V22ZM143.27 12.7731V12.7795H143.234C143.234 12.7795 143.27 12.4912 143.27 12.1678V10.6733H141.19V19.3418H143.352V15.9048C143.352 15.3925 143.406 14.9217 143.541 14.4926C143.947 13.2041 144.99 12.6746 145.91 12.6746C146.198 12.6746 146.422 12.7099 146.422 12.7099V10.5857C146.422 10.5857 146.233 10.5504 146.027 10.5504C144.695 10.5504 143.658 11.5389 143.27 12.7749V12.7731ZM152.102 16.0457C151.931 16.558 151.813 17.1282 151.796 17.1282H151.761C151.761 17.1282 151.625 16.5517 151.454 16.0457L149.645 10.6733H147.365L150.517 19.3418H153.074L156.191 10.6733H153.911L152.102 16.0457ZM139.017 14.5856C139.017 14.8386 138.964 15.4151 138.964 15.4151H132.966C133.107 16.9276 134.28 17.71 135.576 17.71C136.972 17.71 138.08 16.7568 138.08 16.7568L138.917 18.3046C138.917 18.3046 137.585 19.546 135.423 19.546C132.542 19.546 130.751 17.4742 130.751 15.0085C130.751 12.343 132.571 10.4718 135.164 10.4718C137.756 10.4718 139.017 12.2897 139.017 14.5856ZM136.831 13.9387C136.796 12.7677 136.065 12.1379 135.11 12.1379C134.003 12.1379 133.237 12.8147 133.031 13.9387H136.831ZM164.947 15.416H158.949C159.085 16.9285 160.256 17.7109 161.553 17.7109C162.95 17.7109 164.057 16.7577 164.057 16.7577L164.894 18.3055C164.894 18.3055 163.562 19.5469 161.4 19.5469C158.519 19.5469 156.727 17.4751 156.727 15.0094C156.727 12.3439 158.548 10.4727 161.14 10.4727H161.147C163.656 10.4727 165 12.2906 165 14.5865C165 14.8395 164.947 15.416 164.947 15.416ZM162.814 13.9387C162.779 12.7677 162.048 12.1379 161.093 12.1379C159.986 12.1379 159.219 12.8147 159.014 13.9387H162.814ZM120.492 18.3461V18.3398C119.791 18.3398 118.613 18.0516 118.613 16.1216V11.9256H120.792V10.7844H118.613V8.28889H117.299V10.7899H116.138V11.931H117.281V16.2508C117.281 19.1223 119.225 19.5523 120.386 19.5523C120.704 19.5523 120.892 19.5171 120.904 19.5171L120.969 19.5054V18.2928L120.875 18.3109C120.875 18.3109 120.722 18.3461 120.492 18.3461ZM114.265 7.2182C113.357 7.2182 111.236 7.53624 111.236 10.4547V10.7844H110.075V11.903H111.236V19.3409H112.544V11.9021H114.73V10.7835H112.544V10.4538C112.544 9.68846 112.786 8.40002 114.383 8.40002C114.606 8.40002 114.772 8.43526 114.772 8.43526L114.866 8.45243V7.26518L114.801 7.25344C114.801 7.25344 114.589 7.2182 114.265 7.2182ZM109.126 14.957C109.126 17.523 107.106 19.5352 104.531 19.5352C101.957 19.5352 99.9417 17.476 99.9417 14.957C99.9417 12.4379 101.957 10.461 104.531 10.461C107.106 10.461 109.126 12.3909 109.126 14.957ZM107.783 14.957C107.783 13.1092 106.358 11.6618 104.531 11.6618C102.705 11.6618 101.279 13.0505 101.279 14.957C101.279 16.8634 102.711 18.3525 104.531 18.3525C106.352 18.3525 107.783 16.8047 107.783 14.957ZM95.8592 14.4266C94.834 14.0263 93.9501 13.6848 93.9501 12.8906C93.9501 11.9726 94.7869 11.6428 95.5703 11.6428C96.9251 11.6428 97.6441 12.39 97.6559 12.3964L97.7265 12.4668L98.3333 11.4485L98.298 11.407C98.2627 11.3654 97.4204 10.4474 95.6119 10.4474C94.1684 10.4474 92.6125 11.2064 92.6125 12.8779C92.6125 14.4555 94.0443 15.0202 95.3049 15.5199C96.3301 15.9256 97.2139 16.2734 97.2139 17.0613C97.2139 17.9441 96.3889 18.338 95.5766 18.338C94.0325 18.338 93.0961 17.3378 93.0844 17.3315L93.0191 17.2664L92.3001 18.226L92.3418 18.2729C92.3418 18.2729 92.6306 18.5964 93.1604 18.9081C93.6558 19.1964 94.4681 19.5379 95.5531 19.5379C97.2909 19.5379 98.5515 18.5024 98.5515 17.0721C98.5515 15.472 97.1198 14.9181 95.8592 14.4239V14.4266ZM125.1 13.0794L125.106 13.0912C125.106 12.55 125.654 12.3087 126.214 12.3087C127.546 12.3087 128.341 13.0559 128.341 13.0559L129.142 11.4549C129.142 11.4549 128.188 10.4664 126.225 10.4664C124.263 10.4664 122.903 11.4025 122.903 13.0144C122.903 15.8036 127.127 15.6328 127.127 16.9222C127.127 17.4345 126.597 17.7046 125.984 17.7046C124.57 17.7046 123.615 16.7514 123.615 16.7514L122.625 18.2639C122.625 18.2639 123.834 19.5352 126.002 19.5352C128.17 19.5352 129.324 18.3814 129.324 16.9339C129.324 14.1447 125.1 14.3037 125.1 13.0794Z" fill="white"/>
</g>
<defs>
<clipPath id="clip0_5883_20926">
<rect width="165" height="14.7818" fill="white" transform="translate(0 7.2182)"/>
</clipPath>
</defs>
</svg>
</file>

<file path="frontend/public/pictures/svg/people.svg">
<svg width="27" height="27" viewBox="0 0 27 27" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M17.8165 4.89535C17.8165 5.97831 17.3863 7.01692 16.6205 7.7827C15.8548 8.54847 14.8161 8.97868 13.7332 8.97868C12.6502 8.97868 11.6116 8.54847 10.8458 7.7827C10.08 7.01692 9.64984 5.97831 9.64984 4.89535C9.64984 3.81238 10.08 2.77377 10.8458 2.00799C11.6116 1.24222 12.6502 0.812012 13.7332 0.812012C14.8161 0.812012 15.8548 1.24222 16.6205 2.00799C17.3863 2.77377 17.8165 3.81238 17.8165 4.89535ZM25.9832 5.71201C25.9832 6.57839 25.639 7.40928 25.0264 8.02189C24.4138 8.63451 23.5829 8.97868 22.7165 8.97868C21.8501 8.97868 21.0192 8.63451 20.4066 8.02189C19.794 7.40928 19.4498 6.57839 19.4498 5.71201C19.4498 4.84564 19.794 4.01475 20.4066 3.40213C21.0192 2.78951 21.8501 2.44535 22.7165 2.44535C23.5829 2.44535 24.4138 2.78951 25.0264 3.40213C25.639 4.01475 25.9832 4.84564 25.9832 5.71201ZM4.74984 8.97868C5.61621 8.97868 6.4471 8.63451 7.05972 8.02189C7.67234 7.40928 8.0165 6.57839 8.0165 5.71201C8.0165 4.84564 7.67234 4.01475 7.05972 3.40213C6.4471 2.78951 5.61621 2.44535 4.74984 2.44535C3.88346 2.44535 3.05257 2.78951 2.43995 3.40213C1.82734 4.01475 1.48317 4.84564 1.48317 5.71201C1.48317 6.57839 1.82734 7.40928 2.43995 8.02189C3.05257 8.63451 3.88346 8.97868 4.74984 8.97868ZM7.19984 12.6537C7.19984 11.5267 8.1145 10.612 9.2415 10.612H18.2248C19.3518 10.612 20.2665 11.5267 20.2665 12.6537V20.412C20.2665 22.1448 19.5782 23.8065 18.3529 25.0318C17.1277 26.257 15.4659 26.9453 13.7332 26.9453C12.0004 26.9453 10.3386 26.257 9.11341 25.0318C7.88817 23.8065 7.19984 22.1448 7.19984 20.412V12.6537ZM5.5665 12.6537C5.5665 11.8974 5.79517 11.1967 6.18554 10.612H2.70817C1.58117 10.612 0.666504 11.5267 0.666504 12.6537V18.7787C0.666428 19.4779 0.816017 20.1691 1.10522 20.8058C1.39442 21.4424 1.81654 22.0098 2.34321 22.4698C2.86988 22.9298 3.4889 23.2717 4.15868 23.4726C4.82846 23.6735 5.53348 23.7287 6.22637 23.6346C5.79012 22.6163 5.56561 21.5198 5.5665 20.412V12.6537ZM21.8998 20.412C21.8998 21.5553 21.6646 22.6464 21.24 23.6346C21.4556 23.664 21.6755 23.6787 21.8998 23.6787C23.1994 23.6787 24.4457 23.1624 25.3647 22.2435C26.2836 21.3246 26.7998 20.0782 26.7998 18.7787V12.6537C26.7998 11.5267 25.8852 10.612 24.7582 10.612H21.2808C21.6728 11.1967 21.8998 11.8974 21.8998 12.6537V20.412Z" fill="#232424"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/phone.svg">
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M18.7563 3.39531L16.2602 0.901563C16.0841 0.724712 15.8748 0.584392 15.6443 0.488665C15.4139 0.392938 15.1667 0.34369 14.9172 0.34375C14.4086 0.34375 13.9305 0.542969 13.5719 0.901563L10.8859 3.5875C10.7091 3.76358 10.5688 3.97286 10.473 4.20333C10.3773 4.4338 10.3281 4.68091 10.3281 4.93047C10.3281 5.43906 10.5273 5.91719 10.8859 6.27578L12.85 8.23984C12.3903 9.25319 11.7511 10.175 10.9633 10.9609C10.1775 11.7506 9.25569 12.3922 8.24219 12.8547L6.27813 10.8906C6.10205 10.7138 5.89277 10.5735 5.6623 10.4777C5.43183 10.382 5.18472 10.3328 4.93516 10.3328C4.42656 10.3328 3.94844 10.532 3.58985 10.8906L0.901564 13.5742C0.724496 13.7506 0.584056 13.9603 0.488324 14.1912C0.392593 14.4221 0.34346 14.6696 0.343751 14.9195C0.343751 15.4281 0.54297 15.9062 0.901564 16.2648L3.39297 18.7562C3.96485 19.3305 4.75469 19.6562 5.56563 19.6562C5.73672 19.6562 5.90078 19.6422 6.0625 19.6141C9.22188 19.0938 12.3555 17.4133 14.8844 14.8867C17.4109 12.3625 19.0891 9.23125 19.6164 6.0625C19.7758 5.09453 19.4547 4.09844 18.7563 3.39531Z" fill="white"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/rocket.svg">
<svg width="29" height="29" viewBox="0 0 29 29" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M9.23013 21.8612L7.54029 20.1713C7.07544 19.7065 6.91138 19.0338 7.11919 18.4104C7.28326 17.9237 7.50201 17.2893 7.76451 16.562H1.97857C1.50826 16.562 1.07076 16.3104 0.8356 15.9002C0.600444 15.4901 0.605912 14.987 0.846537 14.5823L3.71763 9.74243C4.42857 8.54477 5.71372 7.81196 7.10279 7.81196H11.6036C11.7348 7.59321 11.8661 7.39086 11.9973 7.19399C16.4762 0.587738 23.1481 0.368989 27.1294 1.1018C27.7637 1.21665 28.2559 1.7143 28.3762 2.34868C29.109 6.33539 28.8848 13.0018 22.284 17.4807C22.0926 17.612 21.8848 17.7432 21.6661 17.8745V22.3752C21.6661 23.7643 20.9333 25.0549 19.7356 25.7604L14.8958 28.6315C14.4911 28.8721 13.9879 28.8776 13.5778 28.6424C13.1676 28.4073 12.9161 27.9752 12.9161 27.4995V21.637C12.145 21.9049 11.4723 22.1237 10.9637 22.2877C10.3512 22.4846 9.68404 22.3151 9.22466 21.8612H9.23013ZM21.6661 9.99946C22.2462 9.99946 22.8026 9.76899 23.2129 9.35875C23.6231 8.94852 23.8536 8.39212 23.8536 7.81196C23.8536 7.2318 23.6231 6.6754 23.2129 6.26516C22.8026 5.85493 22.2462 5.62446 21.6661 5.62446C21.0859 5.62446 20.5295 5.85493 20.1193 6.26516C19.709 6.6754 19.4786 7.2318 19.4786 7.81196C19.4786 8.39212 19.709 8.94852 20.1193 9.35875C20.5295 9.76899 21.0859 9.99946 21.6661 9.99946Z" fill="#232424"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/star-filled.svg">
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M9 14.737L13.1224 17.3458C13.8773 17.824 14.8011 17.1172 14.6025 16.2233L13.5098 11.3174L17.1554 8.01216C17.8209 7.40932 17.4633 6.26599 16.5891 6.19324L11.7913 5.76709L9.91388 1.13143C9.57614 0.289524 8.42386 0.289524 8.08612 1.13143L6.2087 5.75669L1.41085 6.18284C0.536712 6.2556 0.179108 7.39892 0.844648 8.00177L4.49022 11.307L3.39754 16.2129C3.19887 17.1068 4.12268 17.8136 4.87762 17.3355L9 14.737Z" fill="#80B31E"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/star.svg">
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M17.4266 7.02123C17.3375 6.73827 17.1702 6.48867 16.9454 6.30347C16.7206 6.11826 16.4482 6.00561 16.1622 5.97951L11.9866 5.60519L10.3529 1.57044C10.2406 1.29606 10.0528 1.06203 9.81294 0.897509C9.57312 0.73299 9.29188 0.645264 9.00429 0.645264C8.7167 0.645264 8.43546 0.73299 8.19564 0.897509C7.95582 1.06203 7.76802 1.29606 7.65564 1.57044L6.01983 5.60519L1.84422 5.97951C1.55661 6.00419 1.28244 6.11636 1.05611 6.30195C0.829772 6.48753 0.66136 6.73826 0.572001 7.02268C0.482643 7.3071 0.476317 7.61253 0.553819 7.90066C0.63132 8.18879 0.789197 8.44678 1.00764 8.64226L4.1811 11.5123L3.22877 15.7824C3.16346 16.0732 3.18229 16.3775 3.28291 16.6572C3.38353 16.9369 3.56148 17.1797 3.79451 17.3552C4.02754 17.5307 4.3053 17.6311 4.59308 17.6439C4.88087 17.6566 5.16589 17.5812 5.41254 17.427L9.00209 15.1674L12.5916 17.427C12.8383 17.581 13.1232 17.6562 13.4109 17.6433C13.6985 17.6304 13.9761 17.53 14.209 17.3545C14.4419 17.1791 14.6198 16.9364 14.7204 16.6568C14.821 16.3772 14.8399 16.0731 14.7747 15.7824L13.8224 11.5123L16.9958 8.64226C17.2137 8.44607 17.3708 8.18756 17.4474 7.89917C17.524 7.61078 17.5168 7.30536 17.4266 7.02123ZM12.5367 10.2572C12.3358 10.4384 12.1863 10.6729 12.1044 10.9355C12.0224 11.1981 12.0111 11.4789 12.0715 11.7477L12.9059 15.4924L9.76029 13.5122C9.53186 13.368 9.26955 13.2918 9.00209 13.2918C8.73463 13.2918 8.47233 13.368 8.24389 13.5122L5.09827 15.4924L5.93266 11.7477C5.99312 11.4789 5.98177 11.1981 5.89981 10.9355C5.81784 10.6729 5.66838 10.4384 5.46748 10.2572L2.67715 7.73418L6.35022 7.40466C6.6162 7.38105 6.87083 7.28228 7.08641 7.11908C7.30199 6.95589 7.47024 6.73454 7.57286 6.47911L9.00209 2.94927L10.4313 6.47911C10.5339 6.73454 10.7022 6.95589 10.9178 7.11908C11.1333 7.28228 11.388 7.38105 11.654 7.40466L15.327 7.73418L12.5367 10.2572Z" fill="#80B31E"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/truck.svg">
<svg width="31" height="23" viewBox="0 0 31 23" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M22.4584 4.8318H26.5339L30.6093 10.3418V18.4167H27.8448C27.6812 19.5484 27.1154 20.5834 26.2509 21.3319C25.3864 22.0804 24.2812 22.4924 23.1377 22.4924C21.9941 22.4924 20.8889 22.0804 20.0244 21.3319C19.1599 20.5834 18.5941 19.5484 18.4305 18.4167H11.543C11.3815 19.55 10.8165 20.5871 9.95177 21.3373C9.08704 22.0876 7.98066 22.5006 6.83584 22.5006C5.69102 22.5006 4.58464 22.0876 3.71991 21.3373C2.85519 20.5871 2.29019 19.55 2.12869 18.4167H0.722656V2.11483C0.722656 1.75454 0.865782 1.409 1.12055 1.15424C1.37531 0.899474 1.72085 0.756348 2.08114 0.756348H21.0999C21.4602 0.756348 21.8058 0.899474 22.0605 1.15424C22.3153 1.409 22.4584 1.75454 22.4584 2.11483V4.8318ZM22.4584 7.54877V11.6242H27.8924V11.2371L25.1645 7.54877H22.4584Z" fill="#232424"/>
</svg>
</file>

<file path="frontend/public/pictures/svg/vine.svg">
<svg width="22" height="31" viewBox="0 0 22 31" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M21.5776 11.0657L18.6847 1.24135C18.6198 1.02124 18.4855 0.828011 18.3018 0.69053C18.1181 0.553049 17.8949 0.478695 17.6654 0.478577H4.93752C4.70806 0.478695 4.48481 0.553049 4.3011 0.69053C4.11739 0.828011 3.9831 1.02124 3.91827 1.24135L1.02533 11.0657C0.571438 12.5715 0.547684 14.1742 0.956746 15.6928C1.36581 17.2114 2.19139 18.5854 3.34022 19.6595C5.23006 21.4316 7.65816 22.521 10.2384 22.7544V28.1191H5.98599C5.70404 28.1191 5.43364 28.2311 5.23427 28.4304C5.0349 28.6298 4.9229 28.9002 4.9229 29.1821C4.9229 29.4641 5.0349 29.7345 5.23427 29.9339C5.43364 30.1332 5.70404 30.2452 5.98599 30.2452H16.6169C16.8989 30.2452 17.1693 30.1332 17.3687 29.9339C17.568 29.7345 17.68 29.4641 17.68 29.1821C17.68 28.9002 17.568 28.6298 17.3687 28.4304C17.1693 28.2311 16.8989 28.1191 16.6169 28.1191H12.3646V22.7544C14.9448 22.521 17.3729 21.4316 19.2627 19.6595C20.4113 18.5852 21.2367 17.2112 21.6457 15.6927C22.0548 14.1742 22.0312 12.5715 21.5776 11.0657ZM5.73218 2.60477H16.8708L19.5405 11.6663C19.5524 11.7062 19.563 11.7461 19.5737 11.7859C16.7272 12.8065 13.522 11.5733 11.7825 10.6923C8.4351 8.99796 5.77736 8.78268 3.81728 9.10692L5.73218 2.60477Z" fill="#232424"/>
</svg>
</file>

<file path="frontend/public/index.html">
<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="theme-color" content="#000000" />
        <meta
            name="description"
            content="Web site created using create-react-app"
        />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
        <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
        <title>React App</title>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link
            href="https://fonts.googleapis.com/css2?family=Geologica:wght@100..900&display=swap"
            rel="stylesheet"
        />
        <viewport
            name="viewport"
            content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"
        />
    </head>
    <body>
        <noscript>You need to enable JavaScript to run this app.</noscript>
        <div id="root"></div>
    </body>
</html>
</file>

<file path="frontend/public/manifest.json">
{
    "short_name": "React App",
    "name": "Create React App Sample",
    "icons": [
        {
            "src": "favicon.ico",
            "sizes": "64x64 32x32 24x24 16x16",
            "type": "image/x-icon"
        },
        {
            "src": "logo192.png",
            "type": "image/png",
            "sizes": "192x192"
        },
        {
            "src": "logo512.png",
            "type": "image/png",
            "sizes": "512x512"
        }
    ],
    "start_url": ".",
    "display": "standalone",
    "theme_color": "#000000",
    "background_color": "#ffffff"
}
</file>

<file path="frontend/src/components/Button/button.css">
.button {
    cursor: pointer;
    border: 0;
    border-radius: 4px;
    font-family: var(--text-font), sans-serif;
    font-size: 14px;
    transition: all var(--animation-normal) ease;
}

.button__padding {
    padding: 10px 16px;
}

.button__primary-color {
    background-color: var(--primary-btn-bcg-color-active);
    color: var(--primary-btn-text-color-active);
}

.button__primary-color:hover {
    background-color: var(--primary-btn-bcg-color-hover);
    color: var(--primary-btn-text-color-active);
}

.button__primary-color:disabled {
    background-color: var(--primary-btn-bcg-color-inactive);
    color: var(--primary-btn-text-color-inactive);
    cursor: not-allowed;
}

.button__secondary-color {
    border: 1px solid var(--secondary-btn-text-color-active);
    background-color: var(--secondary-btn-bcg-color-active);
    color: var(--secondary-btn-text-color-active);
}

.button__secondary-color:hover {
    background-color: var(--secondary-btn-bcg-color-hover);
    color: var(--secondary-btn-text-color-active);
}

.button__secondary-color:disabled {
    background-color: var(--secondary-btn-bcg-color-inactive);
    color: var(--secondary-btn-text-color-inactive);
    cursor: not-allowed;
}

.button__danger-color {
    background-color: var(--danger-btn-bcg-color-active);
    color: var(--danger-btn-text-color-active);
}

.button__danger-color:hover {
    background-color: var(--danger-btn-bcg-color-hover);
    color: var(--danger-btn-text-color-active);
}

.button__danger-color:disabled {
    background-color: var(--danger-btn-bcg-color-inactive);
    color: var(--danger-btn-text-color-inactive);
    cursor: not-allowed;
}

.button__outline-color {
    background-color: transparent;
}
</file>

<file path="frontend/src/components/Button/button.jsx">
import "./button.css";
import PropTypes from 'prop-types';
import clsx from 'clsx';

/**
 * @param {Object} props
 * @param {'primary' | 'secondary' | 'danger' | 'outline'} props.variant - Button variant
 * @param {string} [props.className] - Additional classes
 * @param {React.ReactNode} props.children - Button contents
 */
function Button({  variant = 'primary', className = '', children, ...rest }) {
    return (
        <button className={clsx("button", `button__${variant}-color`, className)} {...rest}>
            {children}
        </button>
    );
}

/**
 * Button component
 * @param {Object} props
 * @param {'primary' | 'secondary' | 'danger' | 'outline'} [props.variant] - Button variant
 * @param {string} [props.className] - Additional classes
 * @param {React.ReactNode} props.children - Button contents
 * @returns {JSX.Element}
 */
Button.propTypes = {
    variant: PropTypes.oneOf(['primary', 'secondary', 'danger', 'outline']),
    className: PropTypes.string,
    children: PropTypes.node.isRequired,
};

export default Button;
</file>

<file path="frontend/src/components/Checkbox/checkbox.css">
.checkbox[type="checkbox"] {
    height: 16px;
    width: 16px;
    min-height: 16px;
    min-width: 16px;
    max-height: 16px;
    max-width: 16px;
    margin: 0;
    cursor: pointer;
    appearance: none;
    border-radius: 2px;
    position: relative;
}

.checkbox[type="checkbox"]:checked {
    background-color: var(--checkbox-border-color-matched);
    background-repeat: no-repeat;
    background-position: center;
    background-size: auto;
    background-image: url("../../../public/pictures/svg/check.svg");
    border-color: var(--checkbox-border-color-matched);
}

.checkbox__active-color {
    border: 1px solid var(--checkbox-border-color-unmatched);
}

.checkbox--container {
    padding: 3px 24px;
}

.checkbox--container > .checkbox--item:not(:last-child) {
    margin-bottom: 2px;
}

.checkbox--item {
    line-height: 22px;
    display: flex;
    align-items: center;
    gap: 8px;
}

.checkbox__error-color {
    border: 1px solid var(--checkbox-border-color-red);
}
</file>

<file path="frontend/src/components/Checkbox/checkbox.jsx">
import './checkbox.css';
import PropTypes from 'prop-types';
import clsx from 'clsx';

/**
 * Checkbox component to render a group of checkboxes.
 * It accepts a group key, values for each checkbox, error messages, a change handler,
 * and labels for each checkbox.
 * It displays checkboxes with labels and applies styles based on error states.
 * @param groupKey - The key for the group of checkboxes, used to identify the group in the form data.
 * @param values - An object containing the values for each checkbox, where keys are checkbox identifiers and values are booleans indicating whether the checkbox is checked.
 * @param errors - An object containing error messages for the group, where the key is the group key and the value is an error message if applicable.
 * @param handleChange - A function to handle changes to the checkboxes, typically updating the form data state.
 * @param labels - An object containing labels for each checkbox, where keys match the values object and values are the label text to be displayed next to each checkbox.
 * @param isGrouped - If is grouped true then checkbox is now inherits radiobutton and only one checkbox can be selected
 * @returns {JSX.Element}
 */
function Checkbox({ groupKey, values, errors = {}, handleChange, labels, isGrouped }) {
    const handleCheckboxChange = (e) => {
        const { name, checked } = e.target;

        if (isGrouped) {
            const newValues = Object.keys(values).reduce((acc, key) => {
                acc[key] = false;
                return acc;
            }, {});

            newValues[name.split(".")[1]] = checked;
            handleChange({ target: { name: groupKey, value: newValues } });
        } else {
            handleChange(e);
        }
    };

    return (
        <div className={'checkbox--container'}>
            {Object.keys(values).map((key) => (
                <div className="checkbox--item" key={key}>
                    <input
                        type="checkbox"
                        name={`${groupKey}.${key}`}
                        checked={values[key]}
                        onChange={handleCheckboxChange}
                        className={clsx('checkbox', errors[groupKey] ?
                            'checkbox__error-color' :
                            'checkbox__active-color')
                        }
                    />
                    <label className="panel--font-size">{labels[key]}</label>
                </div>
            ))}
        </div>
    );
}

/**
 * Checkbox component to render a group of checkboxes.
 * It accepts a group key, values for each checkbox, error messages, a change handler,
 * and labels for each checkbox.
 * It displays checkboxes with labels and applies styles based on error states.
 * @param groupKey - The key for the group of checkboxes, used to identify the group in the form data.
 * @param values - An object containing the values for each checkbox, where keys are checkbox identifiers and values are booleans indicating whether the checkbox is checked.
 * @param errors - An object containing error messages for the group, where the key is the group key and the value is an error message if applicable.
 * @param handleChange - A function to handle changes to the checkboxes, typically updating the form data state.
 * @param labels - An object containing labels for each checkbox, where keys match the values object and values are the label text to be displayed next to each checkbox.
 */
Checkbox.propTypes = {
    groupKey: PropTypes.string.isRequired,
    values: PropTypes.objectOf(PropTypes.bool).isRequired,
    errors: PropTypes.objectOf(PropTypes.string),
    handleChange: PropTypes.func.isRequired,
    labels: PropTypes.objectOf(PropTypes.string).isRequired,
    isGrouped: PropTypes.bool
};

export default Checkbox;
</file>

<file path="frontend/src/components/Dimmer/dimmer.css">
.dimmer-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(16, 16, 16, 0.4);
    z-index: 10;
    pointer-events: auto;
}
</file>

<file path="frontend/src/components/Dimmer/dimmer.jsx">
import './dimmer.css';
import PropTypes from 'prop-types';

/**
 * Dimmer component to overlay content with a semi-transparent background.
 * It can be used to block user interaction with the underlying content.
 * The dimmer can be activated or deactivated based on the `isActive` prop.
 * When active, it displays a semi-transparent overlay that covers the entire viewport.
 * Clicking on the overlay will trigger the `hideDimmer` function to deactivate it.
 * @param isActive - boolean indicating if the dimmer is active
 * @param hideDimmer - function to call when the dimmer is clicked to hide it
 * @param children - React elements to be displayed on top of the dimmer
 * @returns {JSX.Element}
 */
function Dimmer({ isActive, hideDimmer, children }) {
    return <>
        {isActive && <div className="dimmer-overlay" onClick={hideDimmer}>
            { children }
        </div>}
    </>;
}

/**
 * PropTypes for Dimmer component
 * @property {boolean} isActive - Indicates if the dimmer is active
 * @property {function} hideDimmer - Function to call when the dimmer is clicked to hide it
 * @property {node} children - React elements to be displayed on top of the dimmer
 */
Dimmer.propTypes = {
    isActive: PropTypes.bool.isRequired,
    hideDimmer: PropTypes.func.isRequired,
    children: PropTypes.node
}

export default Dimmer;
</file>

<file path="frontend/src/components/FollowStar/followStar.jsx">
import './followStar.css';
import PropTypes from 'prop-types';

/**
 * A component of the “Favorites” button that toggles its state
 * between on and off when clicked.
 *
 * @component
 * @param {Object} props - Properties of the component.
 * @param {boolean} props.value - Current state of the button:
 * `true` - enabled (active icon), `false` - disabled (empty icon).
 * @param {function(boolean): void} props.setter - Function to change the state,
 * usually derived from React useState.
 *
 * @example
 * const [isFavorite, setIsFavorite] = useState(false);
 * return <FollowStar value={isFavorite} setter={setIsFavorite} />;
 */
function FollowStar({ participantId, value, setter }) {
    const handleToggle = () => {
        setter(!value);
    };

    return (
        <button
            key={participantId}
            onClick={handleToggle}
            className={'button button__outline-color'}
        >
            {!value ?
                <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M17.4266 7.02123C17.3375 6.73827 17.1702 6.48867 16.9454 6.30347C16.7206 6.11826 16.4482 6.00561 16.1622 5.97951L11.9866 5.60519L10.3529 1.57044C10.2406 1.29606 10.0528 1.06203 9.81294 0.897509C9.57312 0.73299 9.29188 0.645264 9.00429 0.645264C8.7167 0.645264 8.43546 0.73299 8.19564 0.897509C7.95582 1.06203 7.76802 1.29606 7.65564 1.57044L6.01983 5.60519L1.84422 5.97951C1.55661 6.00419 1.28244 6.11636 1.05611 6.30195C0.829772 6.48753 0.66136 6.73826 0.572001 7.02268C0.482643 7.3071 0.476317 7.61253 0.553819 7.90066C0.63132 8.18879 0.789197 8.44678 1.00764 8.64226L4.1811 11.5123L3.22877 15.7824C3.16346 16.0732 3.18229 16.3775 3.28291 16.6572C3.38353 16.9369 3.56148 17.1797 3.79451 17.3552C4.02754 17.5307 4.3053 17.6311 4.59308 17.6439C4.88087 17.6566 5.16589 17.5812 5.41254 17.427L9.00209 15.1674L12.5916 17.427C12.8383 17.581 13.1232 17.6562 13.4109 17.6433C13.6985 17.6304 13.9761 17.53 14.209 17.3545C14.4419 17.1791 14.6198 16.9364 14.7204 16.6568C14.821 16.3772 14.8399 16.0731 14.7747 15.7824L13.8224 11.5123L16.9958 8.64226C17.2137 8.44607 17.3708 8.18756 17.4474 7.89917C17.524 7.61078 17.5168 7.30536 17.4266 7.02123ZM12.5367 10.2572C12.3358 10.4384 12.1863 10.6729 12.1044 10.9355C12.0224 11.1981 12.0111 11.4789 12.0715 11.7477L12.9059 15.4924L9.76029 13.5122C9.53186 13.368 9.26955 13.2918 9.00209 13.2918C8.73463 13.2918 8.47233 13.368 8.24389 13.5122L5.09827 15.4924L5.93266 11.7477C5.99312 11.4789 5.98177 11.1981 5.89981 10.9355C5.81784 10.6729 5.66838 10.4384 5.46748 10.2572L2.67715 7.73418L6.35022 7.40466C6.6162 7.38105 6.87083 7.28228 7.08641 7.11908C7.30199 6.95589 7.47024 6.73454 7.57286 6.47911L9.00209 2.94927L10.4313 6.47911C10.5339 6.73454 10.7022 6.95589 10.9178 7.11908C11.1333 7.28228 11.388 7.38105 11.654 7.40466L15.327 7.73418L12.5367 10.2572Z" fill="#80B31E"/>
                </svg>
                :
                <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M9 14.737L13.1224 17.3458C13.8773 17.824 14.8011 17.1172 14.6025 16.2233L13.5098 11.3174L17.1554 8.01216C17.8209 7.40932 17.4633 6.26599 16.5891 6.19324L11.7913 5.76709L9.91388 1.13143C9.57614 0.289524 8.42386 0.289524 8.08612 1.13143L6.2087 5.75669L1.41085 6.18284C0.536712 6.2556 0.179108 7.39892 0.844648 8.00177L4.49022 11.307L3.39754 16.2129C3.19887 17.1068 4.12268 17.8136 4.87762 17.3355L9 14.737Z" fill="#80B31E"/>
                </svg>
            }
        </button>
    );
}

/**
 * A component of the “Favorites” button that toggles its state
 * between on and off when clicked.
 *
 * @component
 * @property {Object} props - Properties of the component.
 * @property {boolean} props.value - Current state of the button:
 * `true` - enabled (active icon), `false` - disabled (empty icon).
 * @property {function(boolean): void} props.setter - Function to change the state,
 * usually derived from React useState.
 */
FollowStar.propTypes = {
    value: PropTypes.bool,
    setter: PropTypes.func,
}

export default FollowStar;
</file>

<file path="frontend/src/components/Footer/footer.css">
/* overall style */
.footer {
    display: flex;
    background-color: var(--footer-bcg-color);
    padding: 32px 104px 48px;
    color: var(--alternative-text-color);
}

.footer--hr {
    display: none;
}

/* section contacts */

.contacts {
    font-weight: 400;
}

.contacts--logo {
    margin-bottom: 35px;
}

.contacts--link {
    display: flex;
    gap: 10px;
}

.contacts--info > :not(:last-child) {
    margin-bottom: 10px;
}

.contacts--info {
    margin-bottom: 32px;
}

.contacts--links > :not(:last-child) {
    margin-bottom: 14px;
}

/* section link-tree */

.link-tree {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.branch-list {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: end;
    gap: 35px;
}

.branch-list--branch {
    display: flex;
    flex-direction: column;
    gap: 14px;
}

.branch-list--title {
    font-weight: 700;
}

.branch-list--link-list {
    display: flex;
    gap: 24px;
}

.branch-list--item {
    font-weight: 400;
}

/* section dev-contact */

.dev-contact {
    display: flex;
    flex-direction: column;
    justify-content: end;
}

.dev-contact--list {
    display: flex;
    flex-direction: column;
    margin: 31px 0;
    color: var(--secondary-text-color);
    gap: 14px;
}

.dev-contact--copyright {
    font-weight: 300;
    line-height: 150%;
    height: 21px;
    font-size: 14px;
}

@media screen and (max-width: 1481px) {
    .footer {
        flex-direction: column;
        padding: 32px 24px;
    }

    .footer--hr {
        display: block;
        width: 100%;
        height: 1px;
        background-color: var(--alternative-text-color);
        margin: 32px 0;
    }

    .contacts {
        margin-bottom: 48px;
    }

    .contacts--content {
        display: flex;
        flex-direction: row;
    }

    .contacts--info {
        flex: 1;
        margin: 0;
    }

    .contacts--links {
        flex: 1;
    }

    .link-tree {
        align-items: normal;
    }

    .branch-list {
        flex-direction: row;
        justify-content: normal;
        gap: 0;
    }

    .branch-list--branch {
        flex: 1;
        gap: 24px;
    }

    .branch-list--link-list {
        flex-direction: column;
        gap: 24px;
    }

    .dev-contact {
        flex-direction: column-reverse;
    }

    .dev-contact--container {
        display: flex;
        margin-bottom: 32px;
    }

    .dev-contact--list {
        flex: 1;
        display: flex;
        flex-flow: row wrap;
        margin: 0;
        gap: 16px;
    }

    .dev-contact--copyright {
        align-self: center;
        margin-left: 102px;
    }
}

@media screen and (max-width: 646px) {
    .contacts--content {
        flex-direction: column;
        gap: 35px;
    }

    .dev-contact--container {
        flex-direction: column;
        gap: 32px;
    }

    .dev-contact--list {
        flex: 1;
        display: flex;
        flex-flow: column nowrap;
        margin: 0;
        gap: 16px;
    }

    .dev-contact--copyright {
        align-self: normal;
        margin-left: 0;
    }
}
</file>

<file path="frontend/src/components/Footer/footer.jsx">
import './footer.css';
import { Link } from 'react-router-dom';

/**
 * Footer component that renders the footer section of the application.
 * It includes contact information, a link tree for navigation,
 * and developer contact information.
 * @returns {JSX.Element}
 */
function Footer() {
    return (
        <footer className={'footer'}>
            <section className={'contacts'}>
                <div className={'contacts--logo'}>
                    <img
                        src="/pictures/svg/footer-logo.svg"
                        alt="Footer Logo"
                    />
                </div>
                <div className={'contacts--content'}>
                    <div className={'contacts--info'}>
                        <p>Львівська Політехніка</p>
                        <p>вул. Степана Бандери 12, Львів</p>
                    </div>
                    <div className={'contacts--links'}>
                        <a href={'mailto:qwerty@gmail.com'}
                            className={'contacts--link'}
                        >
                            <img src="/pictures/svg/mail.svg" alt="Mail" />
                            <p>qwerty@gmail.com</p>
                        </a>
                        <a href={'tel:+380502342323'}
                            className={'contacts--link'}
                        >
                            <img src="/pictures/svg/phone.svg" alt="Phone" />
                            <p>+38 050 234 23 23</p>
                        </a>
                    </div>
                </div>
            </section>
            <section className={'link-tree'}>
                <div className={'branch-list'}>
                    <div className={'branch-list--branch'}>
                        <h2 className={'branch-list--title'}>Підприємства</h2>
                        <div className={'branch-list--link-list'}>
                            <Link to={'/companies'} className={'branch-list--item'}>
                                <p>Компанії</p>
                            </Link>
                            <Link to={'/startups'} className={'branch-list--item'}>
                                <p>Стартапи</p>
                            </Link>
                        </div>
                    </div>
                    <div className={'branch-list--branch'}>
                        <h2 className={'branch-list--title'}>Сектори</h2>
                        <div className={'branch-list--link-list'}>
                            <Link to={'/manufacturers'} className={'branch-list--item'}>
                                <p>Виробники</p>
                            </Link>
                            <Link to={'/importers'} className={'branch-list--item'}>
                                <p>Імпортери</p>
                            </Link>
                            <Link to={'/retails'} className={'branch-list--item'}>
                                <p>Роздрібні мережі</p>
                            </Link>
                            <Link to={'/horeca'} className={'branch-list--item'}>
                                <p>HORECA</p>
                            </Link>
                            <Link to={'/other-services'} className={'branch-list--item'}>
                                <p>Інші послуги</p>
                            </Link>
                        </div>
                    </div>
                </div>
            </section>
            <hr className={'footer--hr'} />
            <section className={'dev-contact'}>
                <div>
                    <img
                        src="/pictures/svg/opentech-logo.svg"
                        alt="Dev-Company Logo"
                    />
                </div>
                <div className={'dev-contact--container'}>
                    <div className={'dev-contact--list'}>
                        <Link to={'/privacy-policy'}>
                            <p>Політика конфіденційності</p>
                        </Link>
                        <Link to={'/terms-of-use'}>
                            <p>Умови користування</p>
                        </Link>
                        <Link to={'/feedback'}>
                            <p>Зворотній звʼязок</p>
                        </Link>
                    </div>
                    <p className={'dev-contact--copyright'}>
                        Copyright 2023 Forum. All rights reserved.
                    </p>
                </div>
            </section>
        </footer>
    );
}

export default Footer;
</file>

<file path="frontend/src/components/GenericGrid/genericGrid.jsx">
import './genericGrid.css';
import PropTypes from "prop-types";
import clsx from 'clsx';

/**
 * Grid rule set
 *
 * @component
 * @param data - data to represent
 * @param expectedLength - expectedLenght of items to display
 * @param className - additional class style
 * @param renderItem - item to render
 * @returns {JSX.Element}
 *
 * @example
 * <GenericGrid
 *     data={data}
 *     expectedLength={4}
 *     className="participants--grid"
 *     renderItem={(item) => (
 *         <ParticipantCard
 *         key={item.uid}
 *         className="participants--grid-item"
 *         uid={item.uid}
 *         bcgImgSrc={item.bcgImgSrc}
 *         ppImgSrc={item.ppImgSrc}
 *         alt={item.alt}
 *         title={item.title}
 *         location={item.location}
 *         />
 *     )}
 * />
 */
function GenericGrid({ data, expectedLength, className, renderItem }) {
    let errorMessage = null;

    if (!data) {
        errorMessage = 'Не знайдено жодних даних. Перезавантажте сторінку або спробуйте пізніше...';
    } else if (data && data.length !== expectedLength) {
        errorMessage = 'Дані пошкоджено. Перезавантажте сторінку або спробуйте пізніше...';
    }

    return !errorMessage ? (
        <div className={clsx(className)}>
            {data?.map(renderItem)}
        </div>
    ) : (
        <p>{errorMessage}</p>
    );
}

GenericGrid.propTypes = {
    data: PropTypes.arrayOf(PropTypes.object).isRequired,
    expectedLength: PropTypes.number.isRequired,
    className: PropTypes.string.isRequired,
    renderItem: PropTypes.func.isRequired
};

export default GenericGrid;
</file>

<file path="frontend/src/components/Header/header.css">
/* overall style */
.header {
    display: flex;
    padding: 16px 104px;
    align-items: center;
    background-color: var(--header-bcg-color);
    color: var(--primary-text-color);
}

/* logo */
.header--logo {
    display: flex;
    gap: 10px;
}

.header--logo__disposal {
    display: block;
}

/* navigation */
.nav-panel {
    flex: 1;
    display: flex;
    justify-content: right;
    gap: 24px;
}

.nav-panel--set {
    display: flex;
    gap: 24px;
}

.nav-panel--search {
    width: 225px;
}

.nav-panel--link {
    display: flex;
    align-items: center;
    font-weight: 500;
}

.nav-panel--link > :not(:last-child) {
    margin-right: 6px;
}

.nav-panel--menu-btn {
    display: none;
    height: 40px;
    width: 40px;
    line-height: 0;
    user-select: none;
}

@media screen and (max-width: 1481px) {
    .header {
        padding: 16px 24px;
    }

    .nav-panel--set__disposal {
        display: none;
    }

    .nav-panel--menu-btn {
        display: block;
    }
}

@media screen and (max-width: 646px) {
    .header {
        padding: 16px;
    }

    .header--logo__disposal {
        display: none;
    }
}
</file>

<file path="frontend/src/components/Header/header.jsx">
import "./header.css";
import { Link, useNavigate } from 'react-router-dom';
import Search from "../Search/search";
import {useAuthContext} from "../../provider/AuthProvider/authProvider";
import PropTypes from 'prop-types';
import Button from '../Button/button';

/**
 * Header component
 * @param show - function to show the header
 * @param hide - function to hide the header
 * @param toggle - function to toggle the header visibility
 * @param visible - boolean indicating if the header is visible
 * @returns {JSX.Element}
 */
function Header({ show, hide, toggle, visible }) {
    const navigate = useNavigate();
    const { user } = useAuthContext();

    return (
        <header className={'header'}>
            <Link to={"/"} className={'header--logo'}>
                <img src="/pictures/svg/header-logo.svg" alt={'Logo'} />
                <img
                    src="/pictures/svg/header-logo-text.svg"
                    alt={'Logo text'}
                    className={'header--logo__disposal'}
                />
            </Link>
            <nav className={'nav-panel'}>
                <div className={'nav-panel--set nav-panel--set__disposal'}>
                    <Link to={'/who-we-are'} className={'link__underline nav-panel--link'}>
                        <p>Про нас</p>
                    </Link>
                    <Link to={'/companies'} className={'link__underline nav-panel--link'}>
                        <p>Підприємства та сектори</p>
                    </Link>
                    <Search className={'nav-panel--search'} />
                </div>
                {user ? (
                    <div className={'nav-panel--set'}>
                        <Link
                            to={'/profile/user/edit'}
                            className={'nav-panel--link'}
                        >
                            <img
                                src="/pictures/svg/avatar.svg"
                                alt={'User avatar'}
                            />
                            <p>Мій профіль</p>
                        </Link>
                    </div>
                ) : (
                    <div className={'nav-panel--set'}>
                        <Link to={'/auth/login'} className={'link__underline nav-panel--link'}>
                            <p>Увійти</p>
                        </Link>
                        <Button className={"button__padding"}
                                onClick={() => navigate('/auth/register')}>
                            Зареєструватися
                        </Button>
                    </div>
                )}
                <Button variant="outline"
                        className={"nav-panel--menu-btn"}
                        onClick={toggle}>
                    {
                        !visible
                            ? (
                                <svg width="30" height="28" viewBox="0 0 30 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M0 0.666626H30V3.99996H0V0.666626ZM0 12.3333H30V15.6666H0V12.3333ZM0 24H30V27.3333H0V24Z" fill="black"/>
                                </svg>
                            )
                            : (
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M23.6673 2.68337L21.3173 0.333374L12.0007 9.65004L2.68398 0.333374L0.333984 2.68337L9.65065 12L0.333984 21.3167L2.68398 23.6667L12.0007 14.35L21.3173 23.6667L23.6673 21.3167L14.3507 12L23.6673 2.68337Z" fill="#767676"/>
                                </svg>
                            )
                    }
                </Button>
            </nav>
        </header>
    );
}

/**
 * PropTypes for Header component
 * @property {function} show - Function to show the header
 * @property {function} hide - Function to hide the header
 * @property {function} toggle - Function to toggle the header visibility
 * @property {boolean} visible - Boolean indicating if the header is visible
 */
Header.porpTypes = {
    show: PropTypes.func.isRequired,
    hide: PropTypes.func.isRequired,
    toggle: PropTypes.func.isRequired,
    visible: PropTypes.bool.isRequired
};

export default Header;
</file>

<file path="frontend/src/components/HiddenInput/hiddenInput.css">
.hidden-field {
    position: relative;
    align-content: center;
}

.hidden-input {
    padding: calc(10 - 1px) 30px calc(10 - 1px) 12px !important;
}

.toggle-hidden {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    height: 14px;
    width: 14px;
    cursor: pointer;
}

.toggle-hidden svg {
    margin: auto;
}
</file>

<file path="frontend/src/components/HiddenInput/hiddenInput.jsx">
import './hiddenInput.css';
import {useRef, useState} from 'react';
import PropTypes from 'prop-types';

/**
 * HiddenInput component
 * This component renders a password input field that can toggle between showing and hiding the password.
 * It also includes a toggle button to switch between text and password visibility.
 * @param name - the name of the input field
 * @param autoComplete - the autocomplete attribute for the input field
 * @param autoCorrect - the autocorrect attribute for the input field
 * @param spellCheck - the spellcheck attribute for the input field
 * @param placeholder - the placeholder text for the input field
 * @param value - the value of the input field
 * @param onChange - the function to call when the input value changes
 * @param className - additional CSS classes to apply to the input field
 * @returns {JSX.Element}
 */
function HiddenInput({
                         name='',
                         autoComplete="off",
                         autoCorrect="off",
                         spellCheck="false",
                         placeholder = '',
                         value= '',
                         onChange = () => {},
                         className = ''
                     }) {
    const fieldRef = useRef(null);
    const [show, setShow] = useState(false);

    const togglePassword = () => {
        const input = fieldRef.current;

        if (input) {
            const start = input.selectionStart;
            const end = input.selectionEnd;

            setShow(prev => !prev);

            setTimeout(() => {
                input.focus();
                input.setSelectionRange(start, end);
            }, 0);
        }
    };

    return (
        <div className={'hidden-field'}>
            <input
                ref={fieldRef}
                type={show ? "text" : "password"}
                name={name}
                autoComplete={autoComplete}
                autoCorrect={autoCorrect}
                spellCheck={spellCheck}
                value={value}
                placeholder={placeholder}
                onChange={onChange}
                className={`input input-text input__width hidden-input ${className}`}
            />
            <div
                className="toggle-hidden"
                onClick={togglePassword}
                onMouseDown={(e) => e.preventDefault()}
                onKeyDown={togglePassword}
            >
                {show ?
                    <>
                        <svg width="14" height="14" viewBox="0 0 12 10" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M11.8817 4.64727C10.5856 1.91699 8.62639 0.542969 6.00002 0.542969C3.37228 0.542969 1.41447 1.91699 0.118377 4.64863C0.0663905 4.75871 0.0394287 4.87894 0.0394287 5.00068C0.0394287 5.12242 0.0663905 5.24265 0.118377 5.35273C1.41447 8.08301 3.37365 9.45703 6.00002 9.45703C8.62775 9.45703 10.5856 8.08301 11.8817 5.35137C11.9869 5.12988 11.9869 4.87285 11.8817 4.64727ZM6.00002 8.47266C3.79474 8.47266 2.1801 7.3543 1.04123 5C2.1801 2.6457 3.79474 1.52734 6.00002 1.52734C8.20529 1.52734 9.81994 2.6457 10.9588 5C9.82131 7.3543 8.20666 8.47266 6.00002 8.47266Z" fill="#989FA6"/>
                            <path d="M5.9453 2.59375C4.61639 2.59375 3.53905 3.67109 3.53905 5C3.53905 6.32891 4.61639 7.40625 5.9453 7.40625C7.27421 7.40625 8.35155 6.32891 8.35155 5C8.35155 3.67109 7.27421 2.59375 5.9453 2.59375ZM5.9453 6.53125C5.09901 6.53125 4.41405 5.84629 4.41405 5C4.41405 4.15371 5.09901 3.46875 5.9453 3.46875C6.79159 3.46875 7.47655 4.15371 7.47655 5C7.47655 5.84629 6.79159 6.53125 5.9453 6.53125Z" fill="#989FA6"/>
                        </svg>
                    </> :
                    <>
                        <svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M13.722 6.59537C13.1727 5.43819 12.519 4.49443 11.761 3.76412L10.966 4.55912C11.6143 5.17865 12.179 5.98912 12.6673 6.9985C11.3673 9.68912 9.52197 10.9672 7.00009 10.9672C6.24311 10.9672 5.54587 10.8507 4.90837 10.6176L4.04697 11.479C4.93238 11.8878 5.91676 12.0922 7.00009 12.0922C10.0032 12.0922 12.2438 10.5282 13.722 7.40006C13.7814 7.27426 13.8122 7.13685 13.8122 6.99772C13.8122 6.85858 13.7814 6.72118 13.722 6.59537ZM12.7287 1.58537L12.0626 0.918497C12.051 0.906875 12.0372 0.897655 12.022 0.891364C12.0068 0.885074 11.9906 0.881836 11.9742 0.881836C11.9577 0.881836 11.9415 0.885074 11.9263 0.891364C11.9111 0.897655 11.8973 0.906875 11.8857 0.918497L10.1768 2.62662C9.23462 2.14537 8.17571 1.90475 7.00009 1.90475C3.99697 1.90475 1.75634 3.46881 0.278215 6.59693C0.218802 6.72274 0.187988 6.86015 0.187988 6.99928C0.187988 7.13841 0.218802 7.27582 0.278215 7.40162C0.868736 8.64537 1.57967 9.6423 2.41103 10.3924L0.75759 12.0454C0.734166 12.0688 0.721008 12.1006 0.721008 12.1337C0.721008 12.1669 0.734166 12.1987 0.75759 12.2221L1.42462 12.8891C1.44806 12.9125 1.47984 12.9257 1.51298 12.9257C1.54612 12.9257 1.5779 12.9125 1.60134 12.8891L12.7287 1.76225C12.7403 1.75064 12.7495 1.73685 12.7558 1.72168C12.7621 1.7065 12.7653 1.69024 12.7653 1.67381C12.7653 1.65738 12.7621 1.64112 12.7558 1.62594C12.7495 1.61077 12.7403 1.59698 12.7287 1.58537ZM1.3329 6.9985C2.63447 4.30787 4.47978 3.02975 7.00009 3.02975C7.85228 3.02975 8.62712 3.176 9.33009 3.47334L8.23165 4.57178C7.71145 4.29422 7.1158 4.19121 6.5326 4.27794C5.94939 4.36468 5.4095 4.63656 4.99258 5.05348C4.57565 5.47041 4.30377 6.0103 4.21704 6.59351C4.1303 7.17671 4.23331 7.77235 4.51087 8.29256L3.20743 9.596C2.48603 8.95928 1.86415 8.09662 1.3329 6.9985ZM5.18759 6.9985C5.18786 6.72297 5.25313 6.4514 5.37808 6.20584C5.50303 5.96027 5.68414 5.74765 5.9067 5.58523C6.12926 5.42281 6.387 5.31519 6.65898 5.27109C6.93095 5.227 7.20949 5.24769 7.47197 5.33147L5.27056 7.53287C5.21538 7.36012 5.18739 7.17985 5.18759 6.9985Z" fill="#989FA6"/>
                            <path d="M6.93786 8.75109C6.8838 8.75109 6.83052 8.74859 6.7777 8.74375L5.95239 9.56906C6.44878 9.75916 6.98961 9.80141 7.5095 9.69069C8.02939 9.57997 8.50608 9.32103 8.88194 8.94517C9.2578 8.56931 9.51674 8.09262 9.62746 7.57273C9.73818 7.05285 9.69593 6.51202 9.50583 6.01562L8.68052 6.84094C8.68536 6.89375 8.68786 6.94703 8.68786 7.00109C8.68798 7.23094 8.6428 7.45856 8.5549 7.67094C8.467 7.88331 8.3381 8.07628 8.17557 8.23881C8.01305 8.40133 7.82008 8.53023 7.6077 8.61813C7.39533 8.70604 7.16771 8.75122 6.93786 8.75109Z" fill="#989FA6"/>
                        </svg>
                    </>
                }
            </div>
        </div>
    );
}

/**
 * HiddenInput component
 * This component renders a password input field that can toggle between showing and hiding the password.
 * It also includes a toggle button to switch between text and password visibility.
 * @param name - the name of the input field
 * @param autoComplete - the autocomplete attribute for the input field
 * @param autoCorrect - the autocorrect attribute for the input field
 * @param spellCheck - the spellcheck attribute for the input field
 * @param placeholder - the placeholder text for the input field
 * @param value - the value of the input field
 * @param onChange - the function to call when the input value changes
 * @param className - additional CSS classes to apply to the input field
 */
HiddenInput.propTypes = {
    name: PropTypes.string,
    autoComplete: PropTypes.string,
    autoCorrect: PropTypes.string,
    spellCheck: PropTypes.string,
    placeholder: PropTypes.string,
    value: PropTypes.string,
    onChange: PropTypes.func,
    className: PropTypes.string
}

export default HiddenInput;
</file>

<file path="frontend/src/components/Image/image.css">
.image-container {
    width: 100%;
    height: 100%;
    position: relative;
    overflow: hidden;
}

.main-image,
.pattern-fallback {
    width: 100%;
    height: 100%;
    object-fit: none;
    display: block;
}

.pattern-fallback {
    background-repeat: repeat;
    background-size: 50px 50px;
    background-image: url(../../../public/pictures/svg/img-fallback.svg);
}
</file>

<file path="frontend/src/components/Image/image.jsx">
import './image.css';
import { useState } from 'react';
import PropTypes from 'prop-types';
import clsx from 'clsx';

/**
 * Image component that displays an image with a fallback pattern
 * in case the image fails to load.
 * It uses a state variable to track if the image has encountered an error.
 * If the image fails to load, it displays a fallback pattern instead.
 * @param src - The source URL of the image to display.
 * @param alt - The alt text for the image, used for accessibility.
 * @param className - Additional CSS classes to apply to the image container.
 * @returns {JSX.Element}
 */
function Image({ src, alt, className }) {
    const [hasError, setHasError] = useState(false);

    return (
        <div className={'image-container'}>
            {!hasError && src !== '' && src !== null && src !== undefined ? (
                <img
                    src={src}
                    alt={alt}
                    onError={() => setHasError(true)}
                    className={`main-image ${className || ""}`}
                />
            ) : (
                <div className={clsx('pattern-fallback', className)} />
            )}
        </div>
    );
}

/**
 * Image component that displays an image with a fallback pattern
 * in case the image fails to load.
 * It uses a state variable to track if the image has encountered an error.
 * If the image fails to load, it displays a fallback pattern instead.
 * @param src - The source URL of the image to display.
 * @param alt - The alt text for the image, used for accessibility.
 * @param className - Additional CSS classes to apply to the image container.
 */
Image.propTypes = {
    src: PropTypes.string.isRequired,
    alt: PropTypes.string.isRequired,
    className: PropTypes.string
}

export default Image;
</file>

<file path="frontend/src/components/Layout/layout.jsx">
import { Outlet } from 'react-router-dom';
import Footer from '../Footer/footer';
import Header from '../Header/header';
import Sidebar from '../Sidebar/sidebar';
import { useState } from 'react';

/**
 * Layout component that wraps the main content with Header, Sidebar, and Footer.
 * It manages the visibility of the sidebar using state.
 * The `Header` component provides methods to show, hide, and toggle sidebar.
 * The `Sidebar` component is displayed based on the visibility state.
 * The `Outlet` component renders the child routes within the main content area.
 * This component is used to create a consistent layout across different pages of the application.
 * It allows for a responsive design where the sidebar can be toggled on smaller screens.
 * The useState hook is used to manage the sidebar's visibility state.
 */
function Layout() {
    /* Sidebar variables */
    const [dimmerActive, setDimmerActive] = useState(false);
    const showSidebar = () => setDimmerActive(true);
    const hideSidebar = () => setDimmerActive(false);
    const toggleSidebar = () => setDimmerActive(v => !v);

    return (
        <>
            <Header show={showSidebar} hide={hideSidebar} toggle={toggleSidebar} visible={dimmerActive} />
            <Sidebar show={showSidebar} hide={hideSidebar} toggle={toggleSidebar} visible={dimmerActive}>
                <main>
                    <Outlet />
                </main>
                <Footer />
            </Sidebar>
        </>
    );
}

export default Layout;
</file>

<file path="frontend/src/components/Loading/loading.css">
.loading-container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 12px;
    flex-flow: row nowrap;
}

.loading-dot {
    height: 6px;
    width: 32px;
    min-height: 6px;
    min-width: 32px;
    max-height: 6px;
    max-width: 32px;
    border-radius: 2px;
    transition: all var(--animation-normal) ease;
    transform: scale(1);
    background-color: var(--loading-dot-inactive-color);
}

.loading-dot__active {
    background-color: var(--loading-dot-active-color);
    transform: scale(1.1);
}
</file>

<file path="frontend/src/components/Loading/loading.jsx">
import './loading.css';
import { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import clsx from 'clsx';

/**
 * Loading component that displays a loading animation with dots.
 * The number of dots can be customized via the `quantity` prop.
 * The dots animate in a sequence, creating a loading effect.
 * @param quantity - The number of dots to display in the loading animation.
 * @param className - Additional class style
 * @returns {JSX.Element}
 */
function Loading({ quantity = 4, className }) {
    const [dots, setDots] = useState(Array(quantity).fill(false));

    useEffect(() => {
        let index = 0;

        const interval = setInterval(() => {
            setDots(() => {
                const newDots = Array(quantity).fill(false);
                newDots[index] = true;
                return newDots;
            });

            index = (index + 1) % quantity;
        }, 300);

        return () => clearInterval(interval);
    }, [quantity]);

    return (
        <div className={clsx('loading-container', className)}>
            {dots.map((isActive, i) => (
                <div key={i} className={`loading-dot ${isActive ? 'loading-dot__active' : ''}`}></div>
            ))}
        </div>
    );
}

/**
 * PropTypes for the Loading component.
 * @type {{quantity: number}}
 */
Loading.propTypes = {
    quantity: PropTypes.number,
};

export default Loading;
</file>

<file path="frontend/src/components/ParticipantCard/participantCard.css">
.participant-card {
    position: relative;
    display: flex;
    flex-direction: column;
    box-shadow: 0 0 2px 0 rgba(65, 64, 69, 0.2);
    width: 302px;
    border-radius: 12px;
}

.participant-card--background {
    position: relative;
    height: 188px;
    overflow: hidden;
}

.participant-card--updated {
    position: absolute;
    padding: 4px 6px;
    text-transform: uppercase;
    top: 13px;
    left: 12px;
    font-size: 10px;
    line-height: 16px;
    background-color: var(--participant-updated-color);
    font-weight: 600;
    border-radius: 4px;
}

.participant-card--background,
.participant-card--background-image {
    border-radius: 12px 12px 0 0;
}

.participant-card--info {
    flex: 1;
    border-radius: 0 0 12px 12px;
    display: flex;
    flex-direction: column;
    background-color: var(--participant-card-color);
    padding: 16px;
    transition: all var(--animation-fast) ease;
}

.participant-card:hover .participant-card--info {
    background-color: var(--participant-card-color-hover);
}

.participant-card--other-services {
    color: var(--other-services-color);
    font-size: 14px;
    font-weight: 700;
    line-height: 120%;
    margin-bottom: 16px;
}

.participant-card--text-container {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.participant-card--title {
    flex: 1;
    font-size: 20px;
    font-weight: 700;
    line-height: 120%;
}

.participant-card--location {
    line-height: 20px;
    font-size: 14px;
    margin-bottom: 16px;
}

.participant-card--services-btn {
    line-height: 16px;
    font-size: 10px;
    font-weight: 600;
    border-radius: 16px;
    padding: 3px 8px 2px 8px;
    text-transform: uppercase;
}

.participant-card--picture {
    position: absolute;
    top: 188px;
    transform: translateY(-40%);
    right: 16px;
    height: 50px;
    width: 50px;
    background-color: var(--profile-picture-bg-color);
    border-radius: 50%;
    border: 1px var(--profile-picture-border-color) solid;
    box-shadow: 0 0 2px 0 rgba(65, 64, 69, 0.2);
}

.participant-card--picture-image {
    border-radius: 50%;
}

.participant-card--nav-menu {
    display: flex;
    justify-content: space-between
}
</file>

<file path="frontend/src/components/ParticipantCard/participantCard.jsx">
import './participantCard.css';
import Image from '../Image/image';
import { Link, useNavigate } from 'react-router-dom';
import Button from '../Button/button';
import { useState } from 'react';
import { useAuthContext } from '../../provider/AuthProvider/authProvider';
import FollowStar from '../FollowStar/followStar';
import PropTypes from 'prop-types';
import clsx from 'clsx';

/**
 * ParticipantCard component
 *
 * Displays a participant/company card with a background image, profile picture,
 * title, location, and optional follow button. Can also show a "recently updated"
 * badge if applicable. Clicking on the background, profile picture, or title
 * navigates to the participant's company profile page.
 *
 * @component
 * @param {Object} props - Component props.
 * @param {string} props.bcgImgSrc - URL of the background image.
 * @param {string} props.ppImgSrc - URL of the profile picture.
 * @param {string} props.alt - Alt text for images.
 * @param {string} props.title - Name/title of the participant.
 * @param {string} props.location - Location of the participant.
 * @param {string|number} props.uid - Unique ID for building the company profile link.
 * @param {string} [props.className] - Additional CSS classes for the card container.
 * @param {boolean} [props.followed] - Whether the user has kept the card.
 * @param {boolean} [props.recentlyUpdated] - Whether the participant was recently updated.
 *
 * @example
 * <ParticipantCard
 *   bcgImgSrc="/images/bg.jpg"
 *   ppImgSrc="/images/profile.jpg"
 *   alt="Company name"
 *   title="My Company"
 *   location="New York"
 *   uid="12345"
 *   followed={true}
 *   recentlyUpdated={true}
 * />
 */
function ParticipantCard({bcgImgSrc, ppImgSrc, alt, title, location, uid, className, followed, recentlyUpdated}) {
    const { user } = useAuthContext();
    const [isFollowed, setFollow] = useState(!!followed);
    const navigate = useNavigate();
    const isRecentlyUpdated = !!recentlyUpdated;
    const companyLink = `/profile/company/${uid}`;

    return (
        <div className={clsx('participant-card', className)}>
            <Link to={companyLink} className={'participant-card--background'} tabIndex={-1}>
                <Image
                    src={bcgImgSrc}
                    alt={alt}
                    className={'participant-card--background-image'}
                />
                {isRecentlyUpdated && <p className={'participant-card--updated'}>Оновлено</p>}
            </Link>
            <Link to={companyLink} className={'participant-card--picture'} tabIndex={-1}>
                <Image
                    src={ppImgSrc}
                    alt={alt}
                    className={'participant-card--picture-image'}
                />
            </Link>
            <div className={'participant-card--info'}>
                <div className={'participant-card--other-services'}>
                    <Link to={companyLink}>
                        <span>Інші послуги</span>
                    </Link>
                </div>
                <div className={'participant-card--text-container'}>
                    <h3 className={'participant-card--title'}>
                        <Link to={companyLink}>
                            <span>{title}</span>
                        </Link>
                    </h3>
                    <p className={'participant-card--location'}>{location && "Локація не знайдена"}</p>
                </div>
                <div className={'participant-card--nav-menu'}>
                    <div>
                        <Button
                            className={'participant-card--services-btn'}
                            onClick={() => navigate(companyLink)}
                        >
                            Послуги
                        </Button>
                    </div>
                    {user && (
                        <FollowStar participantId={uid} value={isFollowed} setter={setFollow} />
                    )}
                </div>
            </div>
        </div>
    );
}

ParticipantCard.propTypes = {
    bcgImgSrc: PropTypes.string.isRequired,
    ppImgSrc: PropTypes.string.isRequired,
    alt: PropTypes.string.isRequired,
    title: PropTypes.string.isRequired,
    location: PropTypes.string.isRequired,
    uid: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
    className: PropTypes.string,
    followed: PropTypes.bool,
    recentlyUpdated: PropTypes.bool
};

export default ParticipantCard;
</file>

<file path="frontend/src/components/RequireAuth/requireAuth.jsx">
import './requireAuth.css';
import { Navigate, useLocation } from "react-router-dom";

function RequireAuth({ children }) {
    const user = localStorage.getItem("refresh_token");
    const location = useLocation();

    if (!user) {
        return <Navigate to="/auth/login" state={{ from: location }} replace />;
    }

    return children;
}

export default RequireAuth;
</file>

<file path="frontend/src/components/Search/search.css">
.search {
    display: flex;
    flex-flow: row nowrap;
}

.search--input {
    width: 100%;
    border: 1px solid #AAAAAA;
    border-radius: 4px 0 0 4px;
    padding: calc(10px - 1px) 12px;
    font-weight: 300;
    font-size: 16px;
    font-family: var(--text-font), sans-serif;
    line-height: 20px;
}

.search--button {
    border: 1px solid #AAAAAA !important;
    border-left: 0 !important;
    border-radius: 0 4px 4px 0 !important;
    padding: 11px 11px 11px 12px;
    line-height: 0;
}
</file>

<file path="frontend/src/components/Search/search.jsx">
import "./search.css";
import PropTypes from 'prop-types';
import Button from '../Button/button';
import clsx from 'clsx';

/**
 * Search component
 */
function Search({ className }) {
    return (
        <div className={clsx('search', className)}>
            <input placeholder={"Пошук"}
                   className={"search--input"}
            />
            <Button variant="secondary" className={"search--button"}>
                <img src={"/pictures/svg/loupe.svg"} alt={"Search"}/>
            </Button>
        </div>
    );
}

/**
 * PropTypes for Search component
 * @type {{className: string}}
 */
Search.propTypes = {
    className: PropTypes.string,
};

export default Search;
</file>

<file path="frontend/src/components/Sidebar/sidebar.css">
.sidebar-wrapper {
    display: flex;
    flex-flow: column nowrap;
    position: relative;
    width: 100%;
    height: 100%;
}

.sidebar--hr {
    padding: 0;
    margin: 0;
    border: 1px solid var(--light-gray-hr-color);
}

.sidebar--menu {
    display: flex;
    flex-direction: column;
    background-color: var(--header-bcg-color);
    padding: 32px 24px;
    gap: 24px;
}

.sidebar--link {
    padding: 6px 12px;
}

.sidebar--search {
    width: 100%;
}
</file>

<file path="frontend/src/components/Sidebar/sidebar.jsx">
import './sidebar.css';
import Dimmer from '../Dimmer/dimmer';
import Search from '../Search/search';
import { Link } from 'react-router-dom';
import { useEffect } from 'react';
import PropTypes from 'prop-types';

/**
 * Sidebar component
 * @param show - function to show the sidebar
 * @param hide - function to hide the sidebar
 * @param toggle - function to toggle the sidebar visibility
 * @param visible - boolean indicating if the sidebar is visible
 * @param children - children elements to be rendered inside the sidebar
 * @returns {JSX.Element}
 */
function Sidebar({ show, hide, toggle, visible, children }) {
    useEffect(() => {
        const handleKeyDown = (e) => {
            if (e.key === 'Escape' && visible) {
            }
        }

        if (visible) {
            window.addEventListener("keydown", handleKeyDown);
        }

        return () => {
            window.removeEventListener("keydown", handleKeyDown);
        };
    }, [visible, hide]);

    return (
        <div className={"sidebar-wrapper"}>
            <Dimmer isActive={visible} hideDimmer={hide}>
                <div
                    role="dialog"
                    aria-modal="true"
                    aria-hidden={!visible}
                    aria-labelledby="sidebar-title"
                    onClick={(e) => e.stopPropagation()}
                >
                    <hr className={"sidebar--hr"} />
                    <div className={"sidebar--menu"}>
                        <h2 id="sidebar-title" className="visually-hidden">Меню сайдбара</h2>
                        <Search width={'100%'} />
                        <Link to={"/who-we-are"} className={"sidebar--link"}>
                            <p>Про нас</p>
                        </Link>
                        <Link to={"/companies"} className={"sidebar--link"}>
                            <p>Підприємства та сектори</p>
                        </Link>
                    </div>
                </div>
            </Dimmer>
            {children}
        </div>
    );
}

/**
 * PropTypes for Header component
 * @property {function} show - Function to show the header
 * @property {function} hide - Function to hide the header
 * @property {function} toggle - Function to toggle the header visibility
 * @property {boolean} visible - Boolean indicating if the header is visible
 */
Sidebar.porpTypes = {
    show: PropTypes.func.isRequired,
    hide: PropTypes.func.isRequired,
    toggle: PropTypes.func.isRequired,
    visible: PropTypes.bool.isRequired
};

export default Sidebar;
</file>

<file path="frontend/src/components/TextInput/textInput.css">
.input {
    width: 100%;
    border: 1px solid var(--input-border-color-active);
    padding: calc(10px - 1px) 12px;
    font-weight: 300;
    font-size: 16px;
    font-family: var(--text-font), sans-serif;
    line-height: 20px;
}

.input-text {
    border-radius: 4px;
    font-size: 14px;
}

.input__width {
    width: calc(100% - 12px * 2);
}

.input__error-border-color {
    border-color: var(--input-border-color-red);
}
</file>

<file path="frontend/src/components/TextInput/textInput.jsx">
import './textInput.css';
import PropTypes from 'prop-types';
import clsx from 'clsx';

/**
 * TextInput component to render a styled text input field.
 * It allows customization of attributes such as name, autocomplete, autocorrect,
 * spellcheck, placeholder, value, and onChange handler.
 * It also accepts a className for additional styling.
 * @param name - The name attribute for the input field, used for form submission.
 * @param autoComplete - The autocomplete attribute for the input field, typically set to "off" to disable browser suggestions.
 * @param autoCorrect - The autocorrect attribute for the input field, typically set to "off" to disable autocorrection.
 * @param spellCheck - The spellcheck attribute for the input field, typically set to "false" to disable spell checking.
 * @param placeholder - The placeholder text displayed in the input field when it is empty, providing a hint to the user about what to enter.
 * @param value - The current value of the input field, used to control the input's state.
 * @param onChange - The function to call when the input value changes, typically used to update the state in a parent component.
 * @param className - Additional CSS classes to apply to the input field for custom styling.
 * @returns {JSX.Element}
 */
function TextInput({
                       name='',
                       autoComplete="off",
                       autoCorrect="off",
                       spellCheck="false",
                       placeholder = '',
                       value= '',
                       onChange = () => {},
                       className = ''
               }) {

    return (
        <input
            type="text"
            name={name}
            autoComplete={autoComplete}
            autoCorrect={autoCorrect}
            spellCheck={spellCheck}
            placeholder={placeholder}
            value={value}
            onChange={onChange}
            className={clsx('input', 'input-text', 'input__width', className)}
        />
    );
}

/**
 * PropTypes for TextInput component.
 * This defines the expected types for each prop passed to the TextInput component.
 * It helps in validating the props and ensuring that the component receives the correct data types.
 * @param name - The name attribute for the input field, used for form submission.
 * @param autoComplete - The autocomplete attribute for the input field, typically set to "off" to disable browser suggestions.
 * @param autoCorrect - The autocorrect attribute for the input field, typically set to "off" to disable autocorrection.
 * @param spellCheck - The spellcheck attribute for the input field, typically set to "false" to disable spell checking.
 * @param placeholder - The placeholder text displayed in the input field when it is empty, providing a hint to the user about what to enter.
 * @param value - The current value of the input field, used to control the input's state.
 * @param onChange - The function to call when the input value changes, typically used to update the state in a parent component.
 * @param className - Additional CSS classes to apply to the input field for custom styling.
 */
TextInput.propTypes = {
    name: PropTypes.string,
    autoComplete: PropTypes.string,
    autoCorrect: PropTypes.string,
    spellCheck: PropTypes.string,
    placeholder: PropTypes.string,
    value: PropTypes.string,
    onChange: PropTypes.func,
    className: PropTypes.string
}

export default TextInput;
</file>

<file path="frontend/src/css/aria.css">
.visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}
</file>

<file path="frontend/src/css/link.css">
a {
    color: inherit;
    text-decoration: none;
}

a:disabled,
Link:disabled {
    color: var(--link-btn-text-color-inactive);
    text-decoration: none;
}

.link__underline {
    position: relative;
}

.link__underline::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
    width: 100%;
    height: 2px;
    background-color: var(--link-btn-text-color-active);
    transform: scaleX(0);
    transform-origin: left;
    transition: transform var(--animation-normal) ease;
}

.link__underline:hover::after {
    transform: scaleX(1);
}

.link__underline:disabled::after {
    background-color: var(--link-btn-text-color-inactive);
}

.link-right-arrow {
    position: relative;
    padding-right: calc(18px + 9px);
}

.link-right-arrow::after {
    content: " ";
    background-image: url('../../public/pictures/svg/arrow-right.svg');
    background-repeat: no-repeat;
    height: 18px;
    width: 18px;
    background-position: center;
    position: absolute;
    right: 0;
    top: 0;
    bottom: 0;
    display: flex;
    align-items: center;
    transition: transform 0.2s ease;
}

.link-right-arrow:hover::after {
    transform: translateX(4px);
}
</file>

<file path="frontend/src/css/main.css">
/* Main style node file */
@import 'variables.css';
@import 'reset.css';

@import 'link.css';
@import 'aria.css';
@import 'text.css';
</file>

<file path="frontend/src/css/reset.css">
/* Reset styles */
html,
body,
h1,
h2,
h3,
h4,
h5,
h6,
p,
span,
label,
a,
List{
    margin: 0;
    padding: 0;
    font-family: var(--text-font), sans-serif;
    font-size: 16px;
}

html,
body {
    height: 100%;
}

/* Chrome, Edge, Safari display “eyeballing” by default */
input::-ms-reveal,
input::-ms-clear {
    display: none;
}

input::-webkit-credentials-auto-fill-button {
    visibility: hidden;
    display: none !important;
    pointer-events: none;
    position: absolute;
    right: 0;
}

input::-webkit-textfield-decoration-container {
    display: none !important;
}
</file>

<file path="frontend/src/css/text.css">
.text-underline {
    text-decoration: underline;
}

.text-bold {
    font-weight: 600;
}
</file>

<file path="frontend/src/css/variables.css">
/* Style variables */
:root {
    /* text font */
    --text-font: 'Geologica';

    /* animation speed */
    --animation-fast: 0.15s;
    --animation-normal: 0.3s;
    --animation-slow: 0.6s;

    /* text colors  */
    --primary-text-color: #000;
    --secondary-text-color: #959595;
    --alternative-text-color: #fff;
    --danger-text-color: #F15831;
    --gray-text-color: #25292C;

    /* button colors */
    --primary-btn-bcg-color-active: #000;
    --primary-btn-bcg-color-hover: #292929;
    --primary-btn-bcg-color-inactive: #E5E5E5;
    --primary-btn-text-color-active: #fff;
    --primary-btn-text-color-inactive: #A1A1A1;

    --secondary-btn-bcg-color-active: #fff;
    --secondary-btn-bcg-color-hover: #F1E7D280;
    --secondary-btn-bcg-color-inactive: #EEEFF1;
    --secondary-btn-text-color-active: #000;
    --secondary-btn-text-color-inactive: #A1A1A1;

    --danger-btn-bcg-color-active: #E14E29;
    --danger-btn-bcg-color-hover: #F15831;
    --danger-btn-bcg-color-inactive: #E5E5E5;
    --danger-btn-text-color-active: #fff;
    --danger-btn-text-color-inactive: #A1A1A1;

    --link-btn-text-color-active: #000;
    --link-btn-text-color-inactive: #A1A1A1;

    /* background colors */
    --primary-bcg-color: #F9F5EC;
    --secondary-bcg-color: #fff;
    --green-bcg-color: #B4D27A;

    /* input colors */
    --input-border-color-active: #AAAAAA;
    --input-border-color-red: #F15831;

    /* checkbox colors */
    --checkbox-border-color-unmatched: #ADB3B9;
    --checkbox-border-color-red: #F15831;
    --checkbox-border-color-matched: #000;

    /* hr colors */
    --light-gray-hr-color: #EDEDED;
    --panel-hr-color: #F0F0F0;

    /* header */
    --yellow-bcg-color: #F9F5EC;
    --white-bcg-color: #FFF;
    --header-bcg-color: #fff;
    --footer-bcg-color: #232424;

    /* loading */
    --loading-dot-active-color: rgba(180, 210, 122, 0.75);
    --loading-dot-inactive-color: rgba(180, 210, 122, 0.3);

    /* home page */
    --benefits-panel-color: #F9F5EC;
    --for-whom-panel-color: #FFF;

    /* Participant card */

    --participant-card-color: #F9F5EC;
    --participant-card-color-hover: #EDE0C5;
    --other-services-color: #707070;

    --profile-picture-bg-color: #FFF;
    --profile-picture-border-color: #AAAAAA;

    --participant-updated-color: #B4D27A;

    /* Who we are page */
    --who-we-are-bcg-color: #F9F5EC;

}
</file>

<file path="frontend/src/pages/AuthorizationWrapper/authorizationWrapper.css">
.authorization-wrapper {
    display: flex;
    flex-flow: column nowrap;
    justify-content: center;
    align-items: center;
    height: 100%;
    background-color: var(--primary-bcg-color);
    font-size: 14px;
}
</file>

<file path="frontend/src/pages/AuthorizationWrapper/authorizationWrapper.jsx">
import "./authorizationWrapper.css";
import { Outlet } from 'react-router-dom';

/**
 * AuthorizationWrapper component
 * This component serves as a wrapper for authorization-related pages.
 * It uses React Router's Outlet to render nested routes.
 * @returns {JSX.Element}
 */
function AuthorizationWrapper() {
    return (
        <div className={"authorization-wrapper"}>
            <Outlet />
        </div>
    );
}

export default AuthorizationWrapper;
</file>

<file path="frontend/src/pages/CompanyList/companyList.jsx">
import './companyList.css';

/**
 * CompanyList component
 * @returns {JSX.Element}
 */
function CompanyList() {
    return (
        <></>
    );
}

export default CompanyList;
</file>

<file path="frontend/src/pages/EmailConfirmationHandler/emailConfirmationHandler.css">
.email-confirmation-handler {
    height: 100%;
}
</file>

<file path="frontend/src/pages/EmailConfirmationHandler/emailConfirmationHandler.jsx">
import './emailConfirmationHandler.css';
import {useNavigate, useParams} from 'react-router-dom';
import { useEffect, useRef, useState } from 'react';
import Loading from '../../components/Loading/loading';
import { useAuthContext } from '../../provider/AuthProvider/authProvider';

/**
 * Email confirmation handler
 * Display loading while processing information
 * Navigate to done if token is fine
 * Else navigate to error
 *
 * @component
 *
 * @returns {JSX.Element}
 */
function EmailConfirmationHandler() {
    const { user_id, token } = useParams();
    const navigate = useNavigate();
    const [status, setStatus] = useState('processing');
    const { confirmEmail } = useAuthContext();

    const didRun = useRef(false);
    useEffect(() => {
        if (didRun.current) return;
        didRun.current = true;

        if (token) {
            const id = Number(user_id);
            if (isNaN(id)) {
                setStatus("error");
            } else {
                confirmEmail(id, token)
                    .then(() => setStatus('success'))
                    .catch(() => setStatus('error'));
            }
        } else {
            setStatus('error');
        }
    }, [user_id, token, confirmEmail]);

    useEffect(() => {
        if (status === 'success') {
            navigate('/auth/register/user-confirmed');
        } else if (status === 'error') {
            navigate('/auth/register/error');
        }
    }, [status, navigate]);

    if (status === 'processing') {
        return <Loading className={'email-confirmation-handler'}/>;
    }
    
    return null;
}

export default EmailConfirmationHandler;
</file>

<file path="frontend/src/pages/FeedbackForm/feedbackForm.jsx">
import './feedbackForm.css';

/**
 * FeedbackForm component
 * @returns {JSX.Element}
 */
function FeedbackForm() {
    return (
        <></>
    );
}

export default FeedbackForm;
</file>

<file path="frontend/src/pages/Home/home.css">
.home {
    display: flex;
    flex-direction: column;
}

/* Container */

.home--container {
    display: flex;
    flex-direction: column;
    align-items: center;
    max-width: calc(1512px - 104px * 2);
    margin: 0 auto;
}

.home--container__direction-row {
    flex-direction: row;
}

.home--container__text-align-center {
    text-align: center;
}

.home--container__padding-wide {
    padding: 80px 104px;
}

.home--container__padding-narrow {
    padding: 32px 104px;
}

/* Section */

.home--section__green {
    background: var(--green-bcg-color);
}

.home--section__white {
    background: var(--white-bcg-color);
}

.home--section__yellow {
    background: var(--yellow-bcg-color);
}

/* Title */

.home--title {
    font-size: 40px;
    line-height: 120%;
    font-weight: 700;
}

/* Hero section */

.hero--title-container {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    margin-right: 63px;
}

.hero--logo-title {
    font-size: 48px;
    margin-bottom: 14px;
}

.hero--text-title {
    font-size: 40px;
    margin-bottom: 30px;
}

.hero--pictures {
    flex: 0 0 auto;
    text-align: center;
}

/* New participants */

.participants--title-container {
    display: flex;
    margin-bottom: 24px;
    width: 100%;
    align-items: center;
}

.participants--title__flex {
    flex: 1;
}

.participants--link {
    font-size: 16px;
    font-weight: 600;
    line-height: 120%;
    padding: 2px 0;
}

.participants--grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 32px;
    grid-auto-rows: 1fr;
}

.participants--grid-item {
    place-self: center;
    height: 100%;
}

/* Get involved */

.involve--title__max-width {
    max-width: 694px;
}

.involve--title__margin {
    margin-bottom: 24px;
}

.involve--button__padding {
    padding: 13px 37px;
}

/* Target section */

.target--title__margin {
    margin-bottom: 40px;
}

.target--grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 32px;
    grid-auto-rows: 1fr;
    width: 100%;
}

.target--grid-item {
    display: flex;
    gap: 18px;
    padding: 18px;
    background-color: var(--for-whom-panel-color);
    border-radius: 6px;
    align-items: center;
}

.target--grid-item-picture {
    width: 36px;
    height: 36px;
}

.target--grid-item-title {
    line-height: 140%;
    font-size: 16px;
    font-weight: 600;
}

/* Benefits section */

.benefits--grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 32px;
    grid-auto-rows: 1fr;
    width: 100%;
}

.benefits--grid-item {
    min-height: calc(164px - 32px * 2);
    background-color: var(--benefits-panel-color);
    border-radius: 6px;
    padding: 32px 24px;
}

.benefits--grid-item-title {
    font-size: 20px;
    line-height: 120%;
    font-weight: 700;
    margin-bottom: 16px;
}

.benefits--grid-item-title__margin {
    margin-bottom: 40px;
}

@media screen and (max-width: 1513px) {
    .home--container {
        max-width: calc(768px - 24px * 2);
    }

    .home--container__padding-wide {
        padding: 48px 24px;
    }

    .home--container__padding-narrow {
        padding: 32px 24px;
    }

    .hero--section {
        flex-direction: column-reverse;
    }

    .hero--title-container {
        margin-top: 40px;
        margin-right: 0;
        text-align: center;
        align-items: center;
    }

    .hero--logo-title {
        font-size: 40px;
    }

    .hero--text-title {
        font-size: 34px;
    }

    .participants--grid {
        grid-template-columns: repeat(2, 1fr);
        width: 100%;
    }

    .target--grid {
        grid-template-columns: repeat(2, 1fr);
    }

    .benefits--grid {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media screen and (max-width: 769px) {
    .home--container {
        max-width: calc(375px - 16px * 2);
    }

    .home--container__padding-wide {
        padding: 40px 16px;
    }

    .home--container__padding-narrow {
        padding: 32px 16px;
    }

    .hero--logo-title {
        font-size: 34px;
    }

    .hero--text-title {
        font-size: 24px;
    }

    .participants--grid {
        grid-template-columns: repeat(1, 1fr);
    }

    .participants--title__flex {
        font-size: 24px;
    }

    .target--grid-item {
        flex-direction: column;
        gap: 8px;
    }

    .target--grid-item-title {
        text-align: center;
        font-size: 14px;
    }

    .home--title {
        font-size: 24px;
    }

    .benefits--grid {
        grid-template-columns: repeat(1, 1fr);
    }
}
</file>

<file path="frontend/src/pages/NotFound/notFound.css">
.not-found {
    display: flex;
    background-color: var(--green-bcg-color);
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
}

.not-found--container {
    display: flex;
    flex-direction: row;
    color: var(--gray-text-color);
    margin: 120px 238px;
}

.not-found--title {
    font-size: 200px;
    font-weight: 600;
    margin-right: 80px;
}

.not-found--content {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.not-found--subtitle {
    font-size: 48px;
    font-weight: 700;
    margin-bottom: 16px;
}

.not-found--description {
    font-weight: 400;
    line-height: 20px;
    margin-bottom: 24px;
}

@media screen and (max-width: 1481px) {
    .not-found--container {
        flex-direction: column;
        align-items: center;
        margin: 104px 105px;
    }

    .not-found--title {
        margin-right: 0;
        margin-bottom: 34px;
    }

    .not-found--content {
        text-align: center;
    }
}

@media screen and (max-width: 646px) {
    .not-found--container {
        margin: 80px 16px;
    }

    .not-found--title {
        font-size: 84px;
        margin-bottom: 18px;
    }

    .not-found--subtitle {
        font-size: 34px;
    }
}
</file>

<file path="frontend/src/pages/NotFound/notFound.jsx">
import './notFound.css';
import { useNavigate } from 'react-router-dom';
import Button from '../../components/Button/button';

/**
 * NotFound component renders a 404 Not Found page.
 * It provides a message indicating that the requested page could not be found
 * and includes a button to navigate back to the home page.
 * @returns {JSX.Element}
 */
function NotFound() {
    const navigate = useNavigate();
    const returnToHomePage = () => {
        navigate('/');
    };

    return (
        <div className={'not-found'}>
            <section className={'not-found--container'}>
                <h1 className={"not-found--title"}>404</h1>
                <div className={"not-found--content"}>
                    <h2 className={"not-found--subtitle"}>Щось пішло не так</h2>
                    <p className={"not-found--description"}>
                        Схоже, це неправильна адреса, ця сторінка видалена,
                        перейменована або тимчасово недоступна.
                    </p>
                    <div>
                        <Button className={"button__padding"}
                                onClick={returnToHomePage}>
                            Повернутися на головну
                        </Button>
                    </div>
                </div>
            </section>
        </div>
    );
}

export default NotFound;
</file>

<file path="frontend/src/pages/Policy/policy.jsx">
import './policy.css';

/**
 * Policy component
 * @returns {JSX.Element}
 */
function Policy() {
    return (
        <></>
    );
}

export default Policy;
</file>

<file path="frontend/src/pages/ProfileEditing/profileEditing.jsx">
import './profileEditing.css';

/**
 * ProfileEditing component
 * @returns {JSX.Element}
 */
function ProfileEditing() {
    return (
        <></>
    );
}

export default ProfileEditing;
</file>

<file path="frontend/src/pages/ProfilePage/profilePage.jsx">
import './profilePage.css';

/**
 * ProfilePage component
 * @returns {JSX.Element}
 */
function ProfilePage() {
    return (
        <></>
    );
}

export default ProfilePage;
</file>

<file path="frontend/src/pages/RegistrationCompleted/registrationCompleted.jsx">
import { useNavigate } from 'react-router-dom';
import Panel, {
    PanelBody,
    PanelNavigation,
    PanelTitle,
} from '../../components/Panel/panel';
import Button from '../../components/Button/button';

/**
 * Registration page that informs
 * the user that registration is complete
 *
 * @component
 *
 * @returns {JSX.Element}
 */
function RegistrationCompleted() {
    // This component handles user registration
    const navigate = useNavigate();

    // Function to handle the submission
    function handleSubmit() {
        navigate("/");
    }

    return (
        <Panel className={"panel__margin-large"}
               aria-labelledby="registrationCompleted-title"
        >
            <PanelTitle
                id="registrationCompleted-title"
                aria-describedby="registrationCompleted-help"
            >Реєстрація завершена!</PanelTitle>
            <PanelBody>
                <div>
                    <p id="registrationCompleted-help"
                       className={"panel--font-size"}>
                        Ви успішно завершили реєстрацію
                    </p>
                </div>
            </PanelBody>
            <PanelNavigation>
                <Button
                    onClick={handleSubmit}
                    className={'button__padding panel--button'}
                    type="submit"
                >
                    Повернутися до входу
                </Button>
            </PanelNavigation>
        </Panel>
    );
}

export default RegistrationCompleted;
</file>

<file path="frontend/src/pages/RegistrationConfirmation/registrationConfirmation.jsx">
import "./registrationConfirmation.css";
import { useNavigate } from 'react-router-dom';
import Button from '../../components/Button/button';
import Panel, { PanelBody, PanelNavigation, PanelTitle } from '../../components/Panel/panel';

/**
 * Registration page that informs the user to
 * check their email to confirm their account
 *
 * @component
 *
 * @returns {JSX.Element}
 */
function RegistrationConfirmation() {
    // This component handles user registration
    const navigate = useNavigate();

    // Function to handle the return button click
    function handleReturn() {
        navigate("/");
    }

    // Function to handle the resend email button click
    function sendEmailAgain() {
        navigate("/auth/register/re-confirm");
    }

    return (
        <Panel className={"panel__margin-large"}
               aria-labelledby="registrationConfirmation-title"
        >
            <PanelTitle id="registrationConfirmation-title"
                        aria-describedby="registrationConfirmation-help1 registrationConfirmation-help2"
            >
                Реєстрація майже завершена
            </PanelTitle>
            <PanelBody>
                <div>
                    <p id="registrationConfirmation-help1"
                       className={"panel--font-size"}
                    >
                        На зазначену вами електронну пошту відправлено листа.
                    </p>
                    <p id="registrationConfirmation-help2"
                       className={"panel--font-size"}
                    >
                        Будь ласка, перейдіть за посиланням з листа
                        для підтвердження вказаної електронної адреси.
                    </p>
                </div>
                <div>
                    <span className={"panel--font-size"}>
                        Не отримали листа?
                    </span>
                    <Button variant='outline'
                            className={'panel--font-size text-underline text-bold'}
                            onClick={sendEmailAgain}
                    >
                        Надіслати ще раз
                    </Button>
                </div>
            </PanelBody>
            <PanelNavigation>
                <Button
                    onClick={handleReturn}
                    className={'button__padding panel--button'}
                    type="submit"
                >
                    Повернутися до входу
                </Button>
            </PanelNavigation>
        </Panel>
    );
}

export default RegistrationConfirmation;
</file>

<file path="frontend/src/pages/RegistrationError/registrationError.jsx">
import "./registrationError.css";
import { useNavigate } from 'react-router-dom';
import Button from '../../components/Button/button';
import Panel, { PanelBody, PanelNavigation, PanelTitle } from '../../components/Panel/panel';

function RegistrationError() {
    // This component handles user registration
    const navigate = useNavigate();

    // Function to handle form submission
    function handleSubmit() {
        navigate("/");
    }

    return (
        <Panel className={"panel__margin-large"}
               aria-labelledby="registrationError-title"
        >
            <PanelTitle id="registrationError-title"
                        aria-describedby="registrationError-help"
            >
                Помилка активації
            </PanelTitle>
            <PanelBody>
                <div>
                    <p id="registrationError-help" className={"panel--font-size"}>
                        Під час активації сталася помилка. Спробуйте ще раз або звʼяжіться з підтримкою.
                    </p>
                </div>
            </PanelBody>
            <PanelNavigation>
                <Button
                    onClick={handleSubmit}
                    className={'button__padding panel--button'}
                    type="submit"
                >
                    Повернутися до входу
                </Button>
            </PanelNavigation>
        </Panel>
    );
}

export default RegistrationError;
</file>

<file path="frontend/src/pages/RegistrationUserConfirmed/registrationUserConfirmed.jsx">
import "./registrationUserConfirmed.css";
import { useNavigate } from 'react-router-dom';
import Button from '../../components/Button/button';
import Panel, { PanelBody, PanelNavigation, PanelTitle } from '../../components/Panel/panel';

/**
 * A registration page that indicates that the
 * user has confirmed their email address
 *
 * @component
 *
 * @returns {JSX.Element}
 */
function RegistrationUserConfirmed() {
    // This component handles user registration
    const navigate = useNavigate();

    // Function to handle the submission of the registration form
    function handleSubmit() {
        navigate("/auth/register/user-represent");
    }

    return (
        <Panel aria-labelledby="registrationUserConfirmed-title"
               className={"panel__margin-large"}
        >
            <PanelTitle id="registrationUserConfirmed-title"
                        aria-describedby="registrationUserConfirmed-help"
            >
                Залишилось декілька кроків
            </PanelTitle>
            <PanelBody>
                <div>
                    <p id="registrationUserConfirmed-help"
                       className={"panel--font-size"}
                    >
                        Ви успішно підтвердили вказану електронну адресу.
                    </p>
                </div>
            </PanelBody>
            <PanelNavigation>
                <Button
                    onClick={handleSubmit}
                    className={'button__padding panel--button'}
                    type="submit"
                >
                    Продовжити реєстрацію
                </Button>
            </PanelNavigation>
        </Panel>
    );
}

export default RegistrationUserConfirmed;
</file>

<file path="frontend/src/pages/RestorePassword/restorePassword.jsx">
function RestorePassword() {
    return (
        <></>
    );
}

export default RestorePassword;
</file>

<file path="frontend/src/pages/RestorePasswordDone/restorePasswordDone.jsx">
import "./restorePasswordDone.css";

function RestorePasswordDone() {
    return <></>;
}

export default RestorePasswordDone;
</file>

<file path="frontend/src/pages/WhoWeAre/whoWeAre.css">
.who-we-are {
    background-color: var(--who-we-are-bcg-color);
    height: 100%;
}

.who-we-are__container {
    padding: 80px 102px;
    align-content: center;
    height: calc(100% - 80px * 2);
    max-width: calc(1512px - 102px * 2);
    margin: 0 auto;
}

.who-we-are__title {
    font-size: 40px;
    font-weight: 700;
    text-align: center;
    line-height: 120%;
    margin-bottom: 40px;
}

.who-we-are__content {
    display: flex;
    padding: 0 104px;
    gap: 32px;
}

.who-we-are__text {
    flex: 1;
    line-height: 24px;
}

.who-we-are__text--bold {
    font-weight: 600;
}

.who-we-are__text > :not(:last-child) {
    margin-bottom: 25px;
}

.who-we-are__image-container {
    flex: 1;
}

.who-we-are__image {
    border-radius: 6px;
    object-position: top;
    height: 340px;
}

@media screen and (max-width: 1513px) {
    .who-we-are__container {
        height: auto;
        padding: 48px 24px;
        max-width: calc(768px - 24px * 2);
    }

    .who-we-are__content {
        flex-direction: column;
        padding: 0 100px;
    }
}

@media screen and (max-width: 769px) {
    .who-we-are__container {
        padding: 40px 16px;
        max-width: 520px;
    }

    .who-we-are__title {
        font-size: 24px;
        margin-bottom: 24px;
    }

    .who-we-are__content {
        padding: 0 0;
    }
}
</file>

<file path="frontend/src/pages/WhoWeAre/whoWeAre.jsx">
import './whoWeAre.css';
import Image from '../../components/Image/image';

/**
 * WhoWeAre page
 * "Хто ми" (Who We Are) page that explains the platform's mission, origin, and goals,
 * So that user can understand the purpose and background of
 * CraftMerge and gain trust in the initiative.
 *
 * @component
 * @returns {JSX.Element}
 */
function WhoWeAre() {
    return (
        <div className={'who-we-are'}
             role="region"
             aria-labelledby="who-we-are-title"
        >
            <div className={'who-we-are__container'}>
                <h2 id="who-we-are-title" className={'who-we-are__title'}>
                    Хто ми
                </h2>
                <div className={'who-we-are__content'}>
                    <div className={'who-we-are__text'}>
                        <p>
                            <strong>
                                <span className={'who-we-are__text--bold'}>
                                    CraftMerge
                                </span>
                            </strong> - перший форум Західної України,
                            який створений у співпраці з Національним
                            університетом «Львівська політехніка». Наша місія
                            - не лише об'єднання українських виробників та
                            стартапів, а й відкриття нових перспектив у
                            виробничій галузі.
                        </p>
                        <p>
                            CraftMerge - це не лише платформа для обміну
                            досвідом та ідеями, але й комунікаційний майданчик
                            для обговорення актуальних тенденцій та передових
                            технологій.
                        </p>
                        <p>
                            Учасники форуму отримають можливість не лише
                            обмінятися досвідом та ідеями, але й ознайомитися
                            з найсучаснішими рішеннями виробництва крафтової
                            продукції. Ми створили CraftMerge, щоб допомогти
                            українським виробникам збільшити свою популярність
                            та впізнаваність, розширити аудиторію споживачів та
                            залучити нових клієнтів. Приєднуйтеся до нашого
                            форуму та розвивайте свій бізнес разом з нами!"
                        </p>
                    </div>
                    <div className={'who-we-are__image-container'}
                         role="img"
                         aria-label="Учасники форуму CraftMerge"
                    >
                        <Image
                            src={'/pictures/png/pexels-pavel-danilyuk.png'}
                            alt={'Who we are'}
                            className={'who-we-are__image'}
                        />
                    </div>
                </div>
            </div>
        </div>
    );
}

export default WhoWeAre;
</file>

<file path="frontend/src/utils/validation/validate.test.js">
import { Validator } from './validate';
import { describe, expect, test } from '@jest/globals';

describe('validate company name', () => {
    test('should be null when "Company"', () => {
        expect(Validator.validateField('companyName', 'Company', {})).toBeNull();
    });

    test('should be not null when "C"', () => {
        expect(Validator.validateField('companyName', 'C', {})).not.toBeNull();
    });

    test('should be not null when ""', () => {
        expect(Validator.validateField('companyName', '', {})).not.toBeNull();
    });
});

describe('validate email', () => {
    test('should be null when "emailemail@email.com"', () => {
        expect(Validator.validateField('email', 'emailemail@email.com', {})).toBeNull();
    });

    test('should be not null when "emailemail@email."', () => {
        expect(Validator.validateField('email', 'emailemail@email.', {})).not.toBeNull();
    });

    test('should be not null when "emailemail@email"', () => {
        expect(Validator.validateField('email', 'emailemail@email', {})).not.toBeNull();
    });

    test('should be not null when "emailemail@"', () => {
        expect(Validator.validateField('email', 'emailemail@', {})).not.toBeNull();
    });

    test('should be not null when "@email.com"', () => {
        expect(Validator.validateField('email', '@email.com', {})).not.toBeNull();
    });

    test('should be not null when ""', () => {
        expect(Validator.validateField('email', '', {})).not.toBeNull();
    });
});

describe('validate password', () => {
    test('should be null when "Password123"', () => {
        expect(Validator.validateField('password', 'Password123', {})).toBeNull();
    });

    test('should be not null when "Password"', () => {
        expect(Validator.validateField('password', 'Password', {})).not.toBeNull();
    });

    test('should be not null when "password123"', () => {
        expect(Validator.validateField('password', 'password123', {})).not.toBeNull();
    });

    test('should be not null when ""', () => {
        expect(Validator.validateField('password', '', {})).not.toBeNull();
    });
});

describe('validate confirm password', () => {
    const data = { password: 'Password123' };

    test('should be null when "Password123" is equal to password', () => {
        expect(Validator.validateField('confirmPassword', 'Password123', data)).toBeNull();
    });

    test('should be not null when "Password" is not equal to password', () => {
        expect(Validator.validateField('confirmPassword', 'Password', data)).not.toBeNull();
    });

    test('should be not null when ""', () => {
        expect(Validator.validateField('confirmPassword', '', data)).not.toBeNull();
    });
});

describe('validate first name', () => {
    test('should be null when "Ivan"', () => {
        expect(Validator.validateField('firstName', 'Ivan', {})).toBeNull();
    });

    test('should be not null when "Ivan1"', () => {
        expect(Validator.validateField('firstName', 'Ivan1', {})).not.toBeNull();
    });

    test('should be not null when ""', () => {
        expect(Validator.validateField('firstName', '', {})).not.toBeNull();
    });
});

describe('validate last name', () => {
    test('should be null when "Superman"', () => {
        expect(Validator.validateField('lastName', 'Superman', {})).toBeNull();
    });

    test('should be not null when "Superman1"', () => {
        expect(Validator.validateField('lastName', 'Superman1', {})).not.toBeNull();
    });

    test('should be not null when ""', () => {
        expect(Validator.validateField('lastName', '', {})).not.toBeNull();
    });
});

describe('validate representation', () => {
    test('should be null when { true, false }', () => {
        const formData = {
            representation: {
                company: true,
                startup: false
            }
        };

        expect(Validator.validateField('representation', formData.representation, formData)).toBeNull();
    });

    test('should be null when { true, true }', () => {
        const formData = {
            representation: {
                company: true,
                startup: true
            }
        };

        expect(Validator.validateField('representation', formData.representation, formData)).toBeNull();
    });

    test('should be not null when { false, false }', () => {
        const formData = {
            representation: {
                company: false,
                startup: false
            }
        };

        expect(Validator.validateField('representation', formData.representation, formData)).not.toBeNull();
    });
});

describe('validate businessType', () => {
    test('should be null when { true, false }', () => {
        const formData = {
            businessType: {
                individual: true,
                legal: false
            }
        };

        expect(Validator.validateField('businessType', formData.businessType, formData)).toBeNull();
    });

    test('should be null when { true, true }', () => {
        const formData = {
            businessType: {
                individual: true,
                legal: true
            }
        };

        expect(Validator.validateField('businessType', formData.businessType, formData)).toBeNull();
    });

    test('should be not null when { false, false }', () => {
        const formData = {
            businessType: {
                individual: false,
                legal: false
            }
        };

        expect(Validator.validateField('businessType', formData.businessType, formData)).not.toBeNull();
    });
});

describe('validate data object', () => {
    test('should be { * : null } when all positive', () => {
        const formData = {
            companyName: "Company",
            email: "emailemail@email.com",
            password: "Password123",
            confirmPassword: "Password123",
            lastName: "Superman",
            firstName: "Ivan",
            representation: {
                company: true,
                startup: false
            },
            businessType: {
                individual: true,
                legal: false
            }
        };

        const expected = {
            companyName: null,
            email: null,
            password: null,
            confirmPassword: null,
            lastName: null,
            firstName: null,
            representation: null,
            businessType: null
        };

        expect(Validator.validate(formData)).toStrictEqual(expected);
    });

    test('should be { * : "error message" } when all negative', () => {
        const formData = {
            companyName: "",
            email: "",
            password: "",
            confirmPassword: "",
            lastName: "",
            firstName: "",
            representation: {
                company: false,
                startup: false
            },
            businessType: {
                individual: false,
                legal: false
            }
        };

        const expected = {
            companyName: Validator.errorZeroLengthMessages["companyName"],
            email: Validator.errorZeroLengthMessages["email"],
            password: Validator.errorZeroLengthMessages["password"],
            confirmPassword: Validator.errorZeroLengthMessages["confirmPassword"],
            lastName: Validator.errorZeroLengthMessages["lastName"],
            firstName: Validator.errorZeroLengthMessages["firstName"],
            representation: Validator.errorZeroLengthMessages["representation"],
            businessType: Validator.errorZeroLengthMessages["businessType"]
        };

        expect(Validator.validate(formData)).toStrictEqual(expected);
    });
});
</file>

<file path="frontend/src/index.css">
body {
    margin: 0;
    font-family:
        -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
        sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

code {
    font-family:
        source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;
}

#root {
    height: 100%;
    display: flex;
    flex-flow: column;
}

main {
    flex: 1;
}
</file>

<file path="frontend/src/logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
</file>

<file path="frontend/src/reportWebVitals.js">
const reportWebVitals = (onPerfEntry) => {
    if (onPerfEntry && onPerfEntry instanceof Function) {
        import('web-vitals').then(
            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
                getCLS(onPerfEntry);
                getFID(onPerfEntry);
                getFCP(onPerfEntry);
                getLCP(onPerfEntry);
                getTTFB(onPerfEntry);
            }
        );
    }
};

export default reportWebVitals;
</file>

<file path="frontend/.gitignore">
# dependencies
/node_modules
/package-lock.json
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

# IDE
/.vscode
/.idea

/.env
</file>

<file path="frontend/.prettierrc.json">
{
    "trailingComma": "es5",
    "tabWidth": 4,
    "semi": true,
    "singleQuote": true
}
</file>

<file path="frontend/README.md">
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
</file>

<file path="investments/migrations/0001_initial.py">
# Generated by Django 5.2.4 on 2025-08-22 11:51

import django.core.validators
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, default=Decimal('0.01'), max_digits=18, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('investment_share', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscriptions',
                'db_table': 'subscriptions',
                'ordering': ['-created_at'],
            },
        ),
    ]
</file>

<file path="investments/migrations/0002_initial.py">
# Generated by Django 5.2.4 on 2025-08-22 11:51

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('investments', '0001_initial'),
        ('investors', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='subscription',
            name='investor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='investors.investor'),
        ),
    ]
</file>

<file path="investments/migrations/0003_initial.py">
# Generated by Django 5.2.4 on 2025-08-22 11:51

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('investments', '0002_initial'),
        ('projects', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='subscription',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='projects.project'),
        ),
        migrations.AddIndex(
            model_name='subscription',
            index=models.Index(fields=['project'], name='idx_subscription_project'),
        ),
        migrations.AddIndex(
            model_name='subscription',
            index=models.Index(fields=['investor'], name='idx_subscription_investor'),
        ),
        migrations.AddConstraint(
            model_name='subscription',
            constraint=models.UniqueConstraint(fields=('investor', 'project'), name='unique_investor_project'),
        ),
    ]
</file>

<file path="investments/serializers/subscription_update.py">
from django.db import transaction
from django.utils.translation import gettext_lazy as _
from rest_framework import serializers
from projects.models import Project
from ..models import Subscription
from ..services.investment_share_service import calculate_investment_share
from ..services.subscription_validation_service import validate_subscription_business_rules


class SubscriptionUpdateSerializer(serializers.ModelSerializer):
    """
    Handles subscription updates, ensuring rules are respected.
    """

    class Meta:
        model = Subscription
        fields = ['investor', 'project', 'amount', 'investment_share', 'created_at']
        read_only_fields = ['investment_share', 'created_at']

    def validate(self, data):
        instance = getattr(self, 'instance', None)

        if instance:
            if 'project' in data and data['project'] != instance.project.id:
                raise serializers.ValidationError({"project": _("Cannot change project of existing subscription.")})

            if 'investor' in data and data['investor'] != instance.investor.id:
                raise serializers.ValidationError({"investor": _("Cannot change investor of existing subscription.")})

        return data

    def update(self, instance, validated_data):
        new_amount = validated_data.get('amount', instance.amount)

        with transaction.atomic():
            project = Project.objects.select_for_update().get(pk=instance.project.pk)
            validate_subscription_business_rules(
                instance.investor, project, new_amount, exclude_amount=instance.amount
            )
            validated_data['investment_share'] = calculate_investment_share(new_amount, project.funding_goal)

            for attr, value in validated_data.items():
                setattr(instance, attr, value)

            instance.save()
            return instance
</file>

<file path="investments/services/investment_share_service.py">
from decimal import Decimal, ROUND_HALF_UP


def calculate_investment_share(amount, funding_goal) -> Decimal:
    """
    Return the investment share as a percentage of the funding goal.
    """
    if funding_goal == 0:
        return Decimal("0.00")

    share = (Decimal(amount) / Decimal(funding_goal) * Decimal("100"))
    return share.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)


def recalculate_investment_shares(project):
    """
    Recalculates and updates the 'investment_share' field for all Subscription instances
    based on the project's funding goal.
    """
    from investments.models import Subscription

    funding_goal = project.funding_goal or Decimal("0.00")
    investments = Subscription.objects.filter(project=project)

    to_update = []
    for investment in investments:
        share = calculate_investment_share(investment.amount, funding_goal)
        if investment.investment_share != share:
            investment.investment_share = share
            to_update.append(investment)

    if to_update:
        Subscription.objects.bulk_update(to_update, ['investment_share'])
</file>

<file path="investments/services/subscription_validation_service.py">
from decimal import Decimal
from django.core.exceptions import ValidationError as DjangoValidationError
from django.utils.translation import gettext_lazy as _

from investments.services.subscriptions import validate_project_funding_limit
from validation.validate_self_investment import validate_self_investment


def validate_subscription_business_rules(investor, project, amount, exclude_amount=Decimal('0.00')):
    """
    Runs all business-level validation rules for a subscription.
    """
    if not project:
        raise DjangoValidationError({"project": _("Project is required.")})

    if not investor:
        raise DjangoValidationError({"investor": _("Investor is required.")})

    validate_self_investment(investor, project)
    validate_project_funding_limit(project, amount, current_subscription_amount=exclude_amount)
</file>

<file path="investments/services/subscriptions.py">
from decimal import Decimal, InvalidOperation
from django.core.exceptions import ValidationError
from django.db.models import Sum
from django.utils.translation import gettext_lazy as _
from projects.models import Project


def to_decimal(value, field_name="amount"):
    """
    Convert value to Decimal or raise a ValidationError.
    """
    try:
        return value if isinstance(value, Decimal) else Decimal(str(value))
    except (InvalidOperation, ValueError, TypeError) as e:
        raise ValidationError({field_name: _("Invalid numeric value provided.")}) from e


def get_total_subscribed(project: Project) -> Decimal:
    """
    Return the total subscribed amount for the project.
    """
    return project.subscriptions.aggregate(total=Sum('amount')).get('total') or Decimal("0")


def validate_project_funding_limit(project: Project, amount, current_subscription_amount=Decimal("0.00")) -> None:
    """
    Ensure that adding `amount` does not exceed the project's funding goal.
    """
    amount = to_decimal(amount)
    current_subscription_amount = to_decimal(current_subscription_amount)
    total_subscribed = get_total_subscribed(project) - current_subscription_amount

    if total_subscribed >= project.funding_goal or project.current_funding >= project.funding_goal:
        raise ValidationError({"project": _("Project is fully funded.")})

    if total_subscribed + amount > project.funding_goal:
        max_allowed = project.funding_goal - total_subscribed
        raise ValidationError({
            "amount": _(f"Amount exceeds funding goal. Max allowed: {max_allowed:.2f}")
        })
</file>

<file path="investments/admin.py">
from django.contrib import admin
from investments.models import Subscription


@admin.register(Subscription)
class SubscriptionAdmin(admin.ModelAdmin):
    """
    Admin configuration for the Subscription model.

    Makes the 'investment_share' field read-only to prevent manual edits,
    and displays key fields in the admin list view.
    """
    readonly_fields = ('investment_share',)
    list_display = ('investor', 'project', 'amount', 'investment_share', 'created_at')
    search_fields = ('investor__company_name', 'project__title')
    list_filter = ('created_at', 'project', 'investor')
    ordering = ('-created_at',)
</file>

<file path="investments/apps.py">
from django.apps import AppConfig

from investments import signals


class InvestmentsConfig(AppConfig):
    """
    Application configuration class for the 'investments' app.
    Registers signal handlers on app ready.
    """
    name = 'investments'

    def ready(self):
        """
        Called when the Django app registry is fully populated.
        Registers signal handlers using a lazy-loading approach.
        """
        signals.connect_signals(self.apps)
</file>

<file path="investments/models.py">
from decimal import Decimal

from django.core.validators import MinValueValidator, MaxValueValidator
from django.db import models

from validation.validate_self_investment import validate_self_investment


class Subscription(models.Model):
    """
    Represents an investment made by an investor in a specific project.

    Fields:
        investor (ForeignKey): Reference to the Investor making the investment.
        project (ForeignKey): Reference to the Project receiving the investment.
        amount (Decimal): Investment amount. Must be non-negative.
        investment_share (Decimal): The share (percentage) of the total investments
            this subscription represents in the project. Calculated automatically.
        created_at (DateTime): Timestamp when the subscription was created.

    Constraints:
        - Investors cannot invest in their own startup's project.
        - Each investor can have only one subscription per project (unique constraint).
    """

    investor = models.ForeignKey(
        'investors.Investor',
        on_delete=models.CASCADE,
        related_name='subscriptions'
    )
    project = models.ForeignKey(
        'projects.Project',
        on_delete=models.CASCADE,
        related_name='subscriptions'
    )
    amount = models.DecimalField(
        max_digits=18,
        decimal_places=2,
        validators=[MinValueValidator(Decimal("0.01"))],
        default=Decimal("0.01")
    )
    investment_share = models.DecimalField(
        editable=False,
        max_digits=5,
        decimal_places=2,
        validators=[MinValueValidator(0.00), MaxValueValidator(100.00)],
        default=Decimal('0.00')
    )
    created_at = models.DateTimeField(auto_now_add=True)

    def clean(self):
        """ Custom validation to prevent investors from investing in their own projects. """
        validate_self_investment(self.investor, self.project)

    def __str__(self):
        percent_str = f", {self.investment_share}%" if self.investment_share is not None else ""
        return f"Investment of {self.amount} by {self.investor.company_name} in project {self.project}{percent_str}"

    class Meta:
        db_table = "subscriptions"
        ordering = ["-created_at"]
        verbose_name = "Subscription"
        verbose_name_plural = "Subscriptions"
        constraints = [
            models.UniqueConstraint(
                fields=["investor", "project"],
                name="unique_investor_project"
            ),
        ]
        indexes = [
            models.Index(fields=["project"], name="idx_subscription_project"),
            models.Index(fields=["investor"], name="idx_subscription_investor"),
        ]
</file>

<file path="investments/signals.py">
from django.db.models.signals import post_save, post_delete
from investments.tasks import recalc_investment_shares_task


def connect_signals(apps):
    """
    Connects all signal handlers for the investments app.
    Uses Celery task to avoid recalculating shares in the request thread.
    """
    Subscription = apps.get_model('investments', 'Subscription')

    def update_investment_share(sender, instance, **kwargs):
        """
        Signal handler that triggers asynchronous recalculation of investment shares
        for all subscriptions related to the project whenever a Subscription
        instance is saved or deleted.
        """
        recalc_investment_shares_task.delay(instance.project.id)

    post_save.connect(
        update_investment_share,
        sender=Subscription,
        dispatch_uid='update_investment_share_post_save'
    )
    post_delete.connect(
        update_investment_share,
        sender=Subscription,
        dispatch_uid='update_investment_share_post_delete'
    )
</file>

<file path="investments/tasks.py">
import logging

from celery import Celery, shared_task

app = Celery('investments')

app.config_from_object('django.conf:settings', namespace='CELERY')
app.autodiscover_tasks()

logger = logging.getLogger(__name__)


@shared_task
def recalc_investment_shares_task(project_id):
    """
    Celery task to recalculate investment shares for all subscriptions
    related to a given project.

    Args:
        project_id (int): The primary key of the project whose subscriptions
                          need their investment shares recalculated.

    This task fetches the project by ID and calls the recalculation function.
    If the project does not exist, the task exits silently.
    """
    from projects.models import Project
    from investments.services.investment_share_service import recalculate_investment_shares

    try:
        project = Project.objects.get(id=project_id)
    except Project.DoesNotExist:
        logger.warning(f"Project with id={project_id} not found.")
        return

    recalculate_investment_shares(project)
</file>

<file path="investments/urls.py">
from django.urls import path
from investments.views import SubscriptionCreateView

urlpatterns = [
    path("api/v1/investments/subscriptions/create/", SubscriptionCreateView.as_view(), name="subscription-create"),
]
</file>

<file path="investors/migrations/0001_initial.py">
# Generated by Django 5.2.4 on 2025-08-22 11:51

import django.core.validators
import validation.validate_email
import validation.validate_image
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Investor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=254, unique=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='company/logos/', validators=[validation.validate_image.validate_image_file])),
                ('description', models.TextField(blank=True, default='')),
                ('website', models.URLField(blank=True, default='')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[validation.validate_email.validate_email_custom])),
                ('founded_year', models.IntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2025)])),
                ('team_size', models.PositiveIntegerField(blank=True, default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stage', models.CharField(choices=[('idea', 'Idea'), ('mvp', 'MVP'), ('launch', 'Launch'), ('scale', 'Scale'), ('exit', 'Exit')], default='mvp', help_text='Current development stage of the investor', max_length=20, verbose_name='Stage')),
                ('fund_size', models.DecimalField(blank=True, decimal_places=2, default=0, help_text="Size of the investor's fund, must not be negative", max_digits=20, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Fund Size')),
            ],
            options={
                'verbose_name': 'Investor',
                'verbose_name_plural': 'Investors',
                'db_table': 'investors',
                'ordering': ['company_name'],
            },
        ),
        migrations.CreateModel(
            name='SavedStartup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('saved_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('watching', 'Watching'), ('contacted', 'Contacted'), ('negotiating', 'Negotiating'), ('passed', 'Passed')], default='watching', max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Saved Startup',
                'verbose_name_plural': 'Saved Startups',
                'db_table': 'saved_startups',
                'ordering': ['-saved_at'],
            },
        ),
    ]
</file>

<file path="investors/migrations/0002_initial.py">
# Generated by Django 5.2.4 on 2025-08-22 11:51

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('investors', '0001_initial'),
        ('startups', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='investor',
            name='industry',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='startups.industry'),
        ),
        migrations.AddField(
            model_name='investor',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='startups.location'),
        ),
    ]
</file>

<file path="investors/migrations/0003_initial.py">
# Generated by Django 5.2.4 on 2025-08-22 11:51

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('investors', '0002_initial'),
        ('startups', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='investor',
            name='user',
            field=models.OneToOneField(help_text='The user who owns this investor', on_delete=django.db.models.deletion.CASCADE, related_name='investor', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='savedstartup',
            name='investor',
            field=models.ForeignKey(db_column='investor_profile_id', on_delete=django.db.models.deletion.PROTECT, related_name='saved_startups', to='investors.investor'),
        ),
        migrations.AddField(
            model_name='savedstartup',
            name='startup',
            field=models.ForeignKey(db_column='startup_profile_id', on_delete=django.db.models.deletion.PROTECT, related_name='saved_by_investors', to='startups.startup'),
        ),
        migrations.AddField(
            model_name='investor',
            name='bookmarks',
            field=models.ManyToManyField(blank=True, help_text='Startups that this investor has bookmarked.', related_name='bookmarked_by', through='investors.SavedStartup', to='startups.startup', verbose_name='Bookmarked startups'),
        ),
        migrations.AddIndex(
            model_name='savedstartup',
            index=models.Index(fields=['investor', 'startup'], name='saved_investor_startup_idx'),
        ),
        migrations.AddIndex(
            model_name='savedstartup',
            index=models.Index(fields=['status'], name='saved_status_idx'),
        ),
        migrations.AddIndex(
            model_name='savedstartup',
            index=models.Index(fields=['-saved_at'], name='saved_saved_at_desc_idx'),
        ),
        migrations.AddConstraint(
            model_name='savedstartup',
            constraint=models.UniqueConstraint(fields=('investor', 'startup'), name='uniq_investor_startup'),
        ),
        migrations.AddIndex(
            model_name='investor',
            index=models.Index(fields=['company_name'], name='investor_company_name_idx'),
        ),
        migrations.AddIndex(
            model_name='investor',
            index=models.Index(fields=['stage'], name='investor_stage_idx'),
        ),
    ]
</file>

<file path="investors/migrations/0004_investor_social_links.py">
# Generated by Django 5.2.4 on 2025-08-24 22:59

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('investors', '0003_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='investor',
            name='social_links',
            field=models.JSONField(blank=True, default=dict, help_text='Social media links as a JSON object', verbose_name='Social Links'),
        ),
    ]
</file>

<file path="investors/serializers/investor_create.py">
from rest_framework import serializers
from investors.models import Investor
from startups.models import Startup, Industry, Location
from mixins.social_links_mixin import SocialLinksValidationMixin


class InvestorCreateSerializer(SocialLinksValidationMixin, serializers.ModelSerializer):
    """
    Serializer for creating a new Investor profile.

    This serializer handles the validation and creation of an Investor instance.
    The 'user' field is automatically populated from the authenticated user
    making the request. It validates that the company name is unique.
    """
    industry = serializers.PrimaryKeyRelatedField(
        queryset=Industry.objects.all(),
        allow_null=True,
        required=False
    )
    location = serializers.PrimaryKeyRelatedField(
        queryset=Location.objects.all(),
        allow_null=True,
        required=False
    )

    class Meta:
        model = Investor
        fields = [
            'id', 'company_name', 'description', 'industry', 'location', 'website',
            'email', 'founded_year', 'team_size', 'stage', 'fund_size', 'social_links'
        ]
        read_only_fields = ['id']
        extra_kwargs = {
            'company_name': {'required': True},
            'email': {'required': True},
            'founded_year': {'required': True},
            'fund_size': {'required': True},
        }

    def validate_company_name(self, value):
        """
        Ensure the company name is unique, case-insensitively.
        """
        if self.instance is None and Investor.objects.filter(company_name__iexact=value).exists():
            raise serializers.ValidationError("An investor with this name already exists.")
        return value

    def create(self, validated_data):
        """
        Create a new Investor instance, associating it with the request user.
        """
        request = self.context.get('request')
        if not request or not hasattr(request, 'user'):
            raise serializers.ValidationError("Authenticated user not found in context.")

        user = request.user

        if Startup.objects.filter(user=user).exists():
            raise serializers.ValidationError("You have already created a startup profile.")
        
        validated_data['user'] = user
        return Investor.objects.create(**validated_data)
</file>

<file path="investors/serializers/investor.py">
import datetime

from django.core.validators import MinValueValidator, MaxValueValidator
from django.db import transaction
from rest_framework import serializers
from django.core.exceptions import ValidationError
from common.enums import Stage
from investors.models import Investor, SavedStartup
from startups.models import Startup
from validation.validate_names import validate_company_name


class InvestorSerializer(serializers.ModelSerializer):
    """
    Serializer for the Investor model.
    Includes all fields defined in the abstract Company base class and Investor-specific fields.
    """
    founded_year = serializers.IntegerField(
        validators=[MinValueValidator(1900), MaxValueValidator(datetime.datetime.now().year)],
        error_messages={
            'min_value': "Founded year cannot be before 1900.",
            'max_value': "Founded year cannot be in the future."
        }
    )

    team_size = serializers.IntegerField(
        validators=[MinValueValidator(1)],
        error_messages={
            'min_value': "Team size must be at least 1."
        }
    )

    fund_size = serializers.DecimalField(
        max_digits=20,
        decimal_places=2,
        validators=[MinValueValidator(0)],
        error_messages={
            'min_value': "Fund size cannot be negative.",
            'max_digits': "Fund size is too large."
        }
    )

    stage = serializers.ChoiceField(
        choices=Stage.choices,
        default=Stage.MVP,
        error_messages={'invalid_choice': "Invalid stage choice."}
    )

    description = serializers.CharField(
        required=False,
        allow_blank=True
    )

    class Meta:
        model = Investor
        fields = [
            'id', 'user', 'industry', 'company_name', 'location',
            'logo', 'description', 'website', 'email', 'founded_year',
            'team_size', 'stage', 'fund_size', 'created_at', 'updated_at'
        ]
        read_only_fields = ['id', 'created_at', 'updated_at', 'user']
        extra_kwargs = {
            'company_name': {
                'error_messages': {
                    'blank': "Company name must not be empty.",
                    'max_length': "Company name cannot exceed 254 characters."
                }
            },
            'email': {
                'error_messages': {
                    'blank': "Email is required.",
                    'invalid': "Enter a valid email address.",
                }
            }
        }

    def validate_company_name(self, value):
        """ Validate company name using shared validation function. """
        try:
            return validate_company_name(value)
        except ValidationError as e:
            raise serializers.ValidationError(str(e))

    def validate_description(self, value):
        if value and len(value.strip()) < 10:
            raise serializers.ValidationError(
                "Description must be at least 10 characters long if provided."
            )
        return value

    def create(self, validated_data):
        request = self.context.get('request')
        if not request or not hasattr(request, 'user'):
            raise serializers.ValidationError("Request user is missing in serializer context.")
        validated_data['user'] = request.user
        return super().create(validated_data)


class SavedStartupSerializer(serializers.ModelSerializer):
    """
    Serializer for creating and retrieving SavedStartup records.

    Ensures:
    - Only authenticated investors can save startups.
    - Prevents saving own startup.
    - Avoids duplicates via validator and IntegrityError handling.
    """
    investor = serializers.PrimaryKeyRelatedField(read_only=True)
    startup = serializers.PrimaryKeyRelatedField(queryset=Startup.objects.all(), write_only=True)
    startup_name = serializers.CharField(source='startup.company_name', read_only=True)
    notes = serializers.CharField(required=False, allow_blank=True, allow_null=True)

    class Meta:
        model = SavedStartup
        fields = [
            'id',
            'investor',
            'startup',
            'startup_name',
            'status', 'notes',
            'saved_at', 'created_at', 'updated_at',
        ]
        read_only_fields = ['id', 'investor', 'startup_name', 'saved_at', 'created_at', 'updated_at']
        extra_kwargs = {
            'investor': {'read_only': True, 'required': False},
            'startup': {'write_only': True},
        }

    def validate(self, attrs):
        request = self.context.get('request')
        user = getattr(request, 'user', None)
        investor = getattr(user, 'investor', None)
        startup = attrs.get('startup')

        errors = {}
        if not investor:
            errors.setdefault('non_field_errors', []).append('Only investors can save startups.')

        if startup is not None and getattr(startup, 'user_id', None) == getattr(user, 'id', None):
            errors['startup'] = 'You cannot save your own startup.'

        if self.instance is None and startup is None:
            errors['startup'] = 'This field is required.'

        if errors:
            raise serializers.ValidationError(errors)
        return attrs

    def create(self, validated_data):
        request = self.context.get('request')
        user = getattr(request, 'user', None)

        investor = validated_data.pop('investor', getattr(user, 'investor', None))
        if not investor:
            raise serializers.ValidationError({'non_field_errors': ['Only authenticated investors can save startups.']})

        startup = validated_data.get('startup')
        status_val = validated_data.get('status', 'watching')
        notes_val = validated_data.get('notes')
        if notes_val is None:
            notes_val = ''

        with transaction.atomic():
            obj, created = SavedStartup.objects.get_or_create(
                investor=investor,
                startup=startup,
                defaults={'status': status_val, 'notes': notes_val},
            )

        if not created:
            raise serializers.ValidationError({'non_field_errors': ['Already saved.']})

        return obj
</file>

<file path="investors/admin.py">
from django.contrib import admin

# Register your models here.
</file>

<file path="investors/apps.py">
from django.apps import AppConfig


class InvestorsConfig(AppConfig):
    name = 'investors'
</file>

<file path="investors/models.py">
from django.core.validators import MinValueValidator
from django.db import models
from django.core.exceptions import ValidationError
from common.company import Company
from common.enums import Stage


class Investor(Company):
    """
    Investor model that inherits from the base Company model.
    Linked to a user via a one-to-one relationship.
    Stores the investor's development stage and fund size.
    """

    user = models.OneToOneField(
        'users.User',
        on_delete=models.CASCADE,
        related_name='investor',
        verbose_name="User",
        help_text="The user who owns this investor"
    )
    stage = models.CharField(
        max_length=20,
        choices=Stage.choices,
        default=Stage.MVP,
        verbose_name="Stage",
        help_text="Current development stage of the investor"
    )
    fund_size = models.DecimalField(
        max_digits=20,
        decimal_places=2,
        blank=True,
        default=0,
        validators=[MinValueValidator(0)],
        verbose_name="Fund Size",
        help_text="Size of the investor's fund, must not be negative"
    )
    
    bookmarks = models.ManyToManyField(
        'startups.Startup',
        through='investors.SavedStartup',
        related_name='bookmarked_by',
        blank=True,
        verbose_name='Bookmarked startups',
        help_text='Startups that this investor has bookmarked.',
    )

    @property
    def user_id(self):
        return self.user.id if self.user else None

    def __str__(self):
        return f"{self.company_name} (Investor, User ID: {self.user_id})"

    class Meta:
        db_table = "investors"
        ordering = ["company_name"]
        verbose_name = "Investor"
        verbose_name_plural = "Investors"

        indexes = [
            models.Index(fields=['company_name'], name='investor_company_name_idx'),
            models.Index(fields=['stage'], name='investor_stage_idx'),
        ]
        
class SavedStartup(models.Model):
    """
    Intermediate model representing a startup saved (bookmarked) by an investor.
    Stores additional metadata such as status, notes, and timestamps.
    """
    investor = models.ForeignKey(
        'investors.Investor',
        on_delete=models.PROTECT,
        related_name='saved_startups',
        db_column='investor_profile_id',
    )
    startup = models.ForeignKey(
        'startups.Startup',
        on_delete=models.PROTECT,
        related_name='saved_by_investors',
        db_column='startup_profile_id',
    )
    saved_at = models.DateTimeField(auto_now_add=True)

    STATUS_CHOICES = [
        ('watching', 'Watching'),
        ('contacted', 'Contacted'),
        ('negotiating', 'Negotiating'),
        ('passed', 'Passed'),
    ]
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='watching')
    notes = models.TextField(blank=True, null=True)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def clean(self):
        if self.notes is None:
            self.notes = ""

        inv_user_id = self.investor.user_id if getattr(self, 'investor_id', None) else None
        st_user_id  = self.startup.user_id  if getattr(self, 'startup_id',  None) else None
        if inv_user_id is not None and st_user_id is not None and inv_user_id == st_user_id:
            raise ValidationError({"non_field_errors": ["You cannot save your own startup."]})

    def __str__(self):
        return f"{self.investor} saved {self.startup}"

    class Meta:
        db_table = 'saved_startups'
        constraints = [
            models.UniqueConstraint(fields=['investor', 'startup'], name='uniq_investor_startup')
        ]
        ordering = ['-saved_at']
        verbose_name = 'Saved Startup'
        verbose_name_plural = 'Saved Startups'
        indexes = [
            models.Index(fields=['investor', 'startup'], name='saved_investor_startup_idx'),
            models.Index(fields=['status'], name='saved_status_idx'),
            models.Index(fields=['-saved_at'], name='saved_saved_at_desc_idx'),
        ]
</file>

<file path="investors/permissions.py">
from rest_framework import permissions


class IsSavedStartupOwner(permissions.BasePermission):
    """
    Custom permission to allow only the owner of a SavedStartup (its investor) to modify or delete it.
    """

    def has_object_permission(self, request, view, obj):
        """
        Check if the request user's investor profile matches the
        investor linked to the SavedStartup object.
        """

        investor_profile = getattr(request.user, 'investor', None)
        if not investor_profile:
            return False
        return obj.investor == investor_profile
</file>

<file path="investors/urls.py">
from django.urls import path
from rest_framework.routers import DefaultRouter
from investors.views import InvestorViewSet, SavedStartupViewSet, SaveStartupView
from investors.views_saved import InvestorSavedStartupsList, UnsaveStartupView

router = DefaultRouter()
router.register(r'saved', SavedStartupViewSet, basename='saved-startup')
router.register(r'', InvestorViewSet, basename='investor')

urlpatterns = [
    # GET /api/v1/investors/saved-startups/
    path("saved-startups/", InvestorSavedStartupsList.as_view(), name="investor-saved-startups"),

    # POST /api/v1/investors/startups/<startup_id>/save/
    path("startups/<int:startup_id>/save/", SaveStartupView.as_view(), name="startup-save"),

    # DELETE /api/v1/investors/startups/<startup_id>/unsave/
    path("startups/<int:startup_id>/unsave/", UnsaveStartupView.as_view(), name="startup-unsave"),
] + router.urls
</file>

<file path="mixins/social_links_mixin.py">
from core import settings
from validation.validate_social_links import validate_social_links_dict


class SocialLinksValidationMixin:
    """
    Provides validation logic for the `social_links` field.

    This method ensures that:
    - Each platform key is supported (based on settings.ALLOWED_SOCIAL_PLATFORMS).
    - Each URL is syntactically valid.
    - The domain of each URL matches one of the expected domains for the given platform.

    Args:
        value (dict): A dictionary of platform names mapped to URLs.

    Returns:
        dict: The validated `social_links` dictionary.

    Raises:
        serializers.ValidationError: If any platform is unsupported, any URL is malformed,
                                     or any domain does not match the expected values.
    """

    def validate_social_links(self, value):
        validate_social_links_dict(
            social_links=value,
            allowed_platforms=settings.ALLOWED_SOCIAL_PLATFORMS,
            raise_serializer=True
        )
        return value
</file>

<file path="projects/migrations/0001_initial.py">
# Generated by Django 5.2.4 on 2025-08-22 11:51

import django.core.validators
import django.db.models.deletion
import validation.validate_document
import validation.validate_email
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'db_table': 'categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, default='')),
                ('business_plan', models.FileField(blank=True, null=True, upload_to='projects/business_plans/', validators=[validation.validate_document.validate_document_file])),
                ('media_files', models.FileField(blank=True, null=True, upload_to='projects/media/', validators=[validation.validate_document.validate_document_file])),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='draft', max_length=50)),
                ('duration', models.PositiveIntegerField(blank=True, default=1, help_text='Duration in days', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3650)])),
                ('funding_goal', models.DecimalField(decimal_places=2, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('current_funding', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('website', models.URLField(blank=True, default='')),
                ('email', models.EmailField(max_length=255, unique=True, validators=[validation.validate_email.validate_email_custom])),
                ('has_patents', models.BooleanField(default=False)),
                ('is_participant', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.category')),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'db_table': 'projects',
                'ordering': ['-created_at'],
            },
        ),
    ]
</file>

<file path="projects/migrations/0002_initial.py">
# Generated by Django 5.2.4 on 2025-08-22 11:51

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('projects', '0001_initial'),
        ('startups', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='project',
            name='startup',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='startups.startup'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['status'], name='project_status_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['created_at'], name='project_created_at_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['startup'], name='project_startup_idx'),
        ),
        migrations.AddConstraint(
            model_name='project',
            constraint=models.UniqueConstraint(fields=('title', 'startup'), name='unique_startup_project_title'),
        ),
    ]
</file>

<file path="projects/admin.py">
from django.contrib import admin

# Register your models here.
</file>

<file path="projects/documents.py">
from django_elasticsearch_dsl import Document, fields
from django_elasticsearch_dsl.registries import registry
from projects.models import Project


@registry.register_document
class ProjectDocument(Document):
    category = fields.ObjectField(properties={
        'id': fields.IntegerField(),
        'name': fields.KeywordField(),
    })
    startup = fields.ObjectField(properties={
        'id': fields.IntegerField(),
        'company_name': fields.KeywordField(),
    })

    class Index:
        name = 'projects'
        settings = {
            'number_of_shards': 1,
            'number_of_replicas': 0
        }

    class Django:
        model = Project
        fields = [
            'id',
            'title',
            'description',
            'status',
        ]
        related_models = ['startup', 'category']
</file>

<file path="projects/permissions.py">
from rest_framework import permissions


class IsOwnerOrReadOnly(permissions.BasePermission):
    def has_object_permission(self, request, view, obj):
        return obj.startup.user == request.user
</file>

<file path="projects/urls.py">
from django.urls import path, include
from rest_framework.routers import DefaultRouter

from investments.views import SubscriptionCreateView
from projects.views import ProjectDocumentView, ProjectViewSet

router = DefaultRouter()
router.register(r'projects', ProjectViewSet, basename='project')
router.register(r'projects-documents', ProjectDocumentView, basename='project-document')

urlpatterns = [
    path('', include(router.urls)),
    path('search/', ProjectDocumentView.as_view({'get': 'list'}), name='project-search'),
    path("<int:project_id>/subscribe/", SubscriptionCreateView.as_view(), name="project-subscribe"),
]
</file>

<file path="startups/migrations/0001_initial.py">
# Generated by Django 5.2.4 on 2025-08-22 11:51

import django.core.validators
import django.db.models.deletion
import django_countries.fields
import validation.validate_email
import validation.validate_image
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Industry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the industry (unique)', max_length=100, unique=True, verbose_name='Industry Name')),
                ('description', models.TextField(blank=True, default='', help_text='Optional detailed description of the industry', verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Industry',
                'verbose_name_plural': 'Industries',
                'db_table': 'industries',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='industries_name_285c10_idx')],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', django_countries.fields.CountryField(help_text='Country of the location', max_length=2, verbose_name='Country')),
                ('region', models.CharField(blank=True, help_text='Region or state of the location', max_length=100, null=True, verbose_name='Region')),
                ('city', models.CharField(blank=True, help_text='City of the location', max_length=100, null=True, verbose_name='City')),
                ('address_line', models.CharField(blank=True, help_text='Street address or detailed address line', max_length=254, null=True, verbose_name='Address Line')),
                ('postal_code', models.CharField(blank=True, help_text='Postal or ZIP code', max_length=20, null=True, verbose_name='Postal Code')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
                'db_table': 'locations',
                'ordering': ['country'],
                'indexes': [models.Index(fields=['country'], name='locations_country_7c8456_idx'), models.Index(fields=['city'], name='locations_city_278550_idx'), models.Index(fields=['region'], name='locations_region_c9db38_idx')],
                'constraints': [models.UniqueConstraint(models.F('city'), models.F('region'), models.F('country'), name='unique_location', violation_error_message='This location already exists.')],
            },
        ),
        migrations.CreateModel(
            name='Startup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=254, unique=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='company/logos/', validators=[validation.validate_image.validate_image_file])),
                ('description', models.TextField(blank=True, default='')),
                ('website', models.URLField(blank=True, default='')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[validation.validate_email.validate_email_custom])),
                ('founded_year', models.IntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2025)])),
                ('team_size', models.PositiveIntegerField(blank=True, default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stage', models.CharField(choices=[('idea', 'Idea'), ('mvp', 'MVP'), ('launch', 'Launch'), ('scale', 'Scale'), ('exit', 'Exit')], default='idea', help_text='Current development stage of the startup', max_length=20, verbose_name='Development Stage')),
                ('social_links', models.JSONField(blank=True, default=dict, help_text='Social media links as a JSON object', verbose_name='Social Links')),
                ('industry', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='startups.industry')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='startups.location')),
            ],
            options={
                'verbose_name': 'Startup',
                'verbose_name_plural': 'Startups',
                'db_table': 'startups',
                'ordering': ['company_name'],
            },
        ),
    ]
</file>

<file path="startups/migrations/0002_initial.py">
# Generated by Django 5.2.4 on 2025-08-22 11:51

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('startups', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='startup',
            name='user',
            field=models.OneToOneField(help_text='User who owns this startup', on_delete=django.db.models.deletion.CASCADE, related_name='startup', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddIndex(
            model_name='startup',
            index=models.Index(fields=['company_name'], name='startups_company_3f6814_idx'),
        ),
        migrations.AddIndex(
            model_name='startup',
            index=models.Index(fields=['stage'], name='startups_stage_855eb1_idx'),
        ),
    ]
</file>

<file path="startups/serializers/startup_base.py">
from rest_framework import serializers
from mixins.social_links_mixin import SocialLinksValidationMixin
from startups.models import Startup
from utils.get_field_value import get_field_value
from validation.validate_names import validate_company_name, validate_latin
from django.core.exceptions import ValidationError


class StartupBaseSerializer(SocialLinksValidationMixin, serializers.ModelSerializer):
    """
    Base serializer for Startup model.
    Contains shared fields and validations.
    """
    social_links = serializers.DictField(required=False)

    class Meta:
        model = Startup
        fields = [
            'id', 'company_name', 'description', 'industry',
            'location', 'website', 'email', 'founded_year',
            'team_size', 'stage', 'social_links', 'user',
            'created_at', 'updated_at'
        ]
        read_only_fields = ['id', 'created_at', 'updated_at']
        extra_kwargs = {
            'company_name': {
                'validators': []
            },
            'email': {
                'validators': []
            }
        }

    def validate_company_name(self, value):
        """ Validate company name using shared validation function. """
        try:
            value = validate_company_name(value)
            if not validate_latin(value):
                raise ValidationError(
                    "The name must contain only Latin letters, spaces, hyphens, or apostrophes."
                )

            if self.instance:
                if Startup.objects.filter(company_name__iexact=value).exclude(pk=self.instance.pk).exists():
                    raise ValidationError("Company with this name already exists.")
            else:
                if Startup.objects.filter(company_name__iexact=value).exists():
                    raise ValidationError("Company with this name already exists.")

            return value
        except ValidationError as e:
            raise serializers.ValidationError(str(e))

    def validate_email(self, value):
        """ Validate email uniqueness. """
        if value:
            value = value.strip().lower()

            if self.instance:
                if Startup.objects.filter(email__iexact=value).exclude(pk=self.instance.pk).exists():
                    raise ValidationError("Company with this email already exists.")
            else:
                if Startup.objects.filter(email__iexact=value).exists():
                    raise ValidationError("Company with this email already exists.")

        return value

    def validate(self, data):
        """
        Cross-field validation:
        - team_size must be at least 1
        - either website or email must be provided
        - industry, location, and user must be present
        """
        errors = {}

        team_size = get_field_value(self, data, 'team_size')
        if team_size is not None and team_size < 1:
            errors['team_size'] = "Team size must be at least 1."

        website = get_field_value(self, data, 'website')
        website = website.strip() if website else ""

        email = get_field_value(self, data, 'email')
        email = email.strip() if email else ""

        if not website and not email:
            errors['website'] = "At least one contact method (website or email) must be provided."
            errors['email'] = "At least one contact method (website or email) must be provided."

        for field in ['industry', 'location', 'user']:
            if not get_field_value(self, data, field):
                errors[field] = f"{field.replace('_', ' ').capitalize()} is required."

        if errors:
            raise serializers.ValidationError(errors)

        return data
</file>

<file path="startups/serializers/startup_create.py">
from rest_framework import serializers
from startups.models import Startup, Industry, Location
from common.company import Company
from mixins.social_links_mixin import SocialLinksValidationMixin

class StartupCreateSerializer(SocialLinksValidationMixin, serializers.ModelSerializer):
    """
    Serializer for creating a new Startup profile.

    This serializer handles the validation and creation of a Startup instance.
    The 'user' field is automatically populated from the authenticated user
    making the request, and is not required in the input payload.
    It validates that the company name is unique.
    """
    industry = serializers.PrimaryKeyRelatedField(
        queryset=Industry.objects.all(),
        allow_null=True,
        required=False
    )
    location = serializers.PrimaryKeyRelatedField(
        queryset=Location.objects.all(),
        allow_null=True,
        required=False
    )

    class Meta:
        model = Startup
        fields = [
            'id', 'company_name', 'description', 'industry', 'location', 'website',
            'email', 'founded_year', 'team_size', 'stage', 'social_links'
        ]
        read_only_fields = ['id']
        extra_kwargs = {
            'company_name': {'required': True},
            'email': {'required': True},
            'founded_year': {'required': True},
        }

    def validate_company_name(self, value):
        """
        Ensure the company name is unique, case-insensitively.
        """
        if self.instance is None and Startup.objects.filter(company_name__iexact=value).exists():
            raise serializers.ValidationError("A startup with this name already exists.")
        return value

    def create(self, validated_data):
        """
        Create a new Startup instance, associating it with the request user.
        """
        request = self.context.get('request')
        if not request or not hasattr(request, 'user'):
            raise serializers.ValidationError("Authenticated user not found in context.")

        user = request.user

        if Startup.objects.filter(user=user).exists() or hasattr(user, 'investor'):
            raise serializers.ValidationError({"detail": "You have already created a company profile."})

        validated_data['user'] = user
        return Startup.objects.create(**validated_data)
</file>

<file path="startups/serializers/startup_elasticsearch.py">
from rest_framework import serializers
from startups.documents import StartupDocument
from django_elasticsearch_dsl_drf.serializers import DocumentSerializer


class StartupDocumentSerializer(DocumentSerializer):
    """
    Serializer for StartupDocument (Elasticsearch).
    """
    industry = serializers.SerializerMethodField()

    class Meta:
        document = StartupDocument
        fields = ('id', 'company_name', 'description', 'location', 'stage', 'industry')

    def get_industry(self, obj):
        return obj.industry.name if obj.industry else None
</file>

<file path="startups/serializers/startup_full.py">
from projects.serializers import ProjectReadSerializer
from startups.serializers.startup_base import StartupBaseSerializer


class StartupSerializer(StartupBaseSerializer):
    """
    Full serializer with nested project details.
    """
    projects = ProjectReadSerializer(many=True, read_only=True)

    class Meta(StartupBaseSerializer.Meta):
        fields = StartupBaseSerializer.Meta.fields + ['projects']
        read_only_fields = StartupBaseSerializer.Meta.read_only_fields + ['projects']
</file>

<file path="startups/serializers/startup_project.py">
from rest_framework import serializers
from startups.models import Startup


class StartupProjectSerializer(serializers.ModelSerializer):
    """Read-only serializer for startup details."""

    class Meta:
        model = Startup
        fields = ['id', 'company_name', 'stage', 'website']
</file>

<file path="startups/serializers/startup_short.py">
from rest_framework import serializers
from startups.models import Startup


class StartupShortSerializer(serializers.ModelSerializer):
    """
    Lightweight serializer for nested use (e.g., inside Investor).
    """
    class Meta:
        model = Startup
        fields = ['id', 'company_name', 'industry', 'location', 'website', 'stage']
        read_only_fields = fields
</file>

<file path="startups/views/__init__.py">
from .startup import StartupViewSet
from .startup_elasticsearch import StartupDocumentView

__all__ = ["StartupViewSet", "StartupDocumentView"]
</file>

<file path="startups/views/startup_base.py">
import logging
from django.core.exceptions import ValidationError as DjangoValidationError
from rest_framework import viewsets
from rest_framework.exceptions import ValidationError as DRFValidationError

logger = logging.getLogger(__name__)


class BaseValidatedModelViewSet(viewsets.ModelViewSet):
    """
    Base ViewSet that runs model full_clean() validation
    and logs creation and update events.
    """

    def _validate_and_log(self, serializer, action):
        """ Validates the model and saves the instance. """
        instance = serializer.instance or serializer.Meta.model(**serializer.validated_data)

        try:
            instance.clean()
        except DjangoValidationError as e:
            logger.warning(f"Validation error during {action}: {e}")
            raise DRFValidationError(e.message_dict)

        if action == 'create':
            instance = serializer.save(user=self.request.user)
        elif action == 'update':
            instance = serializer.save()

        logger.info(f"Startup {action}d: {instance}")
        return instance

    def perform_create(self, serializer):
        self._validate_and_log(serializer, 'create')

    def perform_update(self, serializer):
        ''' Update first so instance exists for validation '''
        return self._validate_and_log(serializer, "update")
</file>

<file path="startups/admin.py">
from django.contrib import admin

# Register your models here.
</file>

<file path="startups/apps.py">
from django.apps import AppConfig

class StartupsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'startups'

    def ready(self):
        import startups.signals
</file>

<file path="startups/documents.py">
from django_elasticsearch_dsl import Document, fields
from django_elasticsearch_dsl.registries import registry
from startups.models import Startup


@registry.register_document
class StartupDocument(Document):

    industry = fields.ObjectField(properties={
        'id': fields.IntegerField(),
        'name': fields.KeywordField(),
    })

    location = fields.ObjectField(properties={
        'id': fields.IntegerField(),
        'country': fields.KeywordField(),
        'region': fields.KeywordField(),
        'city': fields.KeywordField(),
        'address_line': fields.TextField(),
        'postal_code': fields.KeywordField(),
    })

    stage = fields.KeywordField()

    class Index:
        name = 'startups'
        settings = {
            'number_of_shards': 1,
            'number_of_replicas': 0
        }

    class Django:
        model = Startup
        fields = [
            'id',
            'company_name',
            'description',
            'website',
            'email',
            'founded_year',
            'team_size',
            'created_at',
            'updated_at',
        ]
        related_models = [Startup.industry.field.related_model, Startup.location.field.related_model]

    def prepare_industry(self, instance):
        if instance.industry:
            return {
                'id': instance.industry.id,
                'name': instance.industry.name,
            }
        return {}

    def prepare_location(self, instance):
        if instance.location:
            loc = instance.location
            return {
                'id': loc.id,
                'country': str(loc.country),
                'region': loc.region,
                'city': loc.city,
                'address_line': loc.address_line,
                'postal_code': loc.postal_code,
            }
        return {}

    def get_instances_from_related(self, related_instance):
        '''
        Given a related instance (Industry or Location),
        return the queryset of Startup instances that should be updated.
        '''
        if isinstance(related_instance, Startup.industry.field.related_model):
            return related_instance.startup_set.all()
        elif isinstance(related_instance, Startup.location.field.related_model):
            return related_instance.startup_set.all()
        return []
</file>

<file path="startups/models.py">
from django.core.exceptions import ValidationError
from django.db import models
from django.db.models import UniqueConstraint, F
from django_countries.fields import CountryField

from common.company import Company
from common.enums import Stage
from validation.validate_names import validate_forbidden_names, validate_latin


class Location(models.Model):
    """
    Represents a physical location with country, region, city, address line, and postal code.
    Includes validation to ensure fields follow expected formats and logical consistency.
    """
    country = CountryField(
        verbose_name="Country",
        help_text="Country of the location"
    )
    region = models.CharField(
        max_length=100,
        blank=True,
        null=True,
        verbose_name="Region",
        help_text="Region or state of the location"
    )
    city = models.CharField(
        max_length=100,
        blank=True,
        null=True,
        verbose_name="City",
        help_text="City of the location"
    )
    address_line = models.CharField(
        max_length=254,
        blank=True,
        null=True,
        verbose_name="Address Line",
        help_text="Street address or detailed address line"
    )
    postal_code = models.CharField(
        max_length=20,
        blank=True,
        null=True,
        verbose_name="Postal Code",
        help_text="Postal or ZIP code"
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="Created At")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="Updated At")

    def clean(self):
        """
        Validates the Location instance.

        - Postal code must be at least 3 characters and contain only Latin characters.
        - City, region, and address line must not be empty or contain only spaces and must be Latin characters only.
        - Enforces logical dependencies: address_line requires city and region, city requires region.

        Raises:
            ValidationError: If any validation rules fail.
        """
        errors = {}

        if self.postal_code:
            postal = self.postal_code.strip()
            if len(postal) < 3:
                errors['postal_code'] = "Postal code must be at least 3 characters."
            elif not validate_latin(postal):
                errors['postal_code'] = (
                    "Postal code must contain only Latin letters, spaces, hyphens, or apostrophes."
                )

        for field_name in ['city', 'region', 'address_line']:
            raw_value = getattr(self, field_name)
            if raw_value:
                value = raw_value.strip()
                if not value:
                    errors[field_name] = (
                        f"{field_name.replace('_', ' ').capitalize()} must not be empty or just spaces."
                    )
                elif not validate_latin(value):
                    errors[field_name] = (
                        f"{field_name.replace('_', ' ').capitalize()} must contain only Latin letters, spaces, hyphens, or apostrophes."
                    )

        if self.address_line:
            if not self.city or not self.city.strip():
                errors['city'] = "City is required when address_line is provided."
            if not self.region or not self.region.strip():
                errors['region'] = "Region is required when address_line is provided."

        if self.city:
            if not self.region or not self.region.strip():
                errors['region'] = "Region is required when city is provided."

        if errors:
            raise ValidationError(errors)

    def __str__(self):
        city_str = self.city if self.city else 'Unknown City'
        country_str = self.country if self.country else 'Unknown Country'

        if self.region:
            return f"{city_str}, {self.region}, {country_str}"
        return f"{city_str}, {country_str}"

    class Meta:
        db_table = "locations"
        ordering = ["country"]
        verbose_name = "Location"
        verbose_name_plural = "Locations"
        constraints = [
            UniqueConstraint(
                F('city'),
                F('region'),
                F('country'),
                name='unique_location',
                violation_error_message='This location already exists.'
            )
        ]
        indexes = [
            models.Index(fields=['country']),
            models.Index(fields=['city']),
            models.Index(fields=['region']),
        ]


class Industry(models.Model):
    """
    Represents an industry category, which can be linked to other entities like startups.
    Enforces uniqueness of the industry name and validates against forbidden names.
    """
    name = models.CharField(
        max_length=100,
        unique=True,
        verbose_name="Industry Name",
        help_text="Name of the industry (unique)"
    )
    description = models.TextField(
        blank=True,
        default="",
        verbose_name="Description",
        help_text="Optional detailed description of the industry"
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="Created At")

    def clean(self):
        """
        Validates the Industry name to ensure it does not contain forbidden terms.

        Raises:
            ValidationError: If forbidden names are detected.
        """
        super().clean()
        validate_forbidden_names(self.name, field_name="name")

    def __str__(self):
        return self.name

    class Meta:
        db_table = "industries"
        ordering = ["name"]
        verbose_name = "Industry"
        verbose_name_plural = "Industries"
        indexes = [
            models.Index(fields=['name']),
        ]


class Startup(Company):
    """
    Represents a startup company linked to a user.
    Includes stage of development and social links validation.
    """
    user = models.OneToOneField(
        'users.User',
        on_delete=models.CASCADE,
        related_name='startup',
        verbose_name="User",
        help_text="User who owns this startup"
    )
    stage = models.CharField(
        max_length=20,
        choices=Stage.choices,
        default=Stage.IDEA,
        verbose_name="Development Stage",
        help_text="Current development stage of the startup"
    )

    def clean(self):
        """
        Validates the Startup instance.

        - Ensures social_links only contain allowed platforms.
        - Validates URLs for the platforms.

        Raises:
            ValidationError: If social_links are invalid.
        """
        super().clean()

    def __str__(self):
        return self.company_name

    class Meta:
        db_table = "startups"
        ordering = ["company_name"]
        verbose_name = "Startup"
        verbose_name_plural = "Startups"
        indexes = [
            models.Index(fields=['company_name']),
            models.Index(fields=['stage']),
        ]
</file>

<file path="startups/signals.py">
from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver
from .models import Startup
from .documents import StartupDocument

@receiver(post_save, sender=Startup)
def update_startup_document(sender, instance, **kwargs):
    StartupDocument().update(instance)

@receiver(post_delete, sender=Startup)
def delete_startup_document(sender, instance, **kwargs):
    try:
        StartupDocument(meta={"id": instance.id}).delete()
    except Exception as e:
        print(f"Error deleting startup from Elasticsearch: {e}")
</file>

<file path="startups/urls.py">
from rest_framework.routers import DefaultRouter

from startups.views.startup import StartupViewSet
from startups.views.startup_elasticsearch import StartupDocumentView

router = DefaultRouter()
router.register(r'', StartupViewSet, basename='startup')
router.register(r'search', StartupDocumentView, basename='startups-search')

urlpatterns = router.urls
</file>

<file path="templates/email/activation.html">
{% extends "email/base.html" %}

{% block content %}
    <p>Hello {{ user.first_name }},</p>
    <p>Please click the button below to verify your email address:</p>
    <div style="margin: 25px 0;">
        <a href="{{ verification_url }}" 
           style="background-color: #4CAF50; 
                  color: white; 
                  padding: 12px 24px; 
                  text-decoration: none; 
                  border-radius: 4px; 
                  font-weight: bold;
                  display: inline-block;">
            Verify Email
        </a>
    </div>
    <p>Or copy and paste this link into your browser:</p>
    <p style="word-break: break-all; 
              background-color: #f5f5f5; 
              padding: 12px; 
              border-radius: 4px; 
              font-size: 14px;
              margin: 10px 0 20px 0;">
        {{ verification_url }}
    </p>
    <p>If you didn't request this, please ignore this email.</p>
{% endblock %}
</file>

<file path="templates/email/activation.txt">
Hello {{ user.first_name|default:user.email }},

Please verify your email address by clicking the link below:

{{ verification_url }}

If you didn't request this, please ignore this email.

Thank you,
The Team
</file>

<file path="templates/email/base.html">
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}{% endblock %}</title>
    <style type="text/css">
        body {
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background: #ffffff;
        }
        .footer {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            font-size: 12px;
            color: #777;
        }
    </style>
</head>
<body>
    <div class="container">
        {% block content %}{% endblock %}
    </div>
</body>
</html>
</file>

<file path="templates/email/password_reset.html">
{% extends "email/base.html" %}

{% block content %}
    <p>Hello {{ user.first_name }},</p>
    <p>You requested to reset your password. Please click the button below to set a new password:</p>
    <div style="margin: 25px 0;">
        <a href="{{ reset_url }}" 
           style="background-color: #4CAF50; 
                  color: white; 
                  padding: 12px 24px; 
                  text-decoration: none; 
                  border-radius: 4px; 
                  font-weight: bold;
                  display: inline-block;">
            Reset Password
        </a>
    </div>
    <p>Or copy and paste this link into your browser:</p>
    <p style="word-break: break-all; 
              background-color: #f5f5f5; 
              padding: 12px; 
              border-radius: 4px; 
              font-size: 14px;
              margin: 10px 0 20px 0;">
        {{ reset_url }}
    </p>
    <p>If you didn't request this, please ignore this email.</p>
{% endblock %}
</file>

<file path="templates/email/welcome_oauth_email.txt">
Hello,

You have successfully {{ action }} using {{ provider_name }}.
Now you can access Forum — the platform where startups meet investors and ideas become reality.
</file>

<file path="tests/communications/__init__.py">
# This file makes the tests/communications directory a Python package
</file>

<file path="tests/communications/factories.py">
import factory
from communications.models import NotificationType


class NotificationTypeFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = NotificationType

    code = factory.Sequence(lambda n: f"test_type_{n}")
    name = factory.LazyAttribute(lambda o: f"Test Type {o.code.split('_')[-1]}")
    description = "Test Description"
    default_frequency = 'immediate'
    is_active = True
</file>

<file path="tests/communications/test_notification_triggers.py">
from django.test import TransactionTestCase
from django.contrib.auth import get_user_model
from django.db import connection
from rest_framework.test import APIClient
from investors.models import Investor, SavedStartup
from startups.models import Startup, Industry, Location
from communications.models import Notification
User = get_user_model()


class NotificationTriggersTests(TransactionTestCase):
    """
    When an investor follows a startup (SavedStartup), a Notification
    should be created for the startup owner.

    We use TransactionTestCase to ensure that the on_commit signal executes.
    """
    reset_sequences = True

    def _sync_ntype_sequence(self): 
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT setval(
                    pg_get_serial_sequence('communications_notificationtype','id'),
                    COALESCE((SELECT MAX(id) FROM communications_notificationtype), 1),
                    TRUE
                );
            """)

    def setUp(self):
        self.industry = Industry.objects.create(name="IT")
        self.location = Location.objects.create(
            country="US", region="CA", city="SF", postal_code="94105"
        )

        self.investor_user = User.objects.create_user(
            email="investor@example.com", password="Pass123!", first_name="Ivan"
        )
        self.investor = Investor.objects.create(
            user=self.investor_user,
            company_name="API Capital",
            industry=self.industry,
            location=self.location,
            founded_year=2020,
            stage="mvp",
            fund_size="1000000.00",
        )

        self.startup_user = User.objects.create_user(
            email="owner@example.com", password="Pass123!", first_name="Owner"
        )
        self.startup = Startup.objects.create(
            user=self.startup_user,
            company_name="Rocket",
            industry=self.industry,
            location=self.location,
            founded_year=2021,
            stage="mvp",
            email="rocket@example.com",
        )
        self.client = APIClient()
        Notification.objects.all().delete()

        self._sync_ntype_sequence()

    def test_follow_creates_notification_for_startup_owner(self):
        self.assertEqual(Notification.objects.count(), 0)

        SavedStartup.objects.create(investor=self.investor, startup=self.startup)

        try:
            connection.commit()
        except Exception:
            pass

        self.assertEqual(Notification.objects.count(), 1, "Notification not created on follow")

        notif = Notification.objects.first()
        self.assertEqual(notif.user, self.startup_user)
        self.assertEqual(notif.notification_type.code, "startup_followed")
        self.assertEqual(int(notif.related_startup_id), int(self.startup.id))
        self.assertIn("followed your startup", notif.message.lower())
    def test_duplicate_follow_does_not_create_duplicate_notification(self):
        SavedStartup.objects.create(investor=self.investor, startup=self.startup)
        try:
            connection.commit()
        except Exception:
            pass

        self.assertEqual(Notification.objects.count(), 1)
        self.assertEqual(
            SavedStartup.objects.filter(investor=self.investor, startup=self.startup).count(),
            1,
        )

        try:
            SavedStartup.objects.create(investor=self.investor, startup=self.startup)
        except Exception:
            pass
        try:
            connection.commit()
        except Exception:
            pass

        self.assertEqual(Notification.objects.count(), 1, "Duplicate notification created")
</file>

<file path="tests/elasticsearch/setup_tests_data.py">
from django.conf import settings
from django.test import TestCase
from elasticsearch_dsl.connections import connections
from rest_framework.test import APIClient

from common.enums import Stage
from tests.factories import UserFactory, IndustryFactory, LocationFactory, StartupFactory, \
    CategoryFactory, ProjectFactory


class BaseElasticsearchAPITestCase(TestCase):

    @classmethod
    def setUpTestData(cls):
        """
        Configure Elasticsearch connection before any tests run.
        """
        cls.user1 = UserFactory.create()
        cls.user2 = UserFactory.create()
        cls.industry1 = IndustryFactory.create(name="Fintech")
        cls.industry2 = IndustryFactory.create(name="E-commerce")
        cls.location1 = LocationFactory.create(country="US")
        cls.location2 = LocationFactory.create(country="DE")
        cls.startup1 = StartupFactory.create(
            user=cls.user1,
            industry=cls.industry1,
            location=cls.location1,
            company_name="Fintech Solutions",
            stage=Stage.IDEA,
        )
        cls.startup2 = StartupFactory.create(
            user=cls.user2,
            industry=cls.industry2,
            location=cls.location2,
            company_name="ShopFast",
            stage=Stage.MVP,
        )
        cls.category1 = CategoryFactory.create(name="Tech")
        cls.category2 = CategoryFactory.create(name="Finance")
        cls.project1 = ProjectFactory.create(
            startup=cls.startup1,
            category=cls.category1,
            title="First Test Project"
        )
        cls.project2 = ProjectFactory.create(
            startup=cls.startup2,
            category=cls.category2,
            title="Second Test Project"
        )

        es_config = getattr(settings, 'ELASTICSEARCH_DSL', {}).get('default', {})
        hosts = es_config.get('hosts', 'http://localhost:9200')
        connections.configure(default={'hosts': hosts})

    def setUp(self):
        self.client = APIClient()
        self.client.force_authenticate(user=self.user1)

    @classmethod
    def tearDownClass(cls):
        super().tearDownClass()
</file>

<file path="tests/elasticsearch/test_startup_elasticsearch.py">
from django.urls import reverse
from elasticsearch_dsl import Index
from rest_framework import status
from common.enums import Stage
from startups.documents import StartupDocument
from tests.elasticsearch.setup_tests_data import BaseElasticsearchAPITestCase
from unittest.mock import patch


class StartupElasticsearchTests(BaseElasticsearchAPITestCase):
    """
    Integration tests for the Startup API with an Elasticsearch backend.

    These tests verify that:
    - The Elasticsearch index is correctly created and queried.
    - The search API returns expected results for various queries and filters.
    - Data setup is performed using factory_boy factories for cleaner test code.
    """

    def setUp(self):
        """ Create the Elasticsearch index and allow ES to index the documents. """
        super().setUp()
        self.index = Index('startups')
        try:
            self.index.delete()
        except:
            pass
        self.index.create()
        StartupDocument._doc_type.mapping.save('startups')

    def tearDown(self):
        """
        Delete the Elasticsearch index after each test.
        """
        try:
            self.index.delete()
        except Exception:
            pass

    @patch("users.permissions.IsStartupUser.has_permission", return_value=True)
    @patch("users.permissions.IsStartupUser.has_object_permission", return_value=True)
    def test_empty_query_returns_all_startups(self, mock_has_object_permission, mock_has_permission):
        """
        Ensure that an empty search query returns all startups in the index.
        """
        url = reverse('startup-list')
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 2)

    @patch("users.permissions.IsStartupUser.has_permission", return_value=True)
    @patch("users.permissions.IsStartupUser.has_object_permission", return_value=True)
    def test_no_results_for_non_existent_company_name(self, mock_has_object_permission, mock_has_permission):
        """
        Ensure that searching for a non-existent company name returns no results.
        """
        url = reverse('startup-list')
        response = self.client.get(url, {'search': 'Nonexistent Company'})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 0)

    @patch("users.permissions.IsStartupUser.has_permission", return_value=True)
    @patch("users.permissions.IsStartupUser.has_object_permission", return_value=True)
    def test_combined_filters_work_correctly(self, mock_has_object_permission, mock_has_permission):
        """
        Ensure that filtering by stage and location returns the correct startup.
        """
        url = reverse('startup-list')
        response = self.client.get(url, {
            'stage': Stage.MVP,
            'location.country': 'DE'
        })
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]['company_name'], "ShopFast")
</file>

<file path="tests/fastapi_app/test_hello.py">
from fastapi.testclient import TestClient
from fastapi_app.main import app

client = TestClient(app)


def test_hello():
    response = client.get("/hello")
    assert response.status_code == 200
    assert response.json() == {"message": "Hello from FastAPI"}


def test_healthcheck():
    response = client.get("/healthcheck")
    assert response.status_code == 200
    assert response.json() == {"status": "ok"}
</file>

<file path="tests/investments/test_model.py">
from django.core.exceptions import ValidationError
from django.db import IntegrityError
from investments.models import Subscription
from tests.test_base_case import BaseAPITestCase


class SubscriptionModelTests(BaseAPITestCase):

    def test_create_subscription_success(self):
        """Test successful creation of a subscription."""
        sub = self.get_or_create_subscription(
            investor=self.investor1,
            project=self.project,
            amount=200.00,
            investment_share=2.00
        )
        self.assertEqual(sub.amount, 200.00)
        self.assertEqual(sub.investor, self.investor1)
        self.assertEqual(sub.project, self.project)

    def test_unique_investor_project_constraint(self):
        """Test that an investor cannot subscribe to the same project twice."""
        self.get_or_create_subscription(
            investor=self.investor1,
            project=self.project,
            amount=50.00
        )
        with self.assertRaises(IntegrityError) as ctx:
            self.get_or_create_subscription(
                investor=self.investor1,
                project=self.project,
                amount=70.00
            )
        self.assertIn("unique_investor_project", str(ctx.exception))

    def test_amount_min_value_validation(self):
        """Test that the minimum allowed investment amount is 0.01."""
        sub = Subscription(
            investor=self.investor1,
            project=self.project,
            amount=0.00
        )
        with self.assertRaises(ValidationError) as ctx:
            sub.full_clean()
        self.assertIn("Ensure this value is greater than or equal to 0.01", str(ctx.exception))

    def test_investor_cannot_invest_in_own_project(self):
        """Test that an investor cannot invest in their own project."""

        own_startup = self.get_or_create_startup(
            user=self.investor1.user,
            industry=self.industry,
            company_name="Investor Startup",
            location=self.startup_location
        )

        own_project = self.get_or_create_project(
            title="Project Beta",
            startup=own_startup
        )

        sub = Subscription(
            investor=self.investor1,
            project=own_project,
            amount=100.00
        )

        with self.assertRaises(ValidationError) as ctx:
            sub.full_clean()

        self.assertIn(
            "Investors cannot invest in their own startup's project.",
            str(ctx.exception)
        )

    def test_investment_share_value_range(self):
        """Test that investment_share must be between 0.00 and 100.00."""
        sub = Subscription(
            investor=self.investor1,
            project=self.project,
            amount=50.00,
            investment_share=150.00
        )
        with self.assertRaises(ValidationError) as ctx:
            sub.full_clean()
        self.assertIn("Ensure this value is less than or equal to 100", str(ctx.exception))
</file>

<file path="tests/investments/test_serializer_update.py">
from decimal import Decimal
from rest_framework import serializers
from investments.serializers.subscription_update import SubscriptionUpdateSerializer
from tests.test_base_case import BaseAPITestCase

class SubscriptionSerializerUpdateTests(BaseAPITestCase):
    """
    Tests for updating existing Subscription instances through the serializer.
    Covers:
        - Successful amount updates and share recalculation
        - No change when amount remains the same
        - Partial updates without amount field
        - Restrictions on changing investor or project during update
    """

    def test_update_subscription_amount_successfully(self):
        """Allow updating subscription amount and recalculate share."""
        subscription = self.get_or_create_subscription(
            investor=self.investor1,
            project=self.project,
            amount=Decimal("200.00"),
            investment_share=Decimal("0.02")
        )
        data = {"amount": Decimal("500.00")}

        serializer = SubscriptionUpdateSerializer(subscription, data=data, partial=True)
        self.assertTrue(serializer.is_valid(), serializer.errors)
        updated = serializer.save()

        self.assertEqual(updated.amount, Decimal("500.00"))
        self.assertAlmostEqual(updated.investment_share * 100, Decimal("5.00"))
        self.assertEqual(updated.investor, subscription.investor)
        self.assertEqual(updated.project, subscription.project)

    def test_update_subscription_amount_unchanged(self):
        """Updating with the same amount keeps investment share unchanged."""
        subscription = self.get_or_create_subscription(
            investor=self.investor1,
            project=self.project,
            amount=Decimal("200.00"),
            investment_share=Decimal("0.02")
        )
        data = {"amount": Decimal("200.00")}

        serializer = SubscriptionUpdateSerializer(subscription, data=data, partial=True)
        self.assertTrue(serializer.is_valid(), serializer.errors)
        updated = serializer.save()

        self.assertEqual(updated.amount, Decimal("200.00"))
        self.assertEqual(updated.investment_share * 100, Decimal("2.00"))

    def test_update_subscription_without_amount_field(self):
        """Partial update without amount leaves subscription unchanged."""
        subscription = self.get_or_create_subscription(
            investor=self.investor1,
            project=self.project,
            amount=Decimal("200.00"),
            investment_share=Decimal("0.02")
        )
        data = {}

        serializer = SubscriptionUpdateSerializer(subscription, data=data, partial=True)
        self.assertTrue(serializer.is_valid(), serializer.errors)
        updated = serializer.save()

        self.assertEqual(updated.amount, Decimal("200.00"))
        self.assertEqual(updated.investment_share * 100, Decimal("2.00"))

    def test_cannot_change_investor_on_update(self):
        """Prohibit changing investor on subscription update."""
        subscription = self.get_or_create_subscription(
            investor=self.investor1,
            project=self.project,
            amount=Decimal("200.00"),
            investment_share=Decimal("0.02")
        )
        data = {"investor": self.investor2.id, "amount": Decimal("100.00")}

        serializer = SubscriptionUpdateSerializer(subscription, data=data, partial=True)
        with self.assertRaises(serializers.ValidationError) as context:
            serializer.is_valid(raise_exception=True)

        self.assertIn("investor", context.exception.detail)

    def test_cannot_change_project_on_update(self):
        """Prohibit changing project on subscription update."""
        subscription = self.get_or_create_subscription(
            investor=self.investor1,
            project=self.project,
            amount=Decimal("200.00"),
            investment_share=Decimal("0.02")
        )
        new_project = self.get_or_create_project(
            title="Other Project",
            funding_goal=Decimal("20000.00")
        )
        data = {"project": new_project.id, "amount": Decimal("100.00")}

        serializer = SubscriptionUpdateSerializer(subscription, data=data, partial=True)
        with self.assertRaises(serializers.ValidationError) as context:
            serializer.is_valid(raise_exception=True)

        self.assertIn("project", context.exception.detail)
</file>

<file path="tests/investments/test_services.py">
from decimal import Decimal
from django.db import models
from django.test.utils import override_settings
from investments.models import Subscription
from investments.services.investment_share_service import recalculate_investment_shares, calculate_investment_share
from tests.test_base_case import BaseAPITestCase


@override_settings(CELERY_TASK_ALWAYS_EAGER=True)
class InvestmentShareServiceTest(BaseAPITestCase):
    """
    Test case for verifying the correct calculation of investment shares
    for subscriptions related to a project.
    """

    def test_recalculate_shares(self):
        """
        Subscriptions with amounts 100 and 300 should have shares 1.00 and 3.00,
        and total shares should be 4.00.
        """
        s1 = self.get_or_create_subscription(self.investor1, self.project, 100, 0.00)
        s2 = self.get_or_create_subscription(self.investor2, self.project, 300, 0.00)

        recalculate_investment_shares(self.project)

        s1.refresh_from_db()
        s2.refresh_from_db()

        self.assertEqual(s1.investment_share * 100, 1.00)
        self.assertEqual(s2.investment_share * 100, 3.00)

        total_share = Subscription.objects.filter(project=self.project).aggregate(
            total=models.Sum('investment_share')
        )['total']
        self.assertEqual(total_share * 100, Decimal('4.00'))

    def test_no_subscriptions(self):
        """
        Recalculation on a project with no subscriptions should not raise errors.
        """
        try:
            recalculate_investment_shares(self.project)
        except Exception as e:
            self.fail(f"Recalculation failed with no subscriptions: {e}")

    def test_zero_total_amount(self):
        """
        If all amounts are zero, all investment shares should be 0.00.
        """
        s1 = self.get_or_create_subscription(self.investor1, self.project, 0.00, 0.00)
        s2 = self.get_or_create_subscription(self.investor2, self.project, 0.00, 0.00)

        recalculate_investment_shares(self.project)

        s1.refresh_from_db()
        s2.refresh_from_db()

        self.assertEqual(s1.investment_share, 0.00)
        self.assertEqual(s2.investment_share, 0.00)

    def test_single_subscription_gets_100_percent(self):
        """
        A single subscription should get 100% investment share.
        """
        s1 = self.get_or_create_subscription(self.investor1, self.project, 10000.00, 0.00)

        recalculate_investment_shares(self.project)

        s1.refresh_from_db()
        self.assertEqual(s1.investment_share * 100, 100.0)

    def test_investment_share_precision(self):
        """
        Shares should be calculated as a percentage of funding_goal
        and rounded to 2 decimal places.
        """
        s1 = self.get_or_create_subscription(self.investor1, self.project, Decimal("3333.33"), Decimal("0.00"))
        s2 = self.get_or_create_subscription(self.investor2, self.project, Decimal("6666.67"), Decimal("0.00"))

        recalculate_investment_shares(self.project)

        s1.refresh_from_db()
        s2.refresh_from_db()

        expected_s1 = calculate_investment_share(s1.amount, self.project.funding_goal)
        expected_s2 = calculate_investment_share(s2.amount, self.project.funding_goal)

        self.assertEqual(s1.investment_share, expected_s1)
        self.assertEqual(s2.investment_share, expected_s2)
</file>

<file path="tests/investors/test_logging.py">
from django.urls import reverse
from django.contrib.auth.hashers import make_password
from rest_framework import status
from investors.models import Investor, SavedStartup
from startups.models import Startup
from users.models import User, UserRole
from tests.test_base_case import BaseAPITestCase as BaseInvestorTestCase


class SavedStartupLoggingTests(BaseInvestorTestCase):
    def setUp(self):
        super().setUp()

        self.investor = Investor.objects.create(
            user=self.user,
            industry=self.industry,
            company_name="API Capital",
            location=self.location,
            email="api.capital@example.com",
            founded_year=2020,
            team_size=5,
            stage="mvp",
            fund_size="1000000.00",
        )

        role_user = UserRole.objects.get(role="user")
        self.startup_owner = User.objects.create(
            email="startup.owner@example.com",
            password=make_password("Pass123!"),
            first_name="Star",
            last_name="Tup",
            role=role_user,
        )
        self.startup = Startup.objects.create(
            user=self.startup_owner,
            industry=self.industry,
            company_name="Cool Startup",
            location=self.location,
            email="info@coolstartup.com",
            founded_year=2020,
            team_size=10,
            stage="mvp",
        )

        self.list_url = reverse("saved-startup-list")

    def test_create_logs(self):
        with self.assertLogs("investors.views", level="INFO") as cap:
            res = self.client.post(
                self.list_url, {"startup": self.startup.id, "status": "watching"}, format="json"
            )
        self.assertEqual(res.status_code, status.HTTP_201_CREATED, res.data)
        msgs = "\n".join(r.getMessage() for r in cap.records)
        self.assertTrue("SavedStartup" in msgs and ("create" in msgs or "created" in msgs))

    def test_update_logs(self):
        obj = SavedStartup.objects.create(investor=self.investor, startup=self.startup, status="watching")
        url = reverse("saved-startup-detail", args=[obj.id])
        with self.assertLogs("investors.views", level="INFO") as cap:
            res = self.client.patch(url, {"status": "contacted"}, format="json")
        self.assertEqual(res.status_code, status.HTTP_200_OK, res.data)
        msgs = "\n".join(r.getMessage() for r in cap.records)
        self.assertTrue("SavedStartup" in msgs and ("update" in msgs or "updated" in msgs))

    def test_delete_logs(self):
        obj = SavedStartup.objects.create(investor=self.investor, startup=self.startup, status="watching")
        url = reverse("saved-startup-detail", args=[obj.id])
        with self.assertLogs("investors.views", level="INFO") as cap:
            res = self.client.delete(url)
        self.assertEqual(res.status_code, status.HTTP_204_NO_CONTENT, res.data)
        msgs = "\n".join(r.getMessage() for r in cap.records)
        self.assertTrue("SavedStartup" in msgs and ("delete" in msgs or "deleted" in msgs))


    def test_create_logs_missing_startup(self):
        with self.assertLogs("investors.views", level="WARNING") as cap:
            res = self.client.post(self.list_url, {}, format="json")
        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST, res.data)
        msgs = "\n".join(r.getMessage() for r in cap.records)
        self.assertIn("missing startup", msgs.lower())

    def test_create_logs_invalid_status(self):
        with self.assertLogs("investors.views", level="WARNING") as cap:
            res = self.client.post(self.list_url, {"startup": self.startup.id, "status": "nope"}, format="json")
        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST, res.data)
        msgs = "\n".join(r.getMessage() for r in cap.records)
        self.assertIn("invalid status", msgs.lower())

    def test_create_logs_own_startup(self):
        own = Startup.objects.create(
            user=self.user,
            industry=self.industry,
            company_name="My Own",
            location=self.location,
            email="me@own.com",
            founded_year=2024,
            team_size=1,
            stage="idea",
        )
        with self.assertLogs("investors.views", level="WARNING") as cap:
            res = self.client.post(self.list_url, {"startup": own.id}, format="json")
        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST, res.data)
        msgs = "\n".join(r.getMessage() for r in cap.records)
        self.assertIn("own startup", msgs.lower())

    def test_create_logs_duplicate(self):
        first = self.client.post(self.list_url, {"startup": self.startup.id}, format="json")
        self.assertEqual(first.status_code, status.HTTP_201_CREATED, first.data)
        with self.assertLogs("investors.views", level="WARNING") as cap:
            dup = self.client.post(self.list_url, {"startup": self.startup.id}, format="json")
        self.assertEqual(dup.status_code, status.HTTP_400_BAD_REQUEST, dup.data)
        msgs = "\n".join(r.getMessage() for r in cap.records)
        self.assertIn("duplicate", msgs.lower())

    def test_list_logs_denied_for_non_investor(self):
        role_user = UserRole.objects.get(role="user")
        plain_user = User.objects.create(
            email="plain.logging@example.com",
            password=make_password("Pass123!"),
            first_name="No",
            last_name="Investor",
            role=role_user,
        )
        self.client.force_authenticate(user=plain_user)
        with self.assertLogs("users.permissions", level="WARNING") as cap:
            res = self.client.get(self.list_url)

        self.assertEqual(res.status_code, status.HTTP_403_FORBIDDEN, res.data)
        msgs = "\n".join(r.getMessage() for r in cap.records)
        self.assertIn("Permission denied", msgs)
        self.assertIn("Not an investor", msgs)

    def test_update_logs_validation_error(self):
        obj = SavedStartup.objects.create(investor=self.investor, startup=self.startup, status="watching")
        url = reverse("saved-startup-detail", args=[obj.id])
        with self.assertLogs("investors.views", level="WARNING") as cap:
            res = self.client.patch(url, {"status": "bad-status"}, format="json")
        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST, res.data)
        msgs = "\n".join(r.getMessage() for r in cap.records)
        self.assertIn("update validation error", msgs.lower())
</file>

<file path="tests/investors/test_model.py">
import datetime
from decimal import Decimal

from django.core.exceptions import ValidationError

from investors.models import Investor
from tests.test_base_case import BaseAPITestCase


class InvestorModelCleanTests(BaseAPITestCase):
    """
    Unit tests for the Investor model's validation logic.

    This test suite verifies that the Investor model's full_clean and clean methods
    enforce field requirements and constraints correctly, including:
    - Required fields presence
    - Valid ranges for numeric and date fields
    - Business rules like minimum description length
    - Proper default values assignment
    """

    def test_valid_clean_should_pass(self):
        """
        Test that an Investor instance with all valid fields passes full validation.
        """
        investor = Investor(
            user=self.user,
            company_name='InvestX',
            founded_year=2020,
            industry=self.industry,
            location=self.location,
            fund_size=Decimal('1000000.00'),
            stage=Investor.stage.field.default,
            email='investx@example.com'
        )
        try:
            investor.full_clean()
        except ValidationError:
            self.fail("Investor.full_clean() raised ValidationError unexpectedly")

    def test_missing_required_fields_should_fail(self):
        """
        Test that missing required fields raise ValidationError.
        """
        investor = Investor()
        with self.assertRaises(ValidationError) as cm:
            investor.full_clean()
        errors = cm.exception.message_dict
        self.assertIn('user', errors)
        self.assertIn('company_name', errors)
        self.assertIn('founded_year', errors)
        self.assertIn('industry', errors)
        self.assertIn('location', errors)
        self.assertIn('email', errors)

    def test_invalid_founded_year_should_fail(self):
        """
        Test that founded_year outside valid range (less than 1900 or future year)
        raises ValidationError.
        """
        investor = Investor(
            user=self.user,
            company_name='InvestInvalidYear',
            founded_year=1800,
            industry=self.industry,
            location=self.location,
            fund_size=Decimal('10000.00'),
            email='testinvalidinvestor@example.com',
            stage=Investor.stage.field.default
        )
        with self.assertRaises(ValidationError) as cm:
            investor.full_clean()
        self.assertIn('founded_year', cm.exception.message_dict)

        future_year = datetime.datetime.now().year + 1
        investor.founded_year = future_year
        with self.assertRaises(ValidationError) as cm:
            investor.full_clean()
        self.assertIn('founded_year', cm.exception.message_dict)

    def test_negative_fund_size_should_fail(self):
        """
        Test that negative fund_size raises ValidationError.
        """
        investor = Investor(
            user=self.user,
            company_name='InvestNegativeFund',
            founded_year=2020,
            industry=self.industry,
            location=self.location,
            fund_size=Decimal('-100.00'),
            email='testnegfund@example.com',
            stage='mvp'
        )
        with self.assertRaises(ValidationError) as cm:
            investor.full_clean()
        self.assertIn('fund_size', cm.exception.message_dict)

    def test_short_description_should_fail(self):
        """
        Test that a description shorter than 10 chars raises ValidationError.
        This tests the abstract Company.clean() method indirectly.
        """
        investor = Investor(
            user=self.user,
            company_name='InvestDescFail',
            founded_year=2020,
            industry=self.industry,
            location=self.location,
            fund_size=Decimal('1000.00'),
            email='descfail@example.com',
            stage='mvp',
            description='Too short'
        )
        with self.assertRaises(ValidationError) as cm:
            investor.full_clean()
        self.assertIn('description', cm.exception.message_dict)

    def test_default_stage_is_set_if_missing(self):
        """
        Test that stage is set to default Stage.MVP if not provided.
        """
        investor = Investor(
            user=self.user,
            company_name='InvestDefaultStage',
            founded_year=2020,
            industry=self.industry,
            location=self.location,
            fund_size=Decimal('50000.00'),
            email='defaultstage@example.com'
        )
        investor.full_clean()
        investor.clean()
        self.assertEqual(investor.stage, Investor.stage.field.default)
</file>

<file path="tests/investors/test_saved_startup_viewset.py">
from django.contrib.auth import get_user_model
from django.contrib.auth.hashers import make_password
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase

from investors.models import Investor, SavedStartup
from startups.models import Startup, Industry, Location
from users.models import UserRole


class SavedStartupViewSetTests(APITestCase):
    """
    Tests for the SavedStartupViewSet registered under the basename 'saved-startup'.

    Endpoints via DefaultRouter:
        - POST   /saved/                 -> create a saved startup
        - GET    /saved/                 -> list current investor's saved startups
        - PATCH  /saved/{id}/            -> partial update (e.g., status, notes)
        - DELETE /saved/{id}/            -> delete a saved startup
    """

    def setUp(self):
        """
        Prepare:
        - roles, users (investor + startup owner)
        - location/industry
        - investor profile for self.user
        - a startup owned by another user
        - authenticate as investor user
        """
        User = get_user_model()

        # roles (many projects pre-seed these; create if missing)
        self.role_user, _ = UserRole.objects.get_or_create(role="user")

        # base data for foreign keys
        self.location = Location.objects.create(country="US", city="NYC", region="NY")
        self.industry = Industry.objects.create(name="FinTech")

        # investor user (the authenticated caller)
        self.user = User.objects.create(
            email="inv@example.com",
            password=make_password("Pass123!"),
            first_name="In",
            last_name="Vestor",
            role=self.role_user,
        )
        self.investor = Investor.objects.create(
            user=self.user,
            industry=self.industry,
            company_name="API Capital",
            location=self.location,
            email="api.capital@example.com",
            founded_year=2020,
            team_size=5,
            stage="mvp",
            fund_size="1000000.00",
        )

        # startup owner (another user)
        self.startup_owner = User.objects.create(
            email="startup.owner@example.com",
            password=make_password("Pass123!"),
            first_name="Star",
            last_name="Tup",
            role=self.role_user,
        )
        self.startup = Startup.objects.create(
            user=self.startup_owner,
            industry=self.industry,
            company_name="Cool Startup",
            location=self.location,
            email="info@coolstartup.com",
            founded_year=2020,
            team_size=10,
            stage="mvp",
        )

        # router names from: router.register(r'saved', SavedStartupViewSet, basename='saved-startup')
        self.list_url = reverse("saved-startup-list")

        # authenticate as investor user
        self.client.force_authenticate(self.user)

    def test_create_saved_startup_returns_201(self):
        """First save should create a record and return 201 Created."""
        resp = self.client.post(self.list_url, data={"startup": self.startup.id}, format="json")
        self.assertEqual(resp.status_code, status.HTTP_201_CREATED)
        self.assertEqual(
            SavedStartup.objects.filter(investor=self.investor, startup=self.startup).count(), 1
        )
        body = resp.json()
        self.assertIsNotNone(body.get("id"))
        self.assertEqual(body.get("startup_name"), self.startup.company_name)

    def test_duplicate_save_returns_400_no_duplicate_row(self):
        """
        Second save of the same startup should NOT create another row.
        Your ViewSet raises ValidationError("Already saved.") -> 400.
        """
        first = self.client.post(self.list_url, data={"startup": self.startup.id}, format="json")
        self.assertEqual(first.status_code, status.HTTP_201_CREATED)

        second = self.client.post(self.list_url, data={"startup": self.startup.id}, format="json")
        self.assertEqual(second.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertEqual(
            SavedStartup.objects.filter(investor=self.investor, startup=self.startup).count(), 1
        )

    def test_cannot_save_own_startup_returns_400(self):
        """Investor is not allowed to save their own startup -> 400."""
        my_startup = Startup.objects.create(
            user=self.user,
            industry=self.industry,
            company_name="My Company",
            location=self.location,
            email="me@myco.com",
            founded_year=2021,
            team_size=3,
            stage="mvp",
        )
        resp = self.client.post(self.list_url, data={"startup": my_startup.id}, format="json")
        self.assertEqual(resp.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertEqual(
            SavedStartup.objects.filter(investor=self.investor, startup=my_startup).count(), 0
        )

    def test_list_returns_only_current_investor_items(self):
        """
        Ensure list endpoint returns only rows belonging to the authenticated investor.
        """
        # Create a row for another investor
        User = get_user_model()
        other_user = User.objects.create_user(email="other@ex.com", password="x", role=self.role_user)
        other_investor = Investor.objects.create(
            user=other_user,
            industry=self.industry,
            company_name="Other Capital",
            location=self.location,
            email="other@ex.com",
            founded_year=2020,
            team_size=2,
            stage="mvp",
            fund_size="0.00",
        )
        SavedStartup.objects.create(investor=other_investor, startup=self.startup)

        # Create our own row
        self.client.post(self.list_url, data={"startup": self.startup.id}, format="json")

        r = self.client.get(self.list_url)
        self.assertEqual(r.status_code, status.HTTP_200_OK)
        data = r.json()
        self.assertEqual(len(data), 1)
        self.assertEqual(data[0]["startup_name"], self.startup.company_name)

    def test_partial_update_status(self):
        """PATCH should update allowed fields (e.g., status) for own row."""
        # create
        self.client.post(self.list_url, data={"startup": self.startup.id}, format="json")
        obj = SavedStartup.objects.get(investor=self.investor, startup=self.startup)

        url = reverse("saved-startup-detail", args=[obj.id])
        r = self.client.patch(url, data={"status": "contacted"}, format="json")
        self.assertEqual(r.status_code, status.HTTP_200_OK)
        obj.refresh_from_db()
        self.assertEqual(obj.status, "contacted")

    def test_invalid_status_returns_400(self):
        """PATCH invalid status should return 400 and not change the row."""
        # create
        self.client.post(self.list_url, data={"startup": self.startup.id}, format="json")
        obj = SavedStartup.objects.get(investor=self.investor, startup=self.startup)

        url = reverse("saved-startup-detail", args=[obj.id])
        r = self.client.patch(url, data={"status": "not-a-valid"}, format="json")
        self.assertEqual(r.status_code, status.HTTP_400_BAD_REQUEST)
        obj.refresh_from_db()
        self.assertNotEqual(obj.status, "not-a-valid")

    def test_delete_returns_204_and_removes_row(self):
        """DELETE should return 204 No Content and remove the record."""
        self.client.post(self.list_url, data={"startup": self.startup.id}, format="json")
        obj = SavedStartup.objects.get(investor=self.investor, startup=self.startup)

        url = reverse("saved-startup-detail", args=[obj.id])
        r = self.client.delete(url)
        self.assertEqual(r.status_code, status.HTTP_204_NO_CONTENT)
        self.assertFalse(SavedStartup.objects.filter(pk=obj.pk).exists())

    def test_create_missing_startup_field_returns_400(self):
        """POST without 'startup' field should fail with 400."""
        resp = self.client.post(self.list_url, data={}, format="json")
        self.assertEqual(resp.status_code, status.HTTP_400_BAD_REQUEST)

    def test_list_requires_investor_profile_returns_403(self):
        """
        get_queryset raises PermissionDenied for non-investors.
        Expect 403 when authenticated user has no investor profile.
        """
        User = get_user_model()
        plain = User.objects.create_user(email="plain@ex.com", password="x", role=self.role_user)
        self.client.force_authenticate(plain)
        r = self.client.get(self.list_url)
        self.assertEqual(r.status_code, status.HTTP_403_FORBIDDEN)

    def test_cannot_update_or_delete_others_row(self):
        """
        Ensure a different investor cannot update/delete someone else's saved row.
        With get_queryset filtering to current investor, this should 404.
        """
        # create row as self
        self.client.post(self.list_url, data={"startup": self.startup.id}, format="json")
        obj = SavedStartup.objects.get(investor=self.investor, startup=self.startup)

        # switch to another investor
        User = get_user_model()
        other_user = User.objects.create_user(email="evil@ex.com", password="x", role=self.role_user)
        other_investor = Investor.objects.create(
            user=other_user,
            industry=self.industry,
            company_name="Evil Capital",
            location=self.location,
            email="evil@ex.com",
            founded_year=2020,
            team_size=2,
            stage="mvp",
            fund_size="0.00",
        )
        self.client.force_authenticate(other_user)

        detail_url = reverse("saved-startup-detail", args=[obj.id])

        # PATCH
        r1 = self.client.patch(detail_url, data={"status": "contacted"}, format="json")
        self.assertEqual(r1.status_code, status.HTTP_404_NOT_FOUND)

        # DELETE
        r2 = self.client.delete(detail_url)
        self.assertEqual(r2.status_code, status.HTTP_404_NOT_FOUND)
</file>

<file path="tests/investors/test_serializer.py">
import datetime
from common.enums import Stage
from investors.serializers.investor import InvestorSerializer
from ddt import ddt, data, unpack
from tests.test_base_case import BaseAPITestCase


class InvestorSerializerValidDataTests(BaseAPITestCase):
    """Tests for valid investor data and some edge cases."""

    def test_valid_investor_data(self):
        """Test that the serializer accepts valid investor data."""
        validate_data = {
            'company_name': 'API Investor',
            'email': 'investor@api.com',
            'industry': self.industry.pk,
            'location': self.location.pk,
            'founded_year': 2020,
            'team_size': 5,
            'stage': Stage.MVP,
            'fund_size': '1000000.00',
        }
        serializer = InvestorSerializer(data=validate_data)
        self.assertTrue(serializer.is_valid(), serializer.errors)

    def test_very_long_company_name(self):
        """Test that the serializer accepts a very long but valid company name."""
        long_name = 'A' * 254
        invalid_company_name_data = {
            'company_name': long_name,
            'email': 'validemail@example.com',
            'industry': self.industry.pk,
            'location': self.location.pk,
            'founded_year': 2020,
            'team_size': 5,
            'stage': Stage.LAUNCH,
            'fund_size': '1000000.00',
        }
        serializer = InvestorSerializer(data=invalid_company_name_data)
        self.assertTrue(serializer.is_valid(), serializer.errors)

    def test_minimum_team_size(self):
        """Test that the serializer accepts the minimum valid team size of one."""
        minimum_team_size_data = {
            'company_name': 'Valid Company',
            'email': 'validemail@example.com',
            'industry': self.industry.pk,
            'location': self.location.pk,
            'founded_year': 2020,
            'team_size': 1,
            'stage': Stage.MVP,
            'fund_size': '100000.00',
        }
        serializer = InvestorSerializer(data=minimum_team_size_data)
        self.assertTrue(serializer.is_valid(), serializer.errors)

    def test_maximum_fund_size(self):
        """Test that the serializer accepts a very large fund size."""
        large_fund = '999999999999999999.99'
        maximum_fund_size_data = {
            'company_name': 'Valid Company',
            'email': 'validemail@example.com',
            'industry': self.industry.pk,
            'location': self.location.pk,
            'founded_year': 2020,
            'team_size': 5,
            'stage': Stage.MVP,
            'fund_size': large_fund,
        }
        serializer = InvestorSerializer(data=maximum_fund_size_data)
        self.assertTrue(serializer.is_valid(), serializer.errors)

    def test_missing_required_fields(self):
        """
        Test that missing required fields cause validation errors
        with clear and informative messages.
        """
        serializer = InvestorSerializer(data={})
        self.assertFalse(serializer.is_valid())

        required_fields = ['company_name', 'email', 'industry', 'location', 'founded_year']
        for field in required_fields:
            self.assertIn(field, serializer.errors)
            self.assertTrue(len(serializer.errors[field]) > 0, f"Error message missing for {field}")

    def test_short_description_should_fail(self):
        """Description < 10 chars should raise validation error."""
        data = {
            'company_name': 'ShortDesc',
            'email': 'shortdesc@example.com',
            'industry': self.industry.pk,
            'location': self.location.pk,
            'founded_year': 2020,
            'team_size': 5,
            'stage': Stage.MVP,
            'fund_size': '100000.00',
            'description': 'Too short'
        }
        serializer = InvestorSerializer(data=data)
        self.assertFalse(serializer.is_valid())
        self.assertIn('description', serializer.errors)


@ddt
class InvestorSerializerInvalidFieldsTests(BaseAPITestCase):
    """Parameterized tests for invalid field values in the serializer."""

    @data(
        ('company_name', '   ', "Company name must not be empty."),
        ('company_name', 'A' * 255, "Company name cannot exceed 254 characters."),
        ('email', 'invalid-email', "Invalid email address format."),
        ('fund_size', '-1000.00', "Ensure this value is greater than or equal to 0."),
        ('fund_size', '99999999999999999999.99', "Fund size is too large."),
        ('founded_year', datetime.datetime.now().year + 1, "Ensure this value is less than or equal to"),
        ('team_size', 0, "Ensure this value is greater than or equal to 1."),
        ('stage', 'INVALID_STAGE', "Invalid stage choice."),
        ('description', 'Too short', "Description must be at least 10 characters long if provided.")
    )
    @unpack
    def test_invalid_field_values(self, field, value, expected_error_msg):
        """
        Test that invalid values for fields cause serializer validation errors.

        Args:
            field (str): Field name to test.
            value: Invalid value to assign.
            expected_error_msg (str): Expected error message substring.
        """
        valid_data = {'company_name': "Valid Company", 'email': "valid@example.com", 'industry': self.industry.pk,
                      'location': self.location.pk, 'founded_year': 2020, 'team_size': 5, 'stage': Stage.MVP,
                      'fund_size': "100000.00", 'description': "This is a valid description.", field: value}
        serializer = InvestorSerializer(data=valid_data)
        self.assertFalse(serializer.is_valid(), f"{field} with value {value} unexpectedly passed validation.")
        self.assertIn(field, serializer.errors)
        if expected_error_msg:
            error_text = str(serializer.errors[field][0])
            self.assertIn(expected_error_msg, error_text,
                          f"{field} error message '{error_text}' does not contain '{expected_error_msg}'")
</file>

<file path="tests/projects/test_category_model.py">
from django.test import TestCase
from unittest.mock import patch

from projects.models import Category


class CategoryModelTests(TestCase):
    """Tests for the Category model."""

    def test_create_category(self):
        """Category can be created with valid data."""
        category = Category.objects.create(name="Tech", description="Technology related projects")
        self.assertEqual(category.name, "Tech")
        self.assertEqual(category.description, "Technology related projects")
        self.assertIsNotNone(category.created_at)

    def test_name_must_be_unique(self):
        """Category name must be unique."""
        Category.objects.create(name="Health")
        with self.assertRaises(Exception):
            Category.objects.create(name="Health")  # Duplicate name

    def test_str_returns_name(self):
        """__str__ method should return the category name."""
        category = Category.objects.create(name="Finance")
        self.assertEqual(str(category), "Finance")

    def test_ordering_by_name(self):
        """Categories should be ordered alphabetically by name."""
        cat_b = Category.objects.create(name="Beta")
        cat_a = Category.objects.create(name="Alpha")
        categories = list(Category.objects.all())
        self.assertEqual(categories, [cat_a, cat_b])

    @patch("projects.models.validate_forbidden_names")
    def test_clean_calls_validate_forbidden_names(self, mock_validate):
        """clean() should call validate_forbidden_names with correct arguments."""
        category = Category(name="TestName")
        category.clean()
        mock_validate.assert_called_once_with("TestName", field_name="name")
</file>

<file path="tests/projects/test_project_model.py">
from decimal import Decimal
from ddt import ddt, data, unpack
from django.core.exceptions import ValidationError
from projects.models import Project, ProjectStatus
from tests.test_base_case import BaseAPITestCase


@ddt
class ProjectModelCleanTests(BaseAPITestCase):
    """
    Test suite for the Project model's clean() method validation logic.
    Uses DDT for parameterized scenarios.
    """

    def create_project(self, **overrides):
        """Helper to create a Project instance with defaults and overrides."""
        defaults = {
            'startup': self.startup,
            'title': 'DefaultProject',
            'funding_goal': Decimal('10000.00'),
            'current_funding': Decimal('0.00'),
            'category': self.category,
            'email': f'{overrides.get("title", "default").lower()}@example.com',
            'status': ProjectStatus.DRAFT,
            'is_participant': False,
            'business_plan': None
        }
        defaults.update(overrides)
        return Project(**defaults)

    @data(
        ('current_funding', {'current_funding': Decimal('20000.00')}, 'current_funding'),
        ('business_plan', {'status': ProjectStatus.IN_PROGRESS, 'business_plan': None}, 'business_plan'),
        ('business_plan', {'status': ProjectStatus.COMPLETED, 'business_plan': None}, 'business_plan'),
        ('funding_goal', {'is_participant': True, 'funding_goal': None}, 'funding_goal'),
        ('multiple', {
            'current_funding': Decimal('20000.00'),
            'status': ProjectStatus.COMPLETED,
            'business_plan': None
        }, None),
    )
    @unpack
    def test_clean_should_raise_for_invalid_cases(self, case_name, overrides, expected_field):
        """
        Parametrized test to check all invalid cases in Project.clean().
        """
        project = self.create_project(title=case_name, **overrides)
        with self.assertRaises(ValidationError) as context:
            project.clean()

        errors = context.exception.message_dict
        if expected_field:
            self.assertIn(expected_field, errors)
        else:
            self.assertIn('current_funding', errors)
            self.assertIn('business_plan', errors)

    def test_clean_should_pass_for_valid_data(self):
        """
        Ensure clean() passes without errors for valid project data.
        """
        project = self.create_project(
            funding_goal=Decimal('10000.00'),
            current_funding=Decimal('5000.00'),
            status=ProjectStatus.IN_PROGRESS,
            business_plan='projects/business_plans/plan.pdf'
        )
        try:
            project.clean()
        except ValidationError as e:
            self.fail(f"clean() raised ValidationError unexpectedly: {e}")
</file>

<file path="tests/projects/test_serializer.py">
import ddt
from django.core.files.uploadedfile import SimpleUploadedFile
from decimal import Decimal
from projects.serializers import ProjectWriteSerializer
from tests.test_base_case import BaseAPITestCase


class ProjectSerializerBaseTests(BaseAPITestCase):

    def get_dummy_file(self):
        """Return a valid dummy PDF file for testing file uploads."""
        return SimpleUploadedFile(
            "plan.pdf",
            b"%PDF-1.4 Dummy PDF content",
            content_type="application/pdf"
        )

    def test_participant_without_goal_should_fail(self):
        """Participant project without funding_goal should fail validation."""
        data = {
            'startup_id': self.startup.id,
            'title': 'Participant',
            'is_participant': True,
            'current_funding': '1000.00',
            'category_id': self.category.id,
            'email': 'participant@example.com',
            'funding_goal': None
        }
        serializer = ProjectWriteSerializer(data=data)
        self.assertFalse(serializer.is_valid())
        self.assertIn('funding_goal', serializer.errors)

    def test_valid_project_data(self):
        """Project with all required fields and valid business_plan passes validation."""
        data = {
            "title": "Valid Project",
            "email": "valid@example.com",
            "funding_goal": "10000.00",
            "current_funding": "5000.00",
            "startup_id": self.startup.id,
            "category_id": self.category.id,
            "business_plan": self.get_dummy_file(),
        }
        serializer = ProjectWriteSerializer(data=data)
        self.assertTrue(serializer.is_valid(), serializer.errors)

    def test_current_funding_exceeds_goal_should_fail(self):
        """Serializer rejects current_funding exceeding funding_goal."""
        data = {
            "title": "OverFunded",
            "email": "overfunded@example.com",
            "funding_goal": "1000.00",
            "current_funding": "2000.00",
            "startup_id": self.startup.id,
            "category_id": self.category.id,
            "business_plan": self.get_dummy_file(),
        }
        serializer = ProjectWriteSerializer(data=data)
        self.assertFalse(serializer.is_valid())
        self.assertIn("current_funding", serializer.errors)

    def test_missing_business_plan_for_completed_should_fail(self):
        """Project with funding_goal == current_funding must have business_plan."""
        data = {
            "title": "CompletedProject",
            "email": "completed@example.com",
            "funding_goal": "5000.00",
            "current_funding": "5000.00",
            "startup_id": self.startup.id,
            "category_id": self.category.id,
        }
        serializer = ProjectWriteSerializer(data=data)
        self.assertFalse(serializer.is_valid())
        self.assertIn("business_plan", serializer.errors)

    def test_duplicate_title_should_fail(self):
        """Creating a project with duplicate title under same startup fails."""
        self.get_or_create_project(
            title="Unique Project",
            email="existing@example.com",
            funding_goal=1000,
            current_funding=0,
            startup=self.startup,
            category=self.category,
        )
        data = {
            "title": "Unique Project",
            "email": "new@example.com",
            "funding_goal": "5000.00",
            "current_funding": "0.00",
            "startup_id": self.startup.id,
            "category_id": self.category.id,
            "business_plan": self.get_dummy_file(),
        }
        serializer = ProjectWriteSerializer(data=data)
        self.assertFalse(serializer.is_valid())
        self.assertIn("non_field_errors", serializer.errors)
        self.assertTrue(
            any("title" in str(e) for e in serializer.errors["non_field_errors"])
        )

    def test_update_funding_goal_less_than_current_should_fail(self):
        """Updating funding_goal < current_funding should fail validation."""
        project = self.get_or_create_project(
            title="Test Update Project",
            email="testupdate@example.com",
            funding_goal=1000,
            current_funding=800,
            startup=self.startup,
            category=self.category,
        )
        data = {
            "funding_goal": "500.00",
        }
        serializer = ProjectWriteSerializer(instance=project, data=data, partial=True)
        self.assertFalse(serializer.is_valid())
        self.assertIn('current_funding', serializer.errors)


@ddt.ddt
class ProjectSerializerValidationTests(BaseAPITestCase):

    def get_dummy_file(self):
        return SimpleUploadedFile(
            "plan.pdf",
            b"%PDF-1.4 Dummy PDF content",
            content_type="application/pdf"
        )

    @ddt.data(
        'title',
        'email',
        'funding_goal',
        'startup_id',
        'category_id',
    )
    def test_missing_required_fields_should_fail(self, missing_field):
        """Omitting required fields individually triggers validation errors."""
        data = {
            "title": "Test Missing",
            "email": "testmissing@example.com",
            "funding_goal": Decimal("1000.00"),
            "current_funding": Decimal("0.00"),
            "startup_id": self.startup.id,
            "category_id": self.category.id,
            "business_plan": self.get_dummy_file(),
        }
        data.pop(missing_field)
        serializer = ProjectWriteSerializer(data=data)
        self.assertFalse(serializer.is_valid())
        self.assertIn(missing_field, serializer.errors)

    @ddt.data(
        {"title": []},
        {"email": []},
        {"funding_goal": "not_a_number"},
        {"current_funding": "also_not_a_number"},
        {"startup_id": "invalid_id"},
        {"category_id": "invalid_id"},
    )
    @ddt.unpack
    def test_invalid_field_types_should_fail(self, **invalid_field):
        valid_data = {
            "title": "Valid Title",
            "email": "valid@example.com",
            "funding_goal": Decimal("1000.00"),
            "current_funding": Decimal("0.00"),
            "startup_id": self.startup.id,
            "category_id": self.category.id,
            "business_plan": self.get_dummy_file(),
        }
        valid_data.update(invalid_field)
        serializer = ProjectWriteSerializer(data=valid_data)
        self.assertFalse(serializer.is_valid())
        error_field = list(invalid_field.keys())[0]
        self.assertTrue(
            error_field in serializer.errors or "non_field_errors" in serializer.errors
        )

    @ddt.data(
        ("0.01", True),
        ("0.00", False),
        ("-0.01", False),
        ("999999999999999999.99", True),
        ("10000000000000000000000.00", False),
    )
    @ddt.unpack
    def test_funding_goal_edge_cases(self, funding_goal_value, should_be_valid):
        data = {
            "title": "Funding Edge",
            "email": "edge@example.com",
            "funding_goal": Decimal(funding_goal_value),
            "current_funding": Decimal("0.00"),
            "startup_id": self.startup.id,
            "category_id": self.category.id,
            "business_plan": self.get_dummy_file(),
        }
        serializer = ProjectWriteSerializer(data=data)
        self.assertEqual(serializer.is_valid(), should_be_valid)
        if not should_be_valid:
            self.assertTrue(
                'funding_goal' in serializer.errors or 'current_funding' in serializer.errors
            )
</file>

<file path="tests/startups/test_industry_model.py">
from tests.test_base_case import BaseAPITestCase
from startups.models import Industry
from django.core.exceptions import ValidationError


class IndustryModelCleanTests(BaseAPITestCase):
    """
    Test suite for validating the `clean()` method of the Industry model.
    Ensures that valid data passes validation and forbidden names raise errors.
    """

    def test_valid_industry_should_pass(self):
        """
        Test that an Industry instance with a valid name
        passes the `clean()` method without raising ValidationError.
        """
        industry = Industry(name='Technology')
        try:
            industry.clean()
        except ValidationError:
            self.fail("clean() raised ValidationError unexpectedly.")

    def test_forbidden_name_should_raise(self):
        """
        Test that an Industry instance with a forbidden name
        raises ValidationError containing 'name' in the message_dict.
        """
        industry = Industry(name='Other')
        with self.assertRaises(ValidationError) as context:
            industry.clean()
        self.assertIn('name', context.exception.message_dict)
</file>

<file path="tests/startups/test_location_model.py">
from django.core.exceptions import ValidationError
from startups.models import Location
from tests.test_base_case import BaseAPITestCase


class LocationModelCleanTests(BaseAPITestCase):
    """Tests for Location model clean() validations."""

    def test_valid_location_should_pass(self):
        """
        Test that a Location instance with valid fields
        passes the full_clean() validation without errors.
        """
        location = Location(
            country='US',
            region='California',
            city='San Francisco',
            address_line='Market Street',
            postal_code='94103'
        )
        try:
            location.full_clean()
        except ValidationError:
            self.fail("clean() raised ValidationError unexpectedly.")

    def test_postal_code_too_short_should_raise(self):
        """
        Test that a postal code shorter than 3 characters
        raises a ValidationError on clean().
        """
        location = Location(country='US', postal_code='12')
        with self.assertRaises(ValidationError) as context:
            location.clean()
        self.assertIn('postal_code', context.exception.message_dict)

    def test_postal_code_invalid_chars_should_raise(self):
        """
        Test that a postal code containing invalid characters
        raises a ValidationError on clean().
        """
        location = Location(country='US', postal_code='@@@')
        with self.assertRaises(ValidationError) as context:
            location.clean()
        self.assertIn('postal_code', context.exception.message_dict)

    def test_city_with_invalid_chars_should_raise(self):
        """
        Test that a city name containing non-Latin characters
        raises a ValidationError on clean().
        """
        location = Location(country='US', city='Kyїv')
        with self.assertRaises(ValidationError) as context:
            location.clean()
        self.assertIn('city', context.exception.message_dict)

    def test_address_line_requires_city_and_region(self):
        """
        Test that providing an address_line without city and region
        raises a ValidationError indicating those fields are required.
        """
        location = Location(
            country='US',
            address_line='Main Street'
        )
        with self.assertRaises(ValidationError) as context:
            location.clean()
        self.assertIn('city', context.exception.message_dict)
        self.assertIn('region', context.exception.message_dict)

    def test_city_requires_region(self):
        """
        Test that providing a city without a region
        raises a ValidationError indicating region is required.
        """
        location = Location(country='US', city='Chicago')
        with self.assertRaises(ValidationError) as context:
            location.clean()
        self.assertIn('region', context.exception.message_dict)
</file>

<file path="tests/startups/test_serializer.py">
from startups.serializers.startup_full import StartupSerializer
from tests.test_base_case import BaseAPITestCase


class StartupSerializerTests(BaseAPITestCase):
    """
    Tests for StartupSerializer to validate proper serialization and validation
    of Startup data, including required fields, field constraints, and nested data.
    """

    def test_valid_startup_data(self):
        """
        Test that the serializer accepts valid startup data including nested social_links.
        """
        data = {
            'company_name': 'TechNova',
            'description': 'AI-powered analytics for startups and enterprises.',
            'industry': self.industry.id,
            'location': self.location.id,
            'website': 'https://technova.ai',
            'email': 'contact@technova.ai',
            'stage': 'idea',
            'social_links': {
                'linkedin': 'https://linkedin.com/in/technova',
                'twitter': 'https://twitter.com/technova'
            },
            'founded_year': 2020,
            'team_size': 10,
            'user': self.user.pk
        }
        serializer = StartupSerializer(data=data)
        self.assertTrue(serializer.is_valid(), serializer.errors)

    def test_empty_company_name_should_fail(self):
        """
        Test that the serializer rejects empty or whitespace-only company_name.
        """
        data = {
            'company_name': '   ',
            'user': self.user.pk,
            'industry': self.industry.pk,
            'location': self.location.pk,
            'founded_year': 2020
        }
        serializer = StartupSerializer(data=data)
        self.assertFalse(serializer.is_valid())
        self.assertIn('company_name', serializer.errors)

    def test_missing_email_should_fail(self):
        """
        Test that the serializer rejects empty or missing email field.
        """
        data = {
            'company_name': 'ValidName',
            'team_size': 5,
            'user': self.user.pk,
            'industry': self.industry.pk,
            'location': self.location.pk,
            'founded_year': 2020,
            'website': '',
            'email': ''
        }
        serializer = StartupSerializer(data=data)
        self.assertFalse(serializer.is_valid())
        self.assertIn('email', serializer.errors)

    def test_team_size_too_small_should_fail(self):
        """
        Test that the serializer rejects team_size values less than 1.
        """
        data = {
            'company_name': 'ValidName',
            'team_size': 0,
            'user': self.user.pk,
            'industry': self.industry.pk,
            'location': self.location.pk,
            'founded_year': 2020
        }
        serializer = StartupSerializer(data=data)
        self.assertFalse(serializer.is_valid())
        self.assertIn('team_size', serializer.errors)

    def test_invalid_social_links_should_fail(self):
        """
        Test that the serializer rejects social_links with unsupported platforms or invalid URLs.
        """
        data = {
            'company_name': 'ValidName',
            'team_size': 5,
            'user': self.user.pk,
            'industry': self.industry.pk,
            'location': self.location.pk,
            'founded_year': 2020,
            'social_links': {
                'linkedin': 'https://notlinkedin.com/profile',
                'unknown': 'https://example.com'
            }
        }
        serializer = StartupSerializer(data=data)
        self.assertFalse(serializer.is_valid())
        self.assertIn('social_links', serializer.errors)

        errors = serializer.errors['social_links']
        self.assertIn("Invalid domain for platform 'linkedin'", errors.get('linkedin', ''))
        self.assertIn("Platform 'unknown' is not supported.", errors.get('unknown', ''))
</file>

<file path="tests/startups/test_startup_model.py">
from django.core.exceptions import ValidationError
from django.utils import timezone

from common.enums import Stage
from startups.models import Startup
from tests.test_base_case import BaseAPITestCase


class StartupModelCleanTests(BaseAPITestCase):
    """
    Tests for the Startup model's clean() method to ensure proper validation of fields,
    particularly the social_links field for supported platforms and valid URLs.
    """

    def test_valid_clean_should_pass(self):
        """
        All links are valid and from allowed platforms → should not raise ValidationError.
        """
        startup = Startup(
            user=self.user,
            company_name='ValidTech',
            founded_year=2020,
            industry=self.industry,
            location=self.location,
            email='testapistartup@example.com',
            social_links={
                'linkedin': 'https://linkedin.com/in/example',
                'twitter': 'https://twitter.com/example'
            }
        )
        try:
            startup.full_clean()
        except ValidationError as e:
            self.fail(f"ValidationError was raised unexpectedly: {e}")

    def test_invalid_social_links_clean_should_raise(self):
        """
        Test that the clean() method raises ValidationError when social_links contain
        unsupported platforms or invalid domain URLs.
        """
        startup = Startup(
            user=self.user,
            company_name='CleanTech',
            founded_year=2022,
            industry=self.industry,
            location=self.location,
            social_links={
                'linkedin': 'https://notlinkedin.com/profile',
                'unknown': 'https://example.com'
            }
        )
        with self.assertRaises(ValidationError) as context:
            startup.clean()

        errors = context.exception.message_dict

        self.assertIn('linkedin', errors)
        self.assertIn("Invalid domain for platform 'linkedin'", errors['linkedin'][0])

        self.assertIn('unknown', errors)
        self.assertIn("Platform 'unknown' is not supported.", errors['unknown'][0])

    def test_empty_social_links_should_pass(self):
        """
        Empty dict for social_links is allowed.
        """
        startup = Startup(
            user=self.user,
            company_name='EmptySocials',
            founded_year=2021,
            industry=self.industry,
            location=self.location,
            social_links={}
        )
        try:
            startup.clean()
        except ValidationError as e:
            self.fail(f"ValidationError was raised unexpectedly: {e}")

    def test_blank_social_link_value_should_raise(self):
        """
        Blank URL in social_links should raise an error.
        """
        startup = Startup(
            user=self.user,
            company_name='BlankLinkTech',
            founded_year=2022,
            industry=self.industry,
            location=self.location,
            social_links={
                'linkedin': ''
            }
        )
        with self.assertRaises(ValidationError):
            startup.clean()

    def test_invalid_url_format_should_raise(self):
        """
        Non-URL string in social_links should raise an error.
        """
        startup = Startup(
            user=self.user,
            company_name='BadUrlTech',
            founded_year=2022,
            industry=self.industry,
            location=self.location,
            social_links={
                'twitter': 'not_a_url'
            }
        )
        with self.assertRaises(ValidationError):
            startup.clean()

    def test_missing_required_fields_should_raise(self):
        """
        Missing required company_name should raise an error.
        """
        startup = Startup(
            user=self.user,
            founded_year=2022,
            industry=self.industry,
            location=self.location
        )
        with self.assertRaises(ValidationError):
            startup.full_clean()

    def test_description_too_short_should_raise(self):
        """
        Description shorter than 10 chars should raise error (from Company.clean).
        """
        startup = Startup(
            user=self.user,
            company_name='ShortDescTech',
            founded_year=2022,
            industry=self.industry,
            location=self.location,
            description='short',
            social_links={}
        )
        with self.assertRaises(ValidationError) as context:
            startup.clean()

        self.assertIn('description', context.exception.message_dict)
        self.assertIn('at least 10 characters', context.exception.message_dict['description'][0])

    def test_founded_year_out_of_bounds_should_raise(self):
        """Founded year must be between 1900 and current year."""
        current_year = timezone.now().year

        startup_min = Startup(
            user=self.user,
            company_name='TooOldStartup',
            founded_year=1899,
            industry=self.industry,
            location=self.location
        )
        with self.assertRaises(ValidationError) as context_min:
            startup_min.full_clean()
        self.assertIn('founded_year', context_min.exception.message_dict)

        startup_future = Startup(
            user=self.user,
            company_name='FutureStartup',
            founded_year=current_year + 1,
            industry=self.industry,
            location=self.location
        )
        with self.assertRaises(ValidationError) as context_future:
            startup_future.full_clean()
        self.assertIn('founded_year', context_future.exception.message_dict)

    def test_default_stage_is_set_if_missing(self):
        """If stage is not provided, it should default to Stage.IDEA."""
        startup = Startup(
            user=self.user,
            company_name='DefaultStageStartup',
            founded_year=2020,
            industry=self.industry,
            location=self.location
        )
        self.assertEqual(startup.stage, Stage.IDEA)

        startup.save()
        startup.refresh_from_db()
        self.assertEqual(startup.stage, Stage.IDEA)
</file>

<file path="tests/users/__init__.py">
import os
import unittest

def load_tests(loader, tests, pattern):
    this_dir = os.path.dirname(os.path.abspath(__file__))
    return loader.discover(start_dir=this_dir, pattern='test_*.py')
</file>

<file path="tests/users/test_company_bind_serializer.py">
from django.contrib.auth import get_user_model
from rest_framework.test import APITestCase
from rest_framework import status
from common.enums import Stage
from investors.models import Investor
from startups.models import Startup, Industry, Location
from users.serializers.company_bind_serializer import CompanyBindingSerializer

User = get_user_model()


class CompanyBindingSerializerTests(APITestCase):
    """Tests for CompanyBindingSerializer validation logic"""

    def setUp(self):
        self.valid_data = {
            'company_name': 'Valid Company Name',
            'company_type': 'startup'
        }

    def test_serializer_valid_data(self):
        """Test that serializer validates correct data"""
        serializer = CompanyBindingSerializer(data=self.valid_data)
        self.assertTrue(serializer.is_valid())

    def test_serializer_missing_required_fields(self):
        """Test that serializer requires both fields"""
        test_cases = [
            ({'company_type': 'startup'}, 'company_name'),
            ({'company_name': 'Test Company'}, 'company_type'),
            ({}, 'company_name'),
        ]

        for data, expected_error_field in test_cases:
            with self.subTest(data=data):
                serializer = CompanyBindingSerializer(data=data)
                self.assertFalse(serializer.is_valid())
                self.assertIn(expected_error_field, serializer.errors)

    def test_serializer_invalid_company_type(self):
        """Test that serializer rejects invalid company type"""
        data = {**self.valid_data, 'company_type': 'invalid_type'}
        serializer = CompanyBindingSerializer(data=data)
        self.assertFalse(serializer.is_valid())
        self.assertIn('company_type', serializer.errors)

    def test_serializer_valid_company_types(self):
        """Test that serializer accepts both valid company types"""
        for company_type in ['startup', 'investor']:
            with self.subTest(company_type=company_type):
                data = {**self.valid_data, 'company_type': company_type}
                serializer = CompanyBindingSerializer(data=data)
                self.assertTrue(serializer.is_valid())

    def test_serializer_company_name_validation(self):
        """Test company name validation scenarios"""
        test_cases = [
            ('', False, 'Company name must not be empty'),
            ('   ', False, 'Company name must not be empty'),
            ('Valid Name', True, None),
            ('Valid-Name', True, None),
            ("Valid's Name", True, None),
            ('Company 123', True, None),
            ('Компанія', False, 'Latin letters'),
            ('Company@Test', False, 'Latin letters'),
            ('A' * 254, True, None),
            ('A' * 255, False, '254 characters'),
        ]

        for name, should_be_valid, error_contains in test_cases:
            with self.subTest(name=name):
                data = {**self.valid_data, 'company_name': name}
                serializer = CompanyBindingSerializer(data=data)

                if should_be_valid:
                    self.assertTrue(serializer.is_valid(),
                                    f"Expected valid for '{name}' but got errors: {serializer.errors}")
                else:
                    self.assertFalse(serializer.is_valid())
                    self.assertIn('company_name', serializer.errors)
                    if error_contains:
                        error_text = str(serializer.errors['company_name'])
                        self.assertIn(error_contains, error_text,
                                      f"Error message '{error_text}' does not contain '{error_contains}'")

    def test_serializer_forbidden_company_names(self):
        """Test that serializer rejects forbidden company names"""
        forbidden_names = ['other', 'Other', 'OTHER', 'none', 'NONE', 'misc', 'MISC', 'default', 'DEFAULT']

        for name in forbidden_names:
            with self.subTest(name=name):
                data = {**self.valid_data, 'company_name': name}
                serializer = CompanyBindingSerializer(data=data)
                self.assertFalse(serializer.is_valid())
                self.assertIn('company_name', serializer.errors)
                self.assertIn('generic or reserved', str(serializer.errors['company_name']))

    def test_serializer_whitespace_trimming(self):
        """Test that serializer trims whitespace from company names"""
        data = {**self.valid_data, 'company_name': '  Test Company  '}
        serializer = CompanyBindingSerializer(data=data)
        self.assertTrue(serializer.is_valid())
        self.assertEqual(serializer.validated_data['company_name'], 'Test Company')

    def test_serializer_data_type_conversion(self):
        """Test that serializer handles different data types correctly"""
        test_cases = [
            (123, '123', True),
            (None, None, False),
        ]

        for input_value, expected_value, should_be_valid in test_cases:
            with self.subTest(input_value=input_value):
                data = {**self.valid_data, 'company_name': input_value}
                serializer = CompanyBindingSerializer(data=data)

                if should_be_valid:
                    self.assertTrue(serializer.is_valid())
                    self.assertEqual(serializer.validated_data['company_name'], expected_value)
                else:
                    self.assertFalse(serializer.is_valid())

    def test_serializer_extra_fields_ignored(self):
        """Test that extra fields are ignored during validation"""
        data = {
            'company_name': 'Test Company',
            'company_type': 'startup',
            'extra_field': 'should be ignored',
            'another_extra': 123
        }
        serializer = CompanyBindingSerializer(data=data)
        self.assertTrue(serializer.is_valid())
        self.assertNotIn('extra_field', serializer.validated_data)
        self.assertNotIn('another_extra', serializer.validated_data)

    def test_case_insensitive_company_name_check(self):
        """Test that company name checking is case insensitive for both startups and investors"""
        test_cases = [
            ('startup', 'Different Case Startup', 'Startup with this name already exists'),
            ('investor', 'Different Case Investor', 'Investor with this name already exists')
        ]

        other_user = User.objects.create_user(
            email='other@example.com',
            password='otherpass123',
            first_name='Other',
            last_name='User'
        )

        industry = Industry.objects.create(
            name='Technology',
            description='Tech industry'
        )

        location = Location.objects.create(
            city='Test City',
            country='US',
            region='Test Region'
        )

        for company_type, company_name, expected_error in test_cases:
            with self.subTest(company_type=company_type, company_name=company_name):
                if company_type == 'startup':
                    Startup.objects.create(
                        user=other_user,
                        company_name=company_name,
                        industry=industry,
                        location=location,
                        email=f'{company_type}@example.com',
                        founded_year=2020,
                        team_size=5,
                        stage=Stage.IDEA
                    )
                else:
                    Investor.objects.create(
                        user=other_user,
                        company_name=company_name,
                        industry=industry,
                        location=location,
                        email=f'{company_type}@example.com',
                        founded_year=2020,
                        team_size=5,
                        stage=Stage.MVP,
                        fund_size=100000
                    )

                data = {
                    'company_name': company_name.upper(),
                    'company_type': company_type
                }

                serializer = CompanyBindingSerializer(data=data)
                self.assertFalse(serializer.is_valid())
                self.assertIn('company_name', serializer.errors)
                self.assertIn(expected_error, str(serializer.errors['company_name']))
</file>

<file path="tests/users/test_password_reset.py">
from django.contrib.auth import get_user_model
from django.contrib.auth.tokens import default_token_generator
from django.utils.http import urlsafe_base64_encode
from django.utils.encoding import force_bytes
from rest_framework.test import APITestCase
from rest_framework import status

User = get_user_model()


class CustomPasswordResetTests(APITestCase):
    """
    Integration tests for the custom password reset and password reset confirmation API views.
    """
    def setUp(self):
        """
        Set up a test user and define the URLs used in password reset flows.
        """
        self.user_password = "OldPass123!"
        self.user = User.objects.create_user(
            email="test@example.com",
            password=self.user_password
        )
        self.reset_url = "/api/v1/auth/password/reset/"
        self.confirm_url = "/api/v1/auth/password/reset/confirm/"

    # Tests for CustomPasswordResetView

    def test_reset_password_success(self):
        """
        Test that the reset password endpoint returns 200 OK when a valid email is provided.
        """
        response = self.client.post(self.reset_url, {"email": self.user.email})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertIn("detail", response.data)

    def test_reset_password_no_email_provided(self):
        """
        Test that the reset password endpoint returns 400 BAD REQUEST when no email is provided.
        """
        response = self.client.post(self.reset_url, {})
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn("email", response.data)

    def test_reset_password_user_not_found(self):
        """
        Test that the reset password endpoint returns 404 NOT FOUND when the email is not registered.
        """
        response = self.client.post(self.reset_url, {"email": "nonexistent@example.com"})
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn("email", response.data)

    # Tests for CustomPasswordResetConfirmView

    def test_reset_password_confirm_success(self):
        """
        Test that a user can reset their password when providing a valid UID, token, and password.
        """
        token = default_token_generator.make_token(self.user)
        uid = urlsafe_base64_encode(force_bytes(self.user.pk))
        new_password = "NewPass123!"

        response = self.client.post(self.confirm_url, {
            "uid": uid,
            "token": token,
            "new_password": new_password
        })
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.user.refresh_from_db()
        self.assertTrue(self.user.check_password(new_password))

    def test_reset_password_confirm_missing_fields(self):
        """
        Test that the confirmation endpoint returns 400 BAD REQUEST when required fields are missing.
        """
        response = self.client.post(self.confirm_url, {})
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn("uid", response.data)
        self.assertIn("token", response.data)
        self.assertIn("new_password", response.data)

    def test_reset_password_confirm_invalid_uid(self):
        """
        Test that the confirmation endpoint returns 400 BAD REQUEST when the UID is invalid.
        """
        token = default_token_generator.make_token(self.user)
        response = self.client.post(self.confirm_url, {
            "uid": "invalid",
            "token": token,
            "new_password": "NewPass123!"
        })
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn("uid", response.data)

    def test_reset_password_confirm_invalid_token(self):
        """
        Test that the confirmation endpoint returns 400 BAD REQUEST when the token is invalid.
        """
        uid = urlsafe_base64_encode(force_bytes(self.user.pk))
        response = self.client.post(self.confirm_url, {
            "uid": uid,
            "token": "invalid-token",
            "new_password": "NewPass123!"
        })
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn("token", response.data)

    def test_reset_password_confirm_invalid_password(self):
        """
        Test that the confirmation endpoint returns 400 BAD REQUEST when the new password is too weak or invalid.
        """
        token = default_token_generator.make_token(self.user)
        uid = urlsafe_base64_encode(force_bytes(self.user.pk))

        response = self.client.post(self.confirm_url, {
            "uid": uid,
            "token": token,
            "new_password": "123"  # invalid password
        })
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn("new_password", response.data)

    def test_reset_password_confirm_custom_validator(self):
        """
        Test that the custom password validator correctly rejects weak passwords.
        Each test case is run as a subTest with its own password violation type.
        """
        token = default_token_generator.make_token(self.user)
        uid = urlsafe_base64_encode(force_bytes(self.user.pk))

        invalid_passwords = {
            "missing_uppercase": "password123!",
            "missing_lowercase": "PASSWORD123!",
            "missing_number": "Password!",
            "missing_special": "Password123",
            "too_simple": "pass"
        }

        for case, invalid_password in invalid_passwords.items():
            with self.subTest(msg=f"Case: {case}"):
                response = self.client.post(self.confirm_url, {
                    "uid": uid,
                    "token": token,
                    "new_password": invalid_password
                })

                self.assertEqual(
                    response.status_code,
                    status.HTTP_400_BAD_REQUEST,
                    msg=f"Expected 400 for case '{case}', got {response.status_code}."
                )
                self.assertIn(
                    "new_password",
                    response.data,
                    msg=f"Expected 'new_password' error in case '{case}', got {response.data}."
                )

    def test_reset_password_confirm_valid_password(self):
        """
        Test that the confirmation endpoint accepts a valid password and updates the user's password.
        """
        token = default_token_generator.make_token(self.user)
        uid = urlsafe_base64_encode(force_bytes(self.user.pk))
        valid_password = "Valid123!"

        response = self.client.post(self.confirm_url, {
            "uid": uid,
            "token": token,
            "new_password": valid_password
        })

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.user.refresh_from_db()
        self.assertTrue(self.user.check_password(valid_password))
</file>

<file path="tests/users/test_registration.py">
import json
from unittest.mock import patch

from django.test import Client
from django.urls import reverse
from django.utils import timezone
from rest_framework import status
from rest_framework.test import APITestCase

from users.models import User, UserRole


class UserRegistrationTests(APITestCase):
    """Test suite for user registration functionality."""
    
    def setUp(self):
        """Set up test data."""
        self.client = Client()
        self.register_url = '/api/v1/auth/register/'
        self.valid_payload = {
            'email': 'test@example.com',
            'first_name': 'Test',
            'last_name': 'User',
            'password': 'TestPass123',
            'password2': 'TestPass123',
        }

        try:
            self.user_role = UserRole.objects.get(role=UserRole.Role.USER)
        except UserRole.DoesNotExist:
            self.user_role = UserRole.objects.create(
                role=UserRole.Role.USER,
                description='Regular user'
            )
    
    def test_valid_registration(self):
        """Test user registration with valid data."""
        response = self.client.post(
            self.register_url,
            data=json.dumps(self.valid_payload),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertIn('status', response.data)
        self.assertEqual(response.data['status'], 'success')
        
        user = User.objects.get(email=self.valid_payload['email'])
        self.assertEqual(user.email, self.valid_payload['email'])
        self.assertEqual(user.first_name, self.valid_payload['first_name'])
        self.assertEqual(user.last_name, self.valid_payload['last_name'])
        self.assertTrue(user.check_password(self.valid_payload['password']))
        self.assertFalse(user.is_active)  
        self.assertIsNotNone(user.email_verification_token)
    
    def test_registration_with_existing_email(self):
        """Test registration with an email that's already registered."""
        User.objects.create_user(
            email='test@example.com',
            first_name='Existing',
            last_name='User',
            password='TestPass123',
            role=self.user_role
        )
        
        response = self.client.post(
            self.register_url,
            data=json.dumps(self.valid_payload),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_409_CONFLICT)
        self.assertIn('email', response.data['errors'])
    
    def test_registration_with_missing_fields(self):
        """Test registration with missing required fields."""
        invalid_payload = {
            'email': 'test@example.com',
            'password': 'TestPass123',
            'password2': 'TestPass123',
        }
        
        response = self.client.post(
            self.register_url,
            data=json.dumps(invalid_payload),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('first_name', response.data['errors'])
        self.assertIn('last_name', response.data['errors'])
    
    def test_registration_with_password_mismatch(self):
        """Test registration with non-matching passwords."""
        invalid_payload = self.valid_payload.copy()
        invalid_payload['password2'] = 'DifferentPass123'
        
        response = self.client.post(
            self.register_url,
            data=json.dumps(invalid_payload),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('errors', response.data)
        self.assertIn('password', response.data['errors'])
    
    @patch('users.views.auth_views.send_mail')
    def test_verification_email_sent(self, mock_send_mail):
        """Test that verification email is sent after registration."""  
        from django.core.cache import cache
        cache.clear()
        
        response = self.client.post(
            self.register_url,
            data=json.dumps(self.valid_payload),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertTrue(mock_send_mail.called)
        
        args, kwargs = mock_send_mail.call_args
        self.assertEqual(kwargs['recipient_list'], [self.valid_payload['email']])
    
    @patch('users.views.auth_views.send_mail')
    def test_verification_email_content(self, mock_send_mail):
        """Test the content of the verification email."""
        response = self.client.post(
            self.register_url,
            data=json.dumps(self.valid_payload),
            content_type='application/json'
        )
        
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        
        user = User.objects.get(email=self.valid_payload['email'])
        
        self.assertTrue(mock_send_mail.called)
        args, kwargs = mock_send_mail.call_args
        
        self.assertEqual(kwargs['recipient_list'], [self.valid_payload['email']])
        self.assertIn('verify', kwargs['subject'].lower())
        
        html_content = kwargs['html_message']
        from bs4 import BeautifulSoup
        from urllib.parse import urlparse

        soup = BeautifulSoup(html_content, 'html.parser')
        
        verification_link = None
        for a_tag in soup.find_all('a', href=True):
            if 'verify-email' in a_tag['href']:
                verification_link = a_tag['href']
                break
                
        self.assertIsNotNone(verification_link, "Verification link not found in email")
        
        parsed_url = urlparse(verification_link)
        path_parts = [part for part in parsed_url.path.strip('/').split('/') if part]
        
        self.assertGreaterEqual(len(path_parts), 3, f"Unexpected URL format: {verification_link}")
        self.assertEqual(path_parts[-3], 'verify-email')
        
        user_id = path_parts[-2]
        token = path_parts[-1]
        
        self.assertEqual(str(user.user_id), user_id, "User ID in verification link doesn't match")
        
        user.pending_email = user.email
        user.email_verification_token = token
        user.email_verification_sent_at = timezone.now()
        user.save()
        
        verification_url = reverse('verify-email', kwargs={'user_id': user_id, 'token': token})
        response = self.client.get(verification_url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class EmailVerificationTests(APITestCase):
    """Test email verification functionality."""
    
    def setUp(self):
        """Set up test data."""
        self.client = Client()
        
        try:
            self.user_role = UserRole.objects.get(role=UserRole.Role.USER)
        except UserRole.DoesNotExist:
            self.user_role = UserRole.objects.create(
                role=UserRole.Role.USER,
                description='Regular user'
            )
            
        self.verification_token = 'test-verification-token'
        
        self.user = User.objects.create_user(
            email='test@example.com',
            first_name='Test',
            last_name='User',
            password='TestPass123',
            role=self.user_role,
            is_active=False
        )
        self.user.pending_email = self.user.email
        self.user.email_verification_token = self.verification_token
        self.user.email_verification_sent_at = timezone.now()
        self.user.save()
    
    def test_verification_with_valid_token(self):
        """Test verification with a valid token."""
        self.user.email_verification_sent_at = timezone.now()
        self.user.pending_email = None
        self.user.save(update_fields=['email_verification_sent_at', 'pending_email'])
        
        verification_url = reverse('verify-email', kwargs={'user_id': self.user.user_id, 'token': self.verification_token})
        response = self.client.get(verification_url)
        
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['status'], 'success')
        self.assertEqual(response.data['message'], 'Email verified successfully. You can now log in.')
        
        self.user.refresh_from_db()
        self.assertTrue(self.user.is_active)
        self.assertIsNone(self.user.email_verification_token)
        self.assertIsNone(self.user.email_verification_sent_at)
    
    def test_verification_with_invalid_token(self):
        """Test verification with an invalid token."""
        verification_url = reverse('verify-email', kwargs={'user_id': self.user.user_id, 'token': 'invalid-token'})
        response = self.client.get(verification_url)
        
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertEqual(response.data['status'], 'error')
        self.assertEqual(response.data['message'], 'Invalid verification link.')
        
        self.user.refresh_from_db()
        self.assertFalse(self.user.is_active)
        self.assertEqual(self.user.email_verification_token, self.verification_token)
    
    def test_verification_with_nonexistent_user(self):
        """Test verification with a non-existent user ID."""
        verification_url = reverse('verify-email', kwargs={'user_id': 9999, 'token': 'some-token'})
        response = self.client.get(verification_url)
        
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
    
    def test_verification_already_verified(self):
        """Test verification for an already verified email."""
        self.user.is_active = True
        self.user.email_verification_token = None
        self.user.email_verified = True
        self.user.save()
        
        verification_url = reverse('verify-email', kwargs={'user_id': self.user.user_id, 'token': 'any-token'})
        response = self.client.get(verification_url)
        
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertEqual(response.data['status'], 'error')
        self.assertEqual(response.data['message'], 'Invalid verification link.')
</file>

<file path="tests/setup_tests_data.py">
import uuid
from decimal import Decimal
from common.enums import Stage, ProjectStatus
from investors.models import Investor
from projects.models import Project, Category
from investments.models import Subscription
from startups.models import Startup, Industry, Location
from users.models import User, UserRole
import os
from dotenv import load_dotenv

load_dotenv()
TEST_USER_PASSWORD = os.getenv("TEST_USER_PASSWORD", "default_test_password")


class TestDataMixin:
    """
    Class for creating and cleaning test data:
    users, investors, startups, projects, subscriptions.
    """

    @classmethod
    def get_or_create_user(cls, email, first_name, last_name):
        user = User.objects.filter(email=email).first()
        if not user:
            role_user, _ = UserRole.objects.get_or_create(role=UserRole.Role.USER)
            user = User.objects.create_user(
                email=email,
                password=TEST_USER_PASSWORD,
                first_name=first_name,
                last_name=last_name,
                role=role_user,
                is_active=True
            )
        return user

    @classmethod
    def setup_users(cls):
        cls.user = cls.get_or_create_user("user1@example.com", "Investor", "One")
        cls.user2 = cls.get_or_create_user("user2@example.com", "Investor", "Two")
        cls.investor_user = cls.get_or_create_user("maxinvestor@example.com", "Success", "Investor")
        cls.investor_user2 = cls.get_or_create_user("maxinvestor2@example.com", "Win", "Investor")
        cls.startup_user = cls.get_or_create_user("maxstartup@example.com", "Max", "Startup")

    @classmethod
    def get_or_create_industry(cls, name):
        industry, _ = Industry.objects.get_or_create(name=name)
        return industry

    @classmethod
    def setup_industries(cls):
        cls.industry = cls.get_or_create_industry("Tech")

    @classmethod
    def get_or_create_location(cls, country_code):
        location, _ = Location.objects.get_or_create(country=country_code)
        return location

    @classmethod
    def setup_locations(cls):
        cls.location = cls.get_or_create_location("UA")
        cls.startup_location = cls.get_or_create_location("US")

    @classmethod
    def get_or_create_investor(cls, user, company_name, stage, fund_size):
        email = f"investor_{uuid.uuid4().hex[:6]}@example.com"
        investor, _ = Investor.objects.get_or_create(
            user=user,
            industry=cls.industry,
            location=cls.location,
            company_name=company_name,
            email=email,
            founded_year=2010,
            team_size=5,
            stage=stage,
            fund_size=fund_size
        )
        return investor

    @classmethod
    def setup_investors(cls):
        cls.investor1 = cls.get_or_create_investor(cls.investor_user, "Investor One", Stage.MVP, 1000000.00)
        cls.investor2 = cls.get_or_create_investor(cls.investor_user2, "Investor Two", Stage.LAUNCH, 2000000.00)

    @classmethod
    def get_or_create_startup(cls, user, industry, company_name, location):
        email = f"startup_{uuid.uuid4().hex[:6]}@example.com"
        startup, _ = Startup.objects.get_or_create(
            user=user,
            industry=industry,
            company_name=company_name,
            location=location,
            email=email,
            founded_year=2020,
            team_size=15,
            stage=Stage.MVP
        )
        return startup

    @classmethod
    def setup_startup(cls):
        cls.startup = cls.get_or_create_startup(
            cls.startup_user,
            cls.industry,
            "Test Startup",
            cls.startup_location
        )

    @classmethod
    def get_or_create_category(cls, name="FinTech"):
        category, _ = Category.objects.get_or_create(name=name)
        return category

    @classmethod
    def setup_category(cls):
        cls.category = cls.get_or_create_category()

    @classmethod
    def get_or_create_project(
            cls,
            title="Test Project",
            email=None,
            funding_goal=Decimal("1000000.00"),
            current_funding=Decimal("0.00"),
            startup=None,
            category=None,
            status=ProjectStatus.DRAFT,
            **kwargs
    ):
        """
        Create or get a project with optional custom fields.
        Ensures startup and category are never None.
        """
        if startup is None:
            startup = getattr(cls, "startup", None)
            if startup is None:
                cls.setup_industries()
                cls.setup_locations()
                cls.setup_users()
                startup = cls.get_or_create_startup(
                    cls.startup_user,
                    cls.industry,
                    "Auto Created Startup",
                    cls.startup_location
                )

        if category is None:
            category = getattr(cls, "category", None)
            if category is None:
                category = cls.get_or_create_category()

        if email is None:
            email = f"project_{uuid.uuid4().hex[:6]}@example.com"

        project, _ = Project.objects.get_or_create(
            startup=startup,
            title=title,
            defaults={
                "funding_goal": funding_goal,
                "current_funding": current_funding,
                "category": category,
                "email": email,
                "description": "",
                "duration": 1,
                "status": status,
                **kwargs
            }
        )
        return project

    @classmethod
    def setup_project(cls):
        cls.setup_category()
        cls.project = cls.get_or_create_project()

    @classmethod
    def get_or_create_subscription(cls, investor, project, amount, investment_share=None):
        data = {
            "investor": investor,
            "project": project,
            "amount": Decimal(amount),
        }
        if investment_share is not None:
            data["investment_share"] = Decimal(investment_share)

        subscription, _ = Subscription.objects.get_or_create(**data)
        return subscription

    @staticmethod
    def get_subscription_data(investor, project, amount) -> dict:
        """
        Prepare a dictionary payload representing a subscription, useful for API testing.

        Args:
            investor (Investor or None): Investor instance or None.
            project (Project or None): Project instance or None.
            amount (float): Amount invested.

        Returns:
            dict: Dictionary containing subscription data with IDs for investor and project.
        """
        data = {
            "amount": str(amount)
        }
        if investor is not None:
            data["investor"] = investor.pk
        if project is not None:
            data["project"] = project.pk
        return data

    @classmethod
    def setup_all(cls):
        cls.setup_users()
        cls.setup_industries()
        cls.setup_locations()
        cls.setup_investors()
        cls.setup_startup()
        cls.setup_project()

    @classmethod
    def tear_down(cls):
        Subscription.objects.all().delete()
        Project.objects.all().delete()
        Category.objects.all().delete()
        Startup.objects.all().delete()
        Investor.objects.all().delete()
        Industry.objects.all().delete()
        Location.objects.all().delete()
        User.objects.all().delete()
</file>

<file path="tests/test_disable_signal_mixin.py">
from django.db.models.signals import post_save
from django.test import TestCase

from startups.models import Startup
from startups.signals import update_startup_document


class DisableSignalMixin(TestCase):
    sender = None

    @classmethod
    def disable_signal(cls):
        post_save.disconnect(update_startup_document, sender=Startup)

    @classmethod
    def enable_signal(cls):
        post_save.connect(update_startup_document, sender=Startup)

    @classmethod
    def setUpClass(cls):
        cls.disable_signal()
        super().setUpClass()

    @classmethod
    def tearDownClass(cls):
        super().tearDownClass()
        cls.enable_signal()
</file>

<file path="users/management/commands/cleanup_email_tokens.py">
from django.core.management.base import BaseCommand
from django.utils import timezone
from users.models import User

class Command(BaseCommand):
    help = 'Clean up expired email verification tokens'

    def add_arguments(self, parser):
        parser.add_argument(
            '--days',
            type=int,
            default=7,
            help='Number of days to consider a token as expired (default: 7)'
        )

    def handle(self, *args, **options):
        days = options['days']
        expiration_date = timezone.now() - timezone.timedelta(days=days)
        
        expired_users = User.objects.filter(
            email_verification_sent_at__lt=expiration_date,
            is_active=False
        ).exclude(email_verification_token__isnull=True)
        
        count = expired_users.count()
        
        if count > 0:
            updated = expired_users.update(
                email_verification_token=None,
                email_verification_sent_at=None
            )
            self.stdout.write(
                self.style.SUCCESS(f'Successfully cleaned up {updated} expired email verification tokens')
            )
        else:
            self.stdout.write('No expired email verification tokens found')
</file>

<file path="users/management/__init__.py">

</file>

<file path="users/migrations/0001_initial.py">
# Generated by Django 5.2.4 on 2025-08-22 23:11

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('user', 'User'), ('moderator', 'Moderator')], max_length=20, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'User Role',
                'verbose_name_plural': 'User Roles',
                'db_table': 'user_roles',
                'indexes': [models.Index(fields=['role'], name='user_roles_role_582040_idx')],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=50, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('user_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('pending_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('verified_at', models.DateTimeField(blank=True, help_text="Timestamp when the user's email was verified", null=True)),
                ('email_verification_token', models.CharField(blank=True, help_text='Token for email verification', max_length=100, null=True)),
                ('email_verification_sent_at', models.DateTimeField(blank=True, help_text='When the verification email was sent', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('role', models.ForeignKey(help_text='Current role of the user', on_delete=django.db.models.deletion.PROTECT, related_name='users', to='users.userrole')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'indexes': [models.Index(fields=['email'], name='users_email_4b85f2_idx'), models.Index(fields=['is_active'], name='users_is_acti_847b48_idx')],
            },
        ),
    ]
</file>

<file path="users/serializers/company_bind_serializer.py">
from rest_framework import serializers
from django.core.exceptions import ValidationError
from investors.models import Investor
from startups.models import Startup
from validation.validate_names import validate_forbidden_names
from validation.validate_string_fields import validate_max_length


class CompanyBindingSerializer(serializers.Serializer):
    """ Serializer for validating company binding requests. """
    company_name = serializers.CharField(max_length=254, allow_blank=True)
    company_type = serializers.ChoiceField(choices=['startup', 'investor'])

    class Meta:
        extra_kwargs = {
            'company_name': {
                'validators': []
            }
        }

    def validate_company_name(self, value):
        """
        Validate company name using existing validation functions.
        Aggregate all validation errors instead of returning only the first one.
        Check if company name already exists for both Startup and Investor.
        """
        error_messages = []

        try:
            validate_forbidden_names(value, "company_name")
        except ValidationError as e:
            if hasattr(e, 'error_list'):
                error_messages.extend([str(err) for err in e.error_list])
            else:
                error_messages.append(str(e))

        try:
            validate_max_length(value, 254, "Company name")
        except ValidationError as e:
            if hasattr(e, 'error_list'):
                error_messages.extend([str(err) for err in e.error_list])
            else:
                error_messages.append(str(e))

        if Startup.objects.filter(company_name__iexact=value).exists():
            error_messages.append("Startup with this name already exists.")

        if Investor.objects.filter(company_name__iexact=value).exists():
            error_messages.append("Investor with this name already exists.")

        if error_messages:
            raise serializers.ValidationError(error_messages)

        return value
</file>

<file path="users/serializers/password_reset_serializers.py">
from django.contrib.auth import get_user_model
from django.contrib.auth.password_validation import validate_password
from django.contrib.auth.tokens import default_token_generator
from django.core.exceptions import ValidationError as DjangoValidationError
from django.utils.encoding import force_str
from django.utils.http import urlsafe_base64_decode
from rest_framework import serializers
from users.validators import CustomPasswordValidator

User = get_user_model()
custom_password_validator = CustomPasswordValidator()


class PasswordResetSerializer(serializers.Serializer):
    """
    Serializer for requesting a password reset email.

    Attributes:
        email (str): User's registered email address.
                     Required field. Validates that the user exists.
    """
    email = serializers.EmailField(required=True)

    def validate_email(self, value):
        """
        Validate that a user with the provided email exists.

        Args:
            value (str): Email address to validate.

        Returns:
            str: Validated email.

        Raises:
            serializers.ValidationError: If no user with this email exists.
        """
        if not User.objects.filter(email=value).exists():
            raise serializers.ValidationError("User with this email was not found.")
        return value


class PasswordResetConfirmSerializer(serializers.Serializer):
    """
    Serializer for confirming and completing the password reset.

    Attributes:
        uid (str): Base64 encoded user ID.
        token (str): Password reset token.
        new_password (str): New password to set. Must meet validation requirements.
    """
    uid = serializers.CharField(required=True)
    token = serializers.CharField(required=True)
    new_password = serializers.CharField(required=True, write_only=True, min_length=8)

    def validate_uid(self, value):
        """
        Validate and decode the UID, checking user existence.

        Args:
            value (str): Base64 encoded UID.

        Returns:
            str: Validated UID.

        Raises:
            serializers.ValidationError: If UID is invalid or user does not exist.
        """
        try:
            uid = force_str(urlsafe_base64_decode(value))
            user = User.objects.get(pk=uid)
        except Exception:
            raise serializers.ValidationError("Invalid or corrupted UID.")
        self.context['user'] = user
        return value

    def validate_new_password(self, value):
        """
        Validate the new password with Django's validators and the custom password validator.

        Args:
            value (str): New password.

        Returns:
            str: Validated password.

        Raises:
            serializers.ValidationError: If the password fails validation.
        """
        try:
            validate_password(value)
        except DjangoValidationError as e:
            raise serializers.ValidationError(e.messages)
        return value

    def validate(self, attrs):
        """
        Perform cross-field validation for the serializer.

        Checks if the user exists in the serializer context and verifies
        that the provided password reset token is valid for that user.

        Args:
            attrs (dict): The validated data from individual field validators.

        Raises:
            serializers.ValidationError: If the user is not found or the token is invalid or expired.

        Returns:
            dict: The validated data if all checks pass.
        """
        user = self.context.get('user')
        token = attrs.get('token')

        if not user:
            raise serializers.ValidationError({"uid": "User not found."})

        if not default_token_generator.check_token(user, token):
            raise serializers.ValidationError({"token": "Invalid token or token has expired."})

        return attrs
</file>

<file path="users/serializers/resend_email_serializer.py">
from django.contrib.auth import get_user_model
from rest_framework import serializers
from users.validators import CustomPasswordValidator

User = get_user_model()
custom_password_validator = CustomPasswordValidator()


class ResendEmailSerializer(serializers.Serializer):
    """
    Serializer for resending a verification email.

    This serializer is used to validate the request payload for the endpoint
    that allows resending an email verification link to a user.
    It does not reveal whether the user exists, for security purposes.

    Attributes:
        user_id (IntegerField): The ID of the target user. Must be a positive integer.
        token (CharField): The current verification token. Can be empty if a new token should be generated.
        email (EmailField, optional): A new email address to send the verification link to.
            If provided, it will override the stored email.
    """
    user_id = serializers.IntegerField(min_value=1)
    token = serializers.CharField(allow_blank=True, required=False)
    email = serializers.EmailField(required=False)

    def validate_email(self, value):
        """
        Normalize and validate the provided email address.

        This method converts the email to lowercase. It does not raise errors
        about whether the email already exists, to prevent user enumeration.

        Args:
            value (str): The email address provided in the request.

        Returns:
            str: The normalized (lowercased) email address.
        """
        return value.lower()
</file>

<file path="users/serializers/token_serializer.py">
from django.contrib.auth import get_user_model
from rest_framework import serializers
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from users.validators import CustomPasswordValidator

User = get_user_model()
custom_password_validator = CustomPasswordValidator()


class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):
    """
    Custom serializer for obtaining JWT tokens.
    Adds custom claims to the token and includes additional user data in the response.
    Also prevents token issuance for inactive users.
    """

    @classmethod
    def get_token(cls, user):
        """
        Generates JWT token with custom claims:
        - username: user's username
        - email: user's email address

        These claims are included in the token payload and can be used by the frontend
        for display purposes or authorization logic.
        """
        token = super().get_token(user)
        token['email'] = user.email
        token['user_id'] = user.user_id
        return token

    def validate(self, attrs):
        """
        Validates user credentials and adds additional user-related fields
        to the response payload after successful authentication.

        Also checks if the user is active. If not, raises a validation error.
        """
        data = super().validate(attrs)

        if not self.user.is_active:
            raise serializers.ValidationError('User account is disabled.')

        refresh = self.get_token(self.user)

        data['refresh'] = str(refresh)
        data['access'] = str(refresh.access_token)
        data['user_id'] = self.user.user_id
        data['email'] = self.user.email
        return data
</file>

<file path="users/serializers/user_serializers.py">
from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError as DjangoValidationError
from django.core.validators import validate_email
from djoser.serializers import UserSerializer
from rest_framework import serializers
from users.models import UserRole
from users.validators import CustomPasswordValidator
from django.contrib.auth.password_validation import validate_password

User = get_user_model()
custom_password_validator = CustomPasswordValidator()


class CustomUserSerializer(UserSerializer):
    class Meta(UserSerializer.Meta):
        model = User
        fields = ('user_id', 'username', 'email')


class CustomUserCreateSerializer(serializers.ModelSerializer):
    """
    Custom user registration serializer that handles user creation with role assignment.
    """
    password = serializers.CharField(
        write_only=True,
        required=True,
        style={'input_type': 'password'},
        min_length=8,
    )
    password2 = serializers.CharField(
        write_only=True,
        required=True,
        style={'input_type': 'password'},
        label='Confirm Password'
    )

    class Meta:
        model = User
        fields = ('email', 'first_name', 'last_name', 'password', 'password2')
        extra_kwargs = {
            'email': {'required': True},
            'first_name': {'required': True, 'allow_blank': False},
            'last_name': {'required': True, 'allow_blank': False},
        }

    def validate_email(self, value):
        """Validate that the email is not already in use."""
        if User.objects.filter(email__iexact=value).exists():
            raise serializers.ValidationError(
                "A user with this email already exists.", code="conflict"
            )
        return value.lower()

    def validate_password(self, value):
        """Apply global Django password validators (length, similarity, common, numeric, custom)."""
        try:
            validate_password(value)
        except DjangoValidationError as e:
            raise serializers.ValidationError(e.messages)
        return value

    def validate(self, data):
        """Validate the entire user data."""
        if data['password'] != data.pop('password2'):
            raise serializers.ValidationError({"password": "Password fields didn't match."})

        try:
            validate_email(data.get('email'))
        except DjangoValidationError:
            raise serializers.ValidationError({"email": "Enter a valid email address."})

        return data

    def create(self, validated_data):
        """Create and return a new user with the USER role by default."""
        validated_data.pop('password2', None)

        user_role, created = UserRole.objects.get_or_create(role=UserRole.Role.USER)

        user = User.objects.create_user(
            email=validated_data['email'],
            first_name=validated_data['first_name'],
            last_name=validated_data['last_name'],
            password=validated_data['password'],
            role=user_role
        )

        return user


class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['user_id', 'email', 'first_name', 'last_name', 'user_phone', 'title', 'role']


class CurrentUserSerializer(serializers.ModelSerializer):
    """Public serializer for the currently logged-in user."""
    role = serializers.SerializerMethodField()

    def get_role(self, obj):
        return obj.role.role if obj.role else None

    class Meta:
        model = User
        fields = ("user_id", "email", "first_name", "last_name", "user_phone", "title", "role")
        read_only_fields = ("user_id", "email", "first_name", "last_name", "user_phone", "title", "role")


class ResendEmailSerializer(serializers.Serializer):
    """
    Serializer for resending a verification email.

    This serializer is used to validate the request payload for the endpoint
    that allows resending an email verification link to a user.
    It does not reveal whether the user exists, for security purposes.

    Attributes:
        user_id (IntegerField): The ID of the target user. Must be a positive integer.
        token (CharField): The current verification token. Can be empty if a new token should be generated.
        email (EmailField, optional): A new email address to send the verification link to.
            If provided, it will override the stored email.
    """
    user_id = serializers.IntegerField(min_value=1)
    token = serializers.CharField(allow_blank=True, required=False)
    email = serializers.EmailField(required=False)

    def validate_email(self, value):
        """
        Normalize and validate the provided email address.

        This method converts the email to lowercase. It does not raise errors
        about whether the email already exists, to prevent user enumeration.

        Args:
            value (str): The email address provided in the request.

        Returns:
            str: The normalized (lowercased) email address.
        """
        return value.lower()
</file>

<file path="users/admin.py">
from django.contrib import admin

# Register your models here.
</file>

<file path="users/apps.py">
from django.apps import AppConfig


class UsersConfig(AppConfig):
    name = 'users'
    
    def ready(self):
        """
        Import signal handlers to ensure they are registered when the app is ready.
        """
        import users.signals
</file>

<file path="users/backends.py">
from django.contrib.auth.backends import ModelBackend
from django.contrib.auth import get_user_model

UserModel = get_user_model()

class EmailBackend(ModelBackend):
    def authenticate(self, request, username=None, password=None, **kwargs):
        email = kwargs.get("email", username)
        if email is None or password is None:
            return None
        try:
            user = UserModel.objects.get(email=email)
        except UserModel.DoesNotExist:
            return None
        if user.check_password(password) and self.user_can_authenticate(user):
            return user
        return None
</file>

<file path="users/constants.py">
from .tokens import EmailVerificationTokenGenerator

SUPPORT_TEXT = "If you didn't request this, please ignore this email."
ACTIVATION_EMAIL_TEMPLATE = 'email/activation.html'
EMAIL_VERIFICATION_TOKEN = EmailVerificationTokenGenerator()
</file>

<file path="users/models.py">
import logging
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.core.exceptions import ValidationError
from django.db import IntegrityError, DataError
from django.utils import timezone
from django.forms.models import model_to_dict
from validation.validate_email import validate_email_custom
from validation.validate_string_fields import validate_max_length
from validation.validate_role import validate_role_exists
from django.db import transaction

logger = logging.getLogger(__name__)

class ActiveUserManager(models.Manager):
    """Manager that returns only active users."""

    def get_queryset(self):
        """
        Retrieve a queryset filtering only active users.

        Returns:
            QuerySet: A queryset of users with is_active=True.
        """
        return super().get_queryset().filter(is_active=True)


class CustomUserManager(BaseUserManager):
    """Manager for creating regular and super users."""

    def create_user(self, email, password=None, **other_fields):
        """
        Create and save a regular user with the given email and password.

        Args:
            email (str): The user's email address.
            password (str, optional): The user's password.
            **other_fields: Additional fields for the user model.

        Raises:
            ValueError: If email is not provided or invalid.

        Returns:
            User: The created user instance.
        """
        if 'role' not in other_fields or other_fields['role'] is None:
            default_role = UserRole.objects.filter(role=UserRole.Role.USER).first()
            if not default_role:
                raise ValueError("Default role USER does not exist. Please create it first.")
            other_fields['role'] = default_role
        
        validate_max_length(email, 50, "Email")
        
        if self.model.objects.filter(email=email).exists():
            raise ValidationError("Email already exists")
        
        validate_email_custom(email)
        
        email = self.normalize_email(email)
        other_fields.setdefault('is_active', False)
        user = self.model(email=email, **other_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **other_fields):
        """
        Create and save a superuser with the given email and password.

        Args:
            email (str): The superuser's email address.
            password (str, optional): The superuser's password.
            **other_fields: Additional fields for the user model.

        Returns:
            User: The created superuser instance.
        """
        other_fields.setdefault('is_staff', True)
        other_fields.setdefault('is_superuser', True)
        other_fields.setdefault('role', UserRole.objects.filter(role=UserRole.Role.ADMIN).first())
        return self.create_user(email, password, **other_fields)


class User(AbstractBaseUser, PermissionsMixin):
    """
    Custom user model.

    Attributes:
        user_id (AutoField): Primary key.
        first_name (str): User's first name.
        last_name (str): User's last name.
        email (str): User's email address (unique).
        password (str): Hashed password.
        user_phone (str, optional): User's phone number.
        title (str, optional): User's job title.
        role (str): User role.
        created_at (datetime): Record creation timestamp.
        updated_at (datetime): Record last update timestamp.
        is_active (bool): User active status.
        is_staff (bool): User staff status.
        pending_email (str, optional): New email address pending verification.
    """

    user_id = models.AutoField(primary_key=True)
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    email = models.EmailField(unique=True, max_length=50)
    password = models.CharField(max_length=128)
    user_phone = models.CharField(max_length=20, null=True, blank=True)
    title = models.CharField(max_length=100, null=True, blank=True)
    role = models.ForeignKey(
        'UserRole',
        on_delete=models.PROTECT,
        related_name='users',
        help_text="Current role of the user"
    )
    created_at = models.DateTimeField(default=timezone.now, editable=False)
    updated_at = models.DateTimeField(auto_now=True)
    is_active = models.BooleanField(default=False)
    is_staff = models.BooleanField(default=False)
    pending_email = models.EmailField(null=True, blank=True)
    verified_at = models.DateTimeField(null=True, blank=True,
        help_text="Timestamp when the user's email was verified"
    )

    objects = CustomUserManager()
    all_objects = models.Manager() 
    active_users = ActiveUserManager()
    email_verification_token = models.CharField(
        max_length=100,
        null=True,
        blank=True,
        help_text="Token for email verification"
    )
    email_verification_sent_at = models.DateTimeField(
        null=True,
        blank=True,
        help_text="When the verification email was sent"
    )

    EMAIL_FIELD = 'email'
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['first_name', 'last_name']

    class Meta:
        db_table = 'users'
        verbose_name = 'User'
        verbose_name_plural = 'Users'
        indexes = [
            models.Index(fields=['email']),
            models.Index(fields=['is_active']),
        ]

    def __str__(self):
        """
        Return a simplified string representation of the user for safe logging.

        Returns:
            str: Concise user info without sensitive data.
        """
        return f"User(id={self.user_id}, name={self.first_name} {self.last_name})"

    def to_dict(self, include_sensitive=False):
        """
        Convert the user instance to a dictionary.
        
        Args:
            include_sensitive (bool): If True, includes sensitive fields like email and phone.
                                  Defaults to False to protect private data.
        
        Returns:
            dict: User data dictionary with timestamps as UNIX ints and role as a string.
             
        Note:
            Use include_sensitive=True only in trusted contexts with proper authorization.
        """
        fields=[
            "user_id", "first_name", "last_name", "email",
            "user_phone", "title", "role", "created_at",
            "updated_at", "is_active", "is_staff"
        ]
        
        if include_sensitive:
            fields += ["email", "user_phone"]
        
        data = model_to_dict(self, fields=fields)
        data["created_at"] = int(self.created_at.timestamp())
        data["updated_at"] = int(self.updated_at.timestamp())
        data["role"] = self.role.role if self.role else None
        return data

    @classmethod
    def get_by_id(cls, user_id):
        """
        Retrieve a user by their ID.

        Args:
            user_id (int): The ID of the user.

        Returns:
            User or None: The user instance if found, else None.
        """
        return cls.active_users.filter(user_id=user_id).first()

    @classmethod
    def get_by_email(cls, email):
        """
        Retrieve a user by their email address.

        Args:
            email (str): The user's email.

        Returns:
            User or None: The user instance if found, else None.
        """
        return cls.active_users.filter(email=email).first()

    @classmethod
    def create(cls, email, password, first_name, last_name,
               user_phone=None, title=None, role=None, **other_fields):
        """
        Create a new user with field validation.

        Args:
            email (str): User email.
            password (str): User password.
            first_name (str): First name.
            last_name (str): Last name.
            user_phone (str, optional): Phone number.
            title (str, optional): Job title.
            role (str, optional): User role.
            **other_fields: Additional fields.

        Raises:
            ValueError: If validation fails or email already exists.

        Returns:
            User: The created user instance.
        """
        validate_email_custom(email)

        if cls.objects.filter(email=email).exists():
            raise ValidationError("Email already exists")

        validate_max_length(email, 50, "Email")
        validate_max_length(first_name, 50, "First name")
        validate_max_length(last_name, 50, "Last name")
        if user_phone:
            validate_max_length(user_phone, 20, "User phone")
        if title:
            validate_max_length(title, 100, "Title")
        role_obj = None
        if role:
            role_obj = validate_role_exists(role)
        if not password or not isinstance(password, str) or len(password) < 8:
            raise ValidationError("Password must be a string at least 8 characters long")

        user = cls(
            email=email,
            first_name=first_name,
            last_name=last_name,
            user_phone=user_phone,
            title=title,
            role=role_obj,
            **other_fields
        )
        user.set_password(password)
        try:
            user.save()
        except (IntegrityError, DataError) as e:
            raise ValueError(f"Database error: {e}")
        return user

    def update(self, **kwargs):
        """
        Update user fields with validation.

        Args:
            **kwargs: Fields to update.

        Raises:
            ValueError: If validation fails.

        Returns:
            User: Updated user instance.
        """

        def validate_first_name(v):
            return isinstance(v, str) and len(v) <= 50

        def validate_last_name(v):
            return isinstance(v, str) and len(v) <= 50

        def validate_user_phone(v):
            return v is None or (isinstance(v, str) and len(v) <= 20)

        def validate_title(v):
            return v is None or (isinstance(v, str) and len(v) <= 100)

        def validate_role(v):
            return isinstance(v, str) and UserRole.objects.filter(role=v).exists()

        def validate_is_active(v):
            return isinstance(v, bool)

        def validate_is_staff(v):
            return isinstance(v, bool)

        def validate_email_field(v):
            if not isinstance(v, str) or len(v) > 50:
                return False
            try:
                validate_email_custom(v)
                return True
            except ValidationError:
                return False

        allowed_fields = {
            'first_name': validate_first_name,
            'last_name': validate_last_name,
            'user_phone': validate_user_phone,
            'title': validate_title,
            'role': validate_role,
            'email': validate_email_field,
            'is_active': validate_is_active,
            'is_staff': validate_is_staff
        }

        for attr, validator in allowed_fields.items():
            if attr in kwargs:
                value = kwargs[attr]
                if not validator(value):
                    raise ValidationError(f"Invalid value for field '{attr}': {value}")
                
                if attr == 'role':
                    role_obj = validate_role_exists(value)
                    setattr(self, 'role', role_obj)
                else:
                    setattr(self, attr, value)

        if 'password' in kwargs:
            password = kwargs['password']
            if not isinstance(password, str) or len(password) < 8 or len(password) > 128:
                raise ValidationError("Password must be a string between 8 and 128 characters.")
            
            if not self.check_password(password):
                self.set_password(password)

        self.save()
        return self

    @classmethod
    def deactivate_by_id(cls, user_id):
        """
        Deactivate a user by setting is_active to False.

        Args:
            user_id (int): The ID of the user to deactivate.

        Returns:
            bool: True if user was found and deactivated, else False.
        """
        user = cls.active_users.filter(user_id=user_id, is_active=True).first()
        if user:
            user.is_active = False
            user.save()
            return True
        return False

    @classmethod
    def get_all(cls):
        """
        Retrieve all users.

        Returns:
            QuerySet: QuerySet of all users.
        """
        return cls.active_users.all()
    
    @transaction.atomic
    def confirm_pending_email(self):
        """
        Confirm the user's pending email address.

        This method replaces the current `email` with the `pending_email`,
        clears the `pending_email` field, and resets the email verification
        timestamp.

        Raises:
            ValidationError: If there is no pending email to confirm or
                if the pending email is already used by another user.
        """
        if not self.pending_email:
            raise ValidationError({"pending_email": ["No pending email to confirm."]}, code="no_pending_email")
        
        normalized_email = self.pending_email.strip().lower()

        if User.objects.filter(email__iexact=normalized_email).exclude(pk=self.pk).exists():
            raise ValidationError({"pending_email": ["This email is already in use by another user."]}, code="email_taken")
        
        self.email = normalized_email
        self.pending_email = None
        self.email_verification_sent_at = None
        self.verified_at = None
        self.save(update_fields=['email', 'pending_email', 'email_verification_sent_at', 'verified_at'])
        
        logger.info(f"User {self.user_id} confirmed pending email.")
        
        logger.warning(f"User {self.user_id} changed their email.")
        
    def update_email_verification_sent_at(self):
        """
        Update the timestamp of the last email verification message sent.

        This method should be called each time an email verification
        message is sent to the user, allowing the system to track when
        the last confirmation email was dispatched.

        Useful for:
            - Implementing resend rate limiting (e.g., prevent spamming).
            - Auditing and logging email verification activity.
            - Improving security by monitoring frequent resend attempts.

        Returns:
            None
        """
        self.email_verification_sent_at = timezone.now()
        self.save(update_fields=['email_verification_sent_at'])
    
    @property
    def id(self):
        """Provides 'id' as an alias for 'user_id' for Django compatibility.
    
        Django's ORM and some built-in components expect a conventional 'id' field
        as the primary key. This property allows the model to work with Django 
        conventions while maintaining our preferred 'user_id' field name.
        """
        return self.user_id


class UserRole(models.Model):
    """
    User role model.

    Attributes:
        role (str): Role name.
        created_at (datetime): Creation timestamp.
        updated_at (datetime): Last update timestamp.
    """
    class Role(models.TextChoices):
        ADMIN = 'admin', 'Admin'
        USER = 'user', 'User'
        MODERATOR = 'moderator', 'Moderator'

    role = models.CharField(max_length=20, unique=True, choices=Role.choices)
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = 'user_roles'
        verbose_name = 'User Role'
        verbose_name_plural = 'User Roles'
        indexes = [
            models.Index(fields=['role']),
        ]

    def __str__(self):
        """
        String representation of the user role.

        Returns:
            str: Role name.
        """
        return self.role
    
    def clean(self):
        if self.role not in dict(self.Role.choices):
            raise ValidationError(f"Invalid role: {self.role}")

    def save(self, *args, **kwargs):
        self.clean() 
        super().save(*args, **kwargs)
</file>

<file path="users/pipelines.py">
from users.models import UserRole
from users.tasks import send_welcome_oauth_email_task


def create_or_update_user(strategy, details, backend, user=None, *args, **kwargs):
    """
    Pipeline for custom logic after OAuth.
    """
    if user:
        first_name = details.get('first_name', '')
        last_name = details.get('last_name', '')
        updated = False
        if first_name and user.first_name != first_name:
            user.first_name = first_name
            updated = True
        if last_name and user.last_name != last_name:
            user.last_name = last_name
            updated = True
        if updated:
            user.save()
    else:
        user = strategy.create_user(
            email=details.get('email'),
            first_name=details.get('first_name', ''),
            last_name=details.get('last_name', ''),
            role=UserRole.objects.get(role='user')
        )
        send_welcome_oauth_email_task.delay(
            subject="Welcome!",
            message="Thanks for signing up via OAuth",
            recipient_list=[user.email]
        )
    return {'user': user}
</file>

<file path="users/signals.py">
from django.db.models.signals import post_save
from django.db.models.signals import post_migrate
from django.apps import apps
from django.dispatch import receiver
from .models import User

@receiver(post_save, sender=User)
def handle_user_created(sender, instance, created, **kwargs):
    """
    Handle post-save signal for the User model.

    Sends a welcome message or performs other actions when a new user is created.
    Logs updates when an existing user is modified.

    Args:
        sender (Model): The model class.
        instance (User): The saved user instance.
        created (bool): Whether this was a creation or an update.
        **kwargs: Additional signal parameters.
    """
    
    if created:
        print(f"[SIGNAL] New user created: {instance.email}")
    else:
        print(f"[SIGNAL] User updated: {instance.email}")
        
@receiver(post_migrate)
def create_default_roles(sender, **kwargs):
    """
    Creates default UserRole entries after migrations for the 'users' app.

    Args:
        sender: The app config that sent the signal.
        **kwargs: Additional signal arguments.
    """
    try:
        app_config = apps.get_app_config('users')
    except LookupError:
        return
    
    if sender.name == app_config.name:
        UserRole = apps.get_model(sender.label, 'UserRole')
        for role_value, _ in UserRole.Role.choices:
            UserRole.objects.get_or_create(role=role_value)
</file>

<file path="users/tasks.py">
import logging
from celery import shared_task
from django.conf import settings
from users.management.commands.cleanup_email_tokens import Command as CleanupCommand
from django.core.mail import send_mail

logger = logging.getLogger(__name__)

@shared_task
def cleanup_email_tokens():
    """
    Celery task to clean up expired email verification tokens.
    This task is scheduled to run weekly via Celery Beat.
    """
    command = CleanupCommand()
    command.handle(days=7)


@shared_task
def send_welcome_oauth_email_task(subject, message, recipient_list):
    if subject and message and recipient_list:
        try:
            send_mail(
                subject,
                message,
                settings.DEFAULT_FROM_EMAIL, 
                recipient_list,
                fail_silently=False,
            )
            logger.info(f"Email was successfully sent to {recipient_list}")
            return f"Email sent to {recipient_list}"
        except Exception:
            logger.exception("Email was not sent")
            return "Failed to send email"
    else:
        logger.error("Subject, message, and recipient_list must not be empty")
        return "Invalid email parameters"
</file>

<file path="users/tokens.py">
import logging
from typing import Optional
from django.contrib.auth.tokens import PasswordResetTokenGenerator
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from django.utils.encoding import force_bytes, force_str
from .models import User

logger = logging.getLogger(__name__)


class EmailVerificationTokenGenerator(PasswordResetTokenGenerator):
    """
    Token generator for email verification.

    Generates tokens based on:
      - user.pk (primary key)
      - timestamp
      - user.is_active
      - user.email_verification_token field (if present)
      - optionally, user.pending_email if implemented

    Tokens become invalid if:
      - The user is deactivated.
      - The rotation token changes.
      - The pending email changes (if used).
    """

    def _make_hash_value(self, user: User, timestamp: int) -> str:
        """
        Construct a unique hash value for token generation.

        Args:
            user (User): The user instance.
            timestamp (int): Token generation timestamp.

        Returns:
            str: String uniquely identifying the token for the user.
        """
        parts = [
            str(getattr(user, 'pk', '')),
            str(timestamp),
            str(getattr(user, 'is_active', False)),
            str(getattr(user, 'email_verification_token', '')),
        ]

        pending_email = getattr(user, 'pending_email', None)
        if pending_email:
            parts.append(str(pending_email))

        return ":".join(filter(None, parts))


EMAIL_VERIFICATION_TOKEN = EmailVerificationTokenGenerator()


def make_uidb64(user_id: int) -> str:
    """
    Encode user_id to a URL-safe base64 string.

    Args:
        user_id (int): User primary key.

    Returns:
        str: Base64 encoded user ID.
    """
    return urlsafe_base64_encode(force_bytes(str(user_id)))


def decode_uidb64(uidb64: str) -> Optional[int]:
    """
    Decode a base64 string back to user_id.

    Args:
        uidb64 (str): Base64 encoded user ID.

    Returns:
        Optional[Union[int, str]]: Decoded user ID as int if numeric, else str.
                                   Returns None if decoding fails. 
    """
    try:
        decoded = force_str(urlsafe_base64_decode(uidb64))
        if decoded.isdigit():
            return int(decoded)
        return decoded
    except (TypeError, ValueError, OverflowError) as e:
        logger.error(f"Failed to decode uidb64 '{uidb64}': {e}", exc_info=True)
        return None


def make_token(user: User) -> str:
    """
    Generate an email verification token for the user.

    Args:
        user (User): User instance.

    Returns:
        str: Token string.
    """
    if user is None:
        raise ValueError("Cannot generate token: user must not be None.")

    if not user.is_active:
        raise ValueError("Cannot generate token: user is inactive.")

    return EMAIL_VERIFICATION_TOKEN.make_token(user)


def check_token(user: User, token: str) -> bool:
    """
    Validate the token for the user.

    Args:
        user (User): User instance.
        token (str): Token string.

    Returns:
        bool: True if valid, False otherwise.
    """
    if user is None:
        raise ValueError("Cannot check token: user must not be None.")
    if not token:
        raise ValueError("Cannot check token: token must not be None.")
    return EMAIL_VERIFICATION_TOKEN.check_token(user, token)
</file>

<file path="users/validators.py">
from django.core.exceptions import ValidationError
import re

class CustomPasswordValidator:
    """
    Validate that the password contains at least one uppercase letter,
    one lowercase letter, and one digit.
    """
    def validate(self, password, user=None):
        """
        Validate password complexity requirements.

        Args:
            password (str): The password to validate.
            user (User, optional): The user object. Not used in this validator.

        Raises:
            ValidationError: If the password doesn't meet complexity requirements.
        """
        if not re.search(r'[A-Z]', password):
            raise ValidationError("Password must contain at least one uppercase letter.")
        if not re.search(r'[a-z]', password):
            raise ValidationError("Password must contain at least one lowercase letter.")
        if not re.search(r'\d', password):
            raise ValidationError("Password must contain at least one number.")
    
    def get_help_text(self):
        """
        Return the help text describing password requirements.

        Returns:
            str: A string explaining the password rules.
        """
        return "Password must contain uppercase and lowercase letters and numbers."
</file>

<file path="utils/error_response.py">
from rest_framework.response import Response


def error_response(message, status_code):
    """
    Helper to return error responses in consistent format.

    Args:
        message (str or dict): Error message or dict of errors.
        status_code (int): HTTP status code.

    Returns:
        Response: DRF Response with given message and status.
    """
    if isinstance(message, str):
        data = {"detail": message}
    else:
        data = message
    return Response(data, status=status_code)
</file>

<file path="utils/get_default_user_role.py">
from django.core.cache import cache
from users.models import UserRole


def get_default_user_role():
    """
    Retrieve the default 'user' role with caching and error handling.

    Returns:
        UserRole: The default user role object

    Raises:
        RuntimeError: If the default user role is not configured in the system
    """
    cache_key = "default_user_role"
    default_role = cache.get(cache_key)

    if default_role is None:
        try:
            default_role = UserRole.objects.get(role="user")
            cache.set(cache_key, default_role, timeout=3600)  # Cache 1 hour
        except UserRole.DoesNotExist:
            raise RuntimeError(
                "Default 'user' role is not configured. Please create UserRole with role='user'."
            )

    return default_role
</file>

<file path="utils/get_field_value.py">
def get_field_value(serializer, data, field_name):
    """
    Gets value from validated_data first, instance second, else None.
    """
    if field_name in data:
        return data[field_name]
    if hasattr(serializer, 'instance') and serializer.instance is not None:
        return getattr(serializer.instance, field_name, None)
    return None
</file>

<file path="validation/validate_document.py">
import filetype
from django.conf import settings
from django.core.exceptions import ValidationError


def validate_document_file(file):
    """
    Validates an uploaded document file:
    - Checks if the file extension is in the allowed list from settings.
    - Ensures file size does not exceed the limit from settings.
    - Uses `filetype` to detect MIME type and validates it against allowed MIME types from settings.

    Args:
        file (File): The uploaded file to validate.

    Raises:
        ValidationError: If the file is invalid due to extension, size, or MIME type.
    """
    if not file:
        raise ValidationError("No file was uploaded.")

    ext = file.name.rsplit('.', 1)[-1].lower()
    if ext not in settings.ALLOWED_DOCUMENT_EXTENSIONS:
        raise ValidationError(
            f"Unsupported file extension: .{ext}. Allowed: {', '.join(settings.ALLOWED_DOCUMENT_EXTENSIONS)}"
        )

    if file.size > settings.MAX_DOCUMENT_SIZE_MB * 1024 * 1024:
        raise ValidationError(f"The file size must not exceed {settings.MAX_DOCUMENT_SIZE_MB}MB.")

    # Detect MIME type
    file.seek(0)
    kind = filetype.guess(file.read(262))  # Read enough bytes for detection

    if kind is None:
        raise ValidationError("Unable to detect the file type. The file may be corrupted or unsupported.")

    mime_type = kind.mime
    if mime_type not in settings.ALLOWED_DOCUMENT_MIME_TYPES:
        raise ValidationError(f"Invalid MIME type: {mime_type}. This file type is not allowed.")

    file.seek(0)  # Reset pointer for future reads
</file>

<file path="validation/validate_email.py">
from django.core.validators import validate_email
from django.core.exceptions import ValidationError


def validate_email_custom(value):
    """
    Validates that the given value is a properly formatted email address.

    This function uses Django's built-in `validate_email` to check the format.
    If the email is invalid, it raises a `ValidationError` with a custom message.

    Args:
        value (str): The email address to validate.

    Raises:
        ValidationError: If the email address format is invalid.
    """
    try:
        validate_email(value)
    except ValidationError:
        raise ValidationError("Invalid email address format.")
</file>

<file path="validation/validate_image.py">
from django.core.exceptions import ValidationError
from django.core.validators import FileExtensionValidator
from PIL import Image, UnidentifiedImageError
from django.conf import settings

file_extension_validator = FileExtensionValidator(
    allowed_extensions=settings.ALLOWED_IMAGE_EXTENSIONS
)


def validate_image_file(file):
    """
    Validates an uploaded image file:
    - Validates file extension using FileExtensionValidator.
    - Checks size limit.
    - Verifies it's a valid image using Pillow.
    - Validates image dimensions and mode.

    Raises:
        ValidationError: If the image is invalid based on any criteria.
    """
    if not file:
        raise ValidationError("No file was uploaded.")

    file_extension_validator(file)

    if file.size > settings.MAX_IMAGE_SIZE_MB * 1024 * 1024:
        raise ValidationError(f"The file size must not exceed {settings.MAX_IMAGE_SIZE_MB}MB.")

    try:
        image = Image.open(file)
        image.verify()
    except UnidentifiedImageError:
        raise ValidationError("The uploaded file is not a valid image.")
    except Exception:
        raise ValidationError("Failed to process the image. It may be corrupted or unsupported.")

    file.seek(0)
    image = Image.open(file)

    max_width, max_height = settings.MAX_IMAGE_DIMENSIONS
    if image.width > max_width or image.height > max_height:
        raise ValidationError(f"Image dimensions must not exceed {max_width}x{max_height}px.")

    if image.mode not in settings.ALLOWED_IMAGE_MODES:
        raise ValidationError(f"Unsupported image mode. Only {', '.join(settings.ALLOWED_IMAGE_MODES)} are allowed.")
</file>

<file path="validation/validate_names.py">
import re
from django.core.exceptions import ValidationError

LATIN_REGEX = re.compile(r"^[A-Za-z0-9\s\-']+$")
FORBIDDEN_NAMES = {name.lower() for name in {"other", "none", "misc", "default"}}


def validate_company_name(value):
    """
    Validate company name for startups and investors.

    Args:
        value (str): Company name to validate

    Returns:
        str: Validated and stripped company name

    Raises:
        ValidationError: If company name is invalid
    """
    value = str(value).strip()

    if not value:
        raise ValidationError("Company name must not be empty.")

    return value


def validate_latin(value: str) -> bool:
    """
    Checks whether the text contains only Latin letters,
    spaces, hyphens, or apostrophes.

    Args:
    text (str): The text to check.

    Returns:
    bool: True if the text matches the pattern, False otherwise.
    """
    return bool(LATIN_REGEX.match(value.strip()))


def validate_forbidden_names(name: str, field_name: str = "name"):
    """
    Validates a name string to ensure it:
    - Is not empty or only whitespace.
    - Contains only Latin letters, spaces, hyphens, or apostrophes.
    - Is not a generic or reserved word (e.g., 'other', 'none').

    Args:
        name (str): The name string to validate.
        field_name (str): The name of the field being validated (used in error messages).

    Raises:
        ValidationError: If the name is empty, contains non-Latin characters,
                         or is a forbidden value.
    """
    name = validate_company_name(name)

    if not validate_latin(name):
        raise ValidationError(
            {field_name: "The name must contain only Latin letters, spaces, hyphens, or apostrophes."})

    if name.lower() in FORBIDDEN_NAMES:
        raise ValidationError({
            field_name: "This name is too generic or reserved. Please write a more specific name."
        })
</file>

<file path="validation/validate_role.py">
from django.core.exceptions import ValidationError

def validate_role_exists(role_name):
    """
    Checks if a role with the given name exists in the database.

    Args:
        role_name (str): The name of the role to validate.

    Raises:
        ValidationError: If no role with the specified name exists.

    Returns:
        UserRole: The role object if found.
    """
    from users.models import UserRole
    role_obj = UserRole.objects.filter(role=role_name).first()
    if not role_obj:
        raise ValidationError(f"Role '{role_name}' does not exist")
    return role_obj
</file>

<file path="validation/validate_self_investment.py">
from django.core.exceptions import ValidationError

def validate_self_investment(investor, project):
    """
    Validates that an investor is not investing in their own startup's project.

    Args:
        investor: The Investor instance making the subscription.
        project: The Project instance receiving the investment.

    Raises:
        ValidationError: If the investor is the owner of the project's startup.
    """
    if (
        investor and project and
        hasattr(project, 'startup') and
        project.startup and
        project.startup.user_id == investor.user_id
    ):
        raise ValidationError("Investors cannot invest in their own startup's project.")
</file>

<file path="validation/validate_social_links.py">
from urllib.parse import urlparse
from django.core.validators import URLValidator
from publicsuffix2 import get_sld


def validate_social_links_dict(social_links, allowed_platforms, raise_serializer=False):
    """
    Validates a dictionary of social links.

    Args:
        social_links (dict): The dict to validate.
        allowed_platforms (dict): Platform -> list of allowed base domains (e.g., 'linkedin.com').
        raise_serializer (bool): Whether to raise DRF ValidationError (True) or Django's (False).

    Raises:
        ValidationError: Either DRF or Django, depending on raise_serializer.
    """
    from rest_framework.exceptions import ValidationError as DRFValidationError
    from django.core.exceptions import ValidationError as DjangoValidationError

    url_validator = URLValidator()
    errors = {}

    for platform, url in social_links.items():
        platform_lc = platform.lower()

        if platform_lc not in allowed_platforms:
            errors[platform] = f"Platform '{platform}' is not supported."
            continue

        try:
            url_validator(url)
        except DjangoValidationError:
            errors[platform] = f"Malformed URL for platform '{platform}': {url}"
            continue

        parsed_url = urlparse(url)
        netloc = parsed_url.netloc.lower()

        try:
            sld = get_sld(netloc)
        except ValueError:
            errors[platform] = f"Could not parse domain for platform '{platform}': {netloc}"
            continue

        allowed_domains = allowed_platforms.get(platform_lc, [])
        if isinstance(allowed_domains, str):
            allowed_domains = [allowed_domains]
        elif not isinstance(allowed_domains, (list, tuple, set)):
            allowed_domains = []

        if sld not in allowed_domains:
            errors[platform] = f"Invalid domain for platform '{platform}': {netloc}"

    if errors:
        raise (DRFValidationError if raise_serializer else DjangoValidationError)(errors)
</file>

<file path="validation/validate_string_fields.py">
from django.core.exceptions import ValidationError


def validate_max_length(value, max_length, field_name):
    """
    Validates that the value does not exceed the maximum length.

    Args:
        value (str): The string to validate.
        max_length (int): Maximum allowed length.
        field_name (str): Name of the field for error messages.

    Raises:
        ValidationError: If value exceeds max_length.
    """
    if value and len(value) > max_length:
        raise ValidationError(f"{field_name} must be {max_length} characters or fewer")
</file>

<file path=".dockerignore">
# Ignore Python cache files
__pycache__/
*.py[cod]
*.pyc
*.pyo
*.pyd

# Ignore environment files
.env
.env.*

# Ignore Git and version control
.git/
.gitignore

# Ignore IDE/editor config
.vscode/
.idea/

# Ignore OS-specific files
.DS_Store
Thumbs.db

# Ignore users output, coverage, etc.
*.log
*.sqlite3
.coverage
htmlcov/

# Ignore compiled files
*.so

# Ignore build artifacts
build/
dist/
*.egg-info/

# Ignore media/static files (optional, depending on how you handle them)
staticfiles/
media/
</file>

<file path=".gitattributes">
*.sh text eol=lf
</file>

<file path=".gitignore">
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit users / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
.idea/

# Django staticfiles
staticfiles/

/logs

.history/
__pycache__/
*.pyc
*.session.sql
.vscode/
</file>

<file path=".pylintrc">
[MAIN]

# Load pylint-django plugin for Django-specific linting
load-plugins=pylint_django

# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks=no

# Clear in-memory caches upon conclusion of linting. Useful if running pylint
# in a server-like mode.
clear-cache-post-run=no

# Load and enable all available extensions. Use --list-extensions to see a list
# all available extensions.
#enable-all-extensions=

# In error mode, messages with a category besides ERROR or FATAL are
# suppressed, and no reports are done by default. Error mode is compatible with
# disabling specific errors.
#errors-only=

# Always return a 0 (non-error) status code, even if lint errors are found.
# This is primarily useful in continuous integration scripts.
#exit-zero=

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
extension-pkg-allow-list=

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code. (This is an alternative name to extension-pkg-allow-list
# for backward compatibility.)
extension-pkg-whitelist=

# Return non-zero exit code if any of these messages/categories are detected,
# even if score is above --fail-under value. Syntax same as enable. Messages
# specified are enabled, while categories only check already-enabled messages.
fail-on=

# Specify a score threshold under which the program will exit with error.
fail-under=10

# Interpret the stdin as a python script, whose filename needs to be passed as
# the module_or_package argument.
#from-stdin=

# Files or directories to be skipped. They should be base names, not paths.
ignore=CVS

# Add files or directories matching the regular expressions patterns to the
# ignore-list. The regex matches against paths and can be in Posix or Windows
# format. Because '\\' represents the directory delimiter on Windows systems,
# it can't be used as an escape character.
ignore-paths=

# Files or directories matching the regular expression patterns are skipped.
# The regex matches against base names, not paths. The default value ignores
# Emacs file locks
ignore-patterns=^\.#

# List of module names for which member attributes should not be checked and
# will not be imported (useful for modules/projects where namespaces are
# manipulated during runtime and thus existing member attributes cannot be
# deduced by static analysis). It supports qualified module names, as well as
# Unix pattern matching.
ignored-modules=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use, and will cap the count on Windows to
# avoid hangs.
jobs=1

# Control the amount of potential inferred values when inferring a single
# object. This can help the performance when dealing with large functions or
# complex, nested conditions.
limit-inference-results=100

# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
load-plugins=

# Pickle collected data for later comparisons.
persistent=yes

# Resolve imports to .pyi stubs if available. May reduce no-member messages and
# increase not-an-iterable messages.
prefer-stubs=no

# Minimum Python version to use for version dependent checks. Will default to
# the version used to run pylint.
py-version=3.12

# Discover python modules and packages in the file system subtree.
recursive=no

# Add paths to the list of the source roots. Supports globbing patterns. The
# source root is an absolute path or a path relative to the current working
# directory used to determine a package namespace for modules located under the
# source root.
source-roots=

# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode=yes

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no

# In verbose mode, extra non-checker-related info will be displayed.
#verbose=


[BASIC]

# Naming style matching correct argument names.
argument-naming-style=snake_case

# Regular expression matching correct argument names. Overrides argument-
# naming-style. If left empty, argument names will be checked with the set
# naming style.
#argument-rgx=

# Naming style matching correct attribute names.
attr-naming-style=snake_case

# Regular expression matching correct attribute names. Overrides attr-naming-
# style. If left empty, attribute names will be checked with the set naming
# style.
#attr-rgx=

# Bad variable names which should always be refused, separated by a comma.
bad-names=foo,
          bar,
          baz,
          toto,
          tutu,
          tata

# Bad variable names regexes, separated by a comma. If names match any regex,
# they will always be refused
bad-names-rgxs=

# Naming style matching correct class attribute names.
class-attribute-naming-style=any

# Regular expression matching correct class attribute names. Overrides class-
# attribute-naming-style. If left empty, class attribute names will be checked
# with the set naming style.
#class-attribute-rgx=

# Naming style matching correct class constant names.
class-const-naming-style=UPPER_CASE

# Regular expression matching correct class constant names. Overrides class-
# const-naming-style. If left empty, class constant names will be checked with
# the set naming style.
#class-const-rgx=

# Naming style matching correct class names.
class-naming-style=PascalCase

# Regular expression matching correct class names. Overrides class-naming-
# style. If left empty, class names will be checked with the set naming style.
#class-rgx=

# Naming style matching correct constant names.
const-naming-style=UPPER_CASE

# Regular expression matching correct constant names. Overrides const-naming-
# style. If left empty, constant names will be checked with the set naming
# style.
#const-rgx=

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1

# Naming style matching correct function names.
function-naming-style=snake_case

# Regular expression matching correct function names. Overrides function-
# naming-style. If left empty, function names will be checked with the set
# naming style.
#function-rgx=

# Good variable names which should always be accepted, separated by a comma.
good-names=i,
           j,
           k,
           ex,
           Run,
           _

# Good variable names regexes, separated by a comma. If names match any regex,
# they will always be accepted
good-names-rgxs=

# Include a hint for the correct naming format with invalid-name.
include-naming-hint=no

# Naming style matching correct inline iteration names.
inlinevar-naming-style=any

# Regular expression matching correct inline iteration names. Overrides
# inlinevar-naming-style. If left empty, inline iteration names will be checked
# with the set naming style.
#inlinevar-rgx=

# Naming style matching correct method names.
method-naming-style=snake_case

# Regular expression matching correct method names. Overrides method-naming-
# style. If left empty, method names will be checked with the set naming style.
#method-rgx=

# Naming style matching correct module names.
module-naming-style=snake_case

# Regular expression matching correct module names. Overrides module-naming-
# style. If left empty, module names will be checked with the set naming style.
#module-rgx=

# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
name-group=

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=^_

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
# These decorators are taken in consideration only for invalid-name.
property-classes=abc.abstractproperty

# Regular expression matching correct type alias names. If left empty, type
# alias names will be checked with the set naming style.
#typealias-rgx=

# Regular expression matching correct type variable names. If left empty, type
# variable names will be checked with the set naming style.
#typevar-rgx=

# Naming style matching correct variable names.
variable-naming-style=snake_case

# Regular expression matching correct variable names. Overrides variable-
# naming-style. If left empty, variable names will be checked with the set
# naming style.
#variable-rgx=


[CLASSES]

# Warn about protected attribute access inside special methods
check-protected-access-in-special-methods=no

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,
                      __new__,
                      setUp,
                      asyncSetUp,
                      __post_init__

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected=_asdict,_fields,_replace,_source,_make,os._exit

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs


[DESIGN]

# List of regular expressions of class ancestor names to ignore when counting
# public methods (see R0903)
exclude-too-few-public-methods=

# List of qualified class names to ignore when counting class parents (see
# R0901)
ignored-parents=

# Maximum number of arguments for function / method.
max-args=5

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr=5

# Maximum number of branch for function / method body.
max-branches=12

# Maximum number of locals for function / method body.
max-locals=15

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of positional arguments for function / method.
max-positional-arguments=5

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

# Maximum number of return / yield for function / method body.
max-returns=6

# Maximum number of statements in function / method body.
max-statements=50

# Minimum number of public methods for a class (see R0903).
min-public-methods=2


[EXCEPTIONS]

# Exceptions that will emit a warning when caught.
overgeneral-exceptions=builtins.BaseException,builtins.Exception


[FORMAT]

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Maximum number of characters on a single line.
max-line-length=100

# Maximum number of lines in a module.
max-module-lines=1000

# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
single-line-class-stmt=no

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no


[IMPORTS]

# List of modules that can be imported at any level, not just the top level
# one.
allow-any-import-level=

# Allow explicit reexports by alias from a package __init__.
allow-reexport-from-package=no

# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all=no

# Deprecated modules which should not be used, separated by a comma.
deprecated-modules=

# Output a graph (.gv or any supported image format) of external dependencies
# to the given file (report RP0402 must not be disabled).
ext-import-graph=

# Output a graph (.gv or any supported image format) of all (i.e. internal and
# external) dependencies to the given file (report RP0402 must not be
# disabled).
import-graph=

# Output a graph (.gv or any supported image format) of internal dependencies
# to the given file (report RP0402 must not be disabled).
int-import-graph=

# Force import order to recognize a module as part of the standard
# compatibility libraries.
known-standard-library=

# Force import order to recognize a module as part of a third party library.
known-third-party=enchant

# Couples of modules and preferred modules, separated by a comma.
preferred-modules=


[LOGGING]

# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style=old

# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules=logging


[MESSAGES CONTROL]

# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE,
# UNDEFINED.
confidence=HIGH,
           CONTROL_FLOW,
           INFERENCE,
           INFERENCE_FAILURE,
           UNDEFINED

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once). You can also use "--disable=all" to
# disable everything first and then re-enable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable=

      #Configuration and Pylint internal behavior
      raw-checker-failed,              # Failure inside one of the checkers
      bad-inline-option,               # Invalid or misplaced inline option (e.g., # pylint: disable=)
      deprecated-pragma,               # Use of deprecated directives (e.g., # pylint: disable-msg=...)

      #File and local disabling behavior
      file-ignored,                   # Entire file marked as ignored
      locally-disabled,               # Checks disabled locally in code
      suppressed-message,             # Message explicitly suppressed
      useless-suppression,            # Suppression that has no effect (not needed)

      #Code style
      use-symbolic-message-instead,                      # Prefer symbolic message names (e.g., C0114 instead of missing-module-docstring)
      use-implicit-booleaness-not-comparison-to-string,  # Use `if var:` instead of `if var == ""`
      use-implicit-booleaness-not-comparison-to-zero     # Use `if var:` instead of `if var == 0`

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.
enable=


[METHOD_ARGS]

# List of qualified names (i.e., library.method) which require a timeout
# parameter e.g. 'requests.api.get,requests.api.post'
timeout-methods=requests.api.delete,requests.api.get,requests.api.head,requests.api.options,requests.api.patch,requests.api.post,requests.api.put,requests.api.request


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,
      XXX,
      TODO

# Regular expression of note tags to take in consideration.
notes-rgx=


[REFACTORING]

# Maximum number of nested blocks for function / method body
max-nested-blocks=5

# Complete name of functions that never returns. When checking for
# inconsistent-return-statements if a never returning function is called then
# it will be considered as an explicit return statement and no message will be
# printed.
never-returning-functions=sys.exit,argparse.parse_error

# Let 'consider-using-join' be raised when the separator to join on would be
# non-empty (resulting in expected fixes of the type: ``"- " + " -
# ".join(items)``)
suggest-join-with-non-empty-separator=yes


[REPORTS]

# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'fatal', 'error', 'warning', 'refactor',
# 'convention', and 'info' which contain the number of messages in each
# category, as well as 'statement' which is the total number of statements
# analyzed. This score is used by the global evaluation report (RP0004).
evaluation=max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details.
msg-template=

# Set the output format. Available formats are: 'text', 'parseable',
# 'colorized', 'json2' (improved json format), 'json' (old json format), msvs
# (visual studio) and 'github' (GitHub actions). You can also give a reporter
# class, e.g. mypackage.mymodule.MyReporterClass.
#output-format=

# Tells whether to display a full report or only the messages.
reports=no

# Activate the evaluation score.
score=yes


[SIMILARITIES]

# Comments are removed from the similarity computation
ignore-comments=yes

# Docstrings are removed from the similarity computation
ignore-docstrings=yes

# Imports are removed from the similarity computation
ignore-imports=yes

# Signatures are removed from the similarity computation
ignore-signatures=yes

# Minimum lines number of a similarity.
min-similarity-lines=4


[SPELLING]

# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions=4

# Spelling dictionary name. No available dictionaries : You need to install
# both the python package and the system dependency for enchant to work.
spelling-dict=

# List of comma separated words that should be considered directives if they
# appear at the beginning of a comment and should not be checked.
spelling-ignore-comment-directives=fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:

# List of comma separated words that should not be checked.
spelling-ignore-words=

# A path to a file that contains the private dictionary; one word per line.
spelling-private-dict-file=

# Tells whether to store unknown words to the private dictionary (see the
# --spelling-private-dict-file option) instead of raising a message.
spelling-store-unknown-words=no


[STRING]

# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
check-quote-consistency=no

# This flag controls whether the implicit-str-concat should generate a warning
# on implicit string concatenation in sequences defined over several lines.
check-str-concat-over-line-jumps=no


[TYPECHECK]

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
ignored-modules=django.http, django.db

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis
ignored-classes=django.db.models

# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators=contextlib.contextmanager

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members=

# Tells whether to warn about missing members when the owner of the attribute
# is inferred to be None.
ignore-none=yes

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference
# can return multiple potential results while evaluating a Python object, but
# some branches might not be evaluated, which results in partial inference. In
# that case, it might be useful to still emit no-member and other checks for
# the rest of the inferred objects.
ignore-on-opaque-inference=yes

# List of symbolic message names to ignore for Mixin members.
ignored-checks-for-mixins=no-member,
                          not-async-context-manager,
                          not-context-manager,
                          attribute-defined-outside-init

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes=optparse.Values,thread._local,_thread._local,argparse.Namespace

# Show a hint with possible names when a member name was not found. The aspect
# of finding the hint is based on edit distance.
missing-member-hint=yes

# The maximum edit distance a name should have in order to be considered a
# similar match for a missing member name.
missing-member-hint-distance=1

# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices=1

# Regex pattern to define which classes are considered mixins.
mixin-class-rgx=.*[Mm]ixin

# List of decorators that change the signature of a decorated function.
signature-mutators=


[VARIABLES]

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid defining new builtins when possible.
additional-builtins=

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables=yes

# List of names allowed to shadow builtins
allowed-redefined-builtins=

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks=cb_,
          _cb

# A regular expression matching the name of dummy variables (i.e. expected to
# not be used).
dummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_

# Argument names that match this expression will be ignored.
ignored-argument-names=_.*|^ignored_|^unused_

# Tells whether we should check for unused import in __init__ files.
init-import=no

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io
</file>

<file path="CODE_QUALITY.md">
# Code Quality and Linting with Pylint
This project uses **Pylint** and the **pylint-django** plugin to ensure code quality, consistency, and adherence to best practices in a Django environment.

**Installation**

Install the linting tools into your Python environment:

    pip install pylint pylint-django

**Usage**

To run Pylint on a specific Django app, replace `<app_name>` with the name of the app directory you want to lint:

    pylint --load-plugins pylint_django <app_name>/

For example, to run it on the `users` app:

    pylint --load-plugins pylint_django users/

You can also run it on the entire project folder once all apps are available.

**Interpreting the Results**

Pylint outputs a list of messages and a final score from -10.00 to 10.00.
Each message includes:
- the file and line number,
- a message ID (e.g., C0114, E1101),
- and a short description.

Example:

    users/models.py:1:0: C0114: Missing module docstring (missing-module-docstring)

Messages are categorized by type:
+ C – convention (style issues)
+ R – refactor (design recommendations)
+ W – warning (potential issues)
+ E – error (likely bugs)
+ F – fatal (breaks analysis)

Aim for a score as close to 10.00/10.00 as possible.

**Notes**

- Please run Pylint before submitting code for review.
- Fix as many warnings as possible, or leave comments if a warning is known and safe to ignore.
- You may customize `.pylintrc` further if needed — discuss changes with the team.

**Reminder for contributors**

To avoid discrepancies in linting results across different environments, make sure you have the latest versions of Pylint and its dependencies installed. Regularly update them using:

    pip install -U pylint pylint-django
</file>

<file path="docker-compose.yml">
services:
  web:
    build: .
    container_name: api-dev
    restart: on-failure
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
      - elasticsearch
    networks:
      - forum
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/healthcheck/"]
      interval: 10s
      timeout: 5s
      retries: 3
    
  fastapi:
    build: .
    command: uvicorn core.asgi:application --host 0.0.0.0 --port 8001 --reload
    ports:
      - "8001:8001"
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      - db
      - elasticsearch
    networks:
      - forum

  elasticsearch:
    image: elasticsearch:7.17.12
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://localhost:9200/_cluster/health?wait_for_status=yellow"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - forum

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - forum

  celery:
    build: .
    entrypoint: []
    command: celery -A core worker -l info
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
    env_file:
      - .env  
    networks:
      - forum    
  db:
    image: postgres:14
    container_name: db
    restart: always
    volumes:
      - ./configs/postgres:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - forum

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    env_file:
      - .env
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin/data
    depends_on:
      - db
    networks:
      - forum

  test:
    build: .
    container_name: test-runner
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=core.test_settings
      - DB_HOST=db 
      - ELASTICSEARCH_HOST=http://elasticsearch:9200
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - .:/app
    command: ["db", "python", "manage.py", "test"]
    
  mongo:
    image: mongo:6
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
    networks:
      - forum

volumes:
  postgres_data:
  pgadmin_data:
  esdata:
    driver: local
  mongo_data:
networks:
  forum:
</file>

<file path="Dockerfile">
# syntax=docker/dockerfile:1
FROM python:3.11-slim

# Stage 1: build dependencies
FROM python:3.11-slim as builder

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

RUN apt-get update -q && \
    apt-get install -y -q --no-install-recommends --no-install-suggests \
        libpq-dev gcc && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install pip requirements
COPY requirements.txt .
RUN pip install --upgrade pip \
    && pip install --user --no-cache-dir -r requirements.txt

# Stage 2: production image
FROM python:3.11-slim

WORKDIR /app

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PATH=/root/.local/bin:$PATH

# Install system dependencies, curl and dos2unix
RUN apt-get update -q && \
    apt-get install -y -q --no-install-recommends --no-install-suggests \
        curl netcat-openbsd postgresql-client dos2unix && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Copy only needed files
COPY --from=builder /root/.local /root/.local
COPY . .

# Copy entrypoint script and make it executable
COPY entrypoint.sh /entrypoint.sh
RUN dos2unix /entrypoint.sh && chmod +x /entrypoint.sh

# Expose the port Django will run on
EXPOSE 8000

# Use the entrypoint script as the container's entrypoint
ENTRYPOINT ["/entrypoint.sh"]

# --------------------------------------------------
# 📝 Required Environment Variables (.env)
#
# This project uses a `.env` file located at the root of the repository
# to configure environment-specific settings.
#
# ✅ How it's loaded:
# - Docker Compose loads the `.env` file via the `env_file` directive
# - Django accesses variables using `python-decouple` (`config(...)`)
#
# 📌 Variables used in `base_settings.py`:
#   SECRET_KEY     - Django secret key
#   DEBUG          - "True" for development, "False" for production
#
# 📌 Variables used in `third_party_settings.py`:
#   DB_NAME        - PostgreSQL database name
#   DB_USER        - PostgreSQL username
#   DB_PASSWORD    - PostgreSQL password
#   DB_HOST        - PostgreSQL host (e.g., "db" when using Docker)
#   DB_PORT        - PostgreSQL port (default: 5432)
#
# 📄 Example: see `.env.example` for a template
# --------------------------------------------------

# Run server for production
CMD ["db", "gunicorn", "--log-level=debug", "core.wsgi:application", "--bind=0.0.0.0:8000", "--workers=3", "--timeout=120"]
</file>

<file path="entrypoint.sh">
#!/bin/sh
set -eu

# Checking for host as first argument
if [ -z "${1:-}" ]; then
  echo "Usage: $0 <host> [command...]"
  exit 1
fi

host="$1"
shift

port="${DB_PORT:-5432}"

# Max retries and sleep duration configurable via environment variables
max_retries="${MAX_RETRIES}"
sleep_duration="${SLEEP_DURATION}"
count=0

echo "Waiting for PostgreSQL to be ready at $host:$port..."

while ! pg_isready -h "$host" -p "$port" > /dev/null 2>&1; do
  count=$((count + 1))
  echo "Waiting for PostgreSQL at $host:$port... (attempt $count)"
  if [ "$max_retries" -gt 0 ] && [ "$count" -ge "$max_retries" ]; then
    echo "PostgreSQL is still not available after $max_retries attempts, exiting."
    exit 1
  fi
  sleep "$sleep_duration"
done

echo "PostgreSQL is ready - continuing..."

python manage.py migrate
python manage.py collectstatic --noinput

exec "$@"
</file>

<file path="manage.py">
#!/usr/bin/env python3
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    # Set default settings module if not already defined
    os.environ.setdefault(
        'DJANGO_SETTINGS_MODULE',
        os.getenv('DJANGO_SETTINGS_MODULE', 'core.settings')
    )

    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Make sure it's installed and "
            "available on your PYTHONPATH environment variable. Did you "
            "forget to activate a virtual environment?"
        ) from exc

    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()
</file>

<file path="openapi.yaml">
openapi: 3.0.3
info:
  title: Your API
  version: 1.0.0
  description: REST API for authentication and account management (and more).
  contact:
    name: Team
    email: support@example.com
  license:
    name: Proprietary
paths:
  /api/v1/auth/csrf/:
    get:
      operationId: auth_csrf_init
      description: |
        Initializes CSRF protection by setting a CSRF cookie.
        Frontend must call this endpoint before sending any POST/PUT/PATCH/DELETE requests.
      summary: Initialize CSRF protection
      tags:
        - Auth
      responses:
        '200':
          description: CSRF cookie set
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: CSRF cookie set
  /api/v1/auth/jwt/create/:
    post:
      operationId: auth_jwt_create_create
      description: |
        Custom view for obtaining JWT tokens.
        Uses CustomTokenObtainPairSerializer for token generation.
      summary: Obtain JWT access/refresh tokens
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
        required: true
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Access token returned; refresh token set in HttpOnly cookie
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    description: Access JWT token
        '401':
          description: Invalid credentials
  /api/v1/auth/jwt/refresh/:
    post:
      operationId: auth_jwt_refresh_create
      description: |
        Takes a refresh token from HttpOnly cookie and returns a new access token if valid.
      summary: Refresh JWT access token
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: New access token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    description: New access JWT token
        '401':
          description: Unauthorized / Invalid refresh token
  /api/v1/auth/jwt/logout/:
    post:
      operationId: auth_jwt_logout_create
      description: |
        Invalidates the refresh token and clears the authentication cookie.
        Requires `rest_framework_simplejwt.token_blacklist` app installed.
      summary: Logout (blacklist refresh token)
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenBlacklistRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenBlacklistRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenBlacklistRequest'
        required: true
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Successfully logged out
  /api/v1/auth/me/:
    get:
      operationId: auth_me
      description: Returns the profile information of the currently authenticated
        user. Requires a valid JWT access token. If the token is missing or invalid,
        returns 401 Unauthorized.
      summary: Retrieve the currently authenticated user
      tags:
      - Auth
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
          description: ''
        '401':
          description: Unauthorized - missing or invalid token
        '403':
          description: Forbidden - user account is inactive
        '404':
          description: Not Found - user no longer exists
  /api/v1/communications/notifications/:
    get:
      operationId: communications_notifications_list
      description: |-
        API endpoint that allows a user to list their notifications with filtering.
      parameters:
      - in: query
        name: is_read
        schema:
          type: boolean
      - in: query
        name: type
        schema:
          type: string
        description: Notification type code (slug)
      - in: query
        name: priority
        schema:
          type: string
          enum: [low, medium, high]
      - in: query
        name: created_after
        schema:
          type: string
          format: date-time
      - in: query
        name: created_before
        schema:
          type: string
          format: date-time
      tags:
      - communications
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNotificationList'
          description: ''
  /api/v1/communications/notifications/{notification_id}/:
    get:
      operationId: communications_notifications_retrieve
      description: Retrieve a single notification by its UUID.
      parameters:
      - in: path
        name: notification_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - communications
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    delete:
      operationId: communications_notifications_destroy
      description: Delete a notification.
      parameters:
      - in: path
        name: notification_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - communications
      security:
      - bearerAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/communications/notifications/unread_count/:
    get:
      operationId: communications_notifications_unread_count_retrieve
      description: Get the count of unread notifications for the current user.
      tags:
      - communications
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnreadCount'
          description: ''
  /api/v1/communications/notifications/mark_all_as_read/:
    post:
      operationId: communications_notifications_mark_all_as_read_create
      description: Mark all notifications as read for the current user.
      tags:
      - communications
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionStatus'
          description: ''
        '401':
          description: Unauthorized
  /api/v1/communications/notifications/mark_all_as_unread/:
    post:
      operationId: communications_notifications_mark_all_as_unread_create
      description: Mark all notifications as unread for the current user.
      tags:
      - communications
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionStatus'
          description: ''
        '401':
          description: Unauthorized
  /api/v1/communications/notifications/{notification_id}/mark_as_read/:
    post:
      operationId: communications_notifications_mark_as_read_create
      description: Mark a notification as read.
      parameters:
      - in: path
        name: notification_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - communications
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionStatus'
          description: ''
        '401':
          description: Unauthorized
  /api/v1/communications/notifications/{notification_id}/mark_as_unread/:
    post:
      operationId: communications_notifications_mark_as_unread_create
      description: Mark a notification as unread.
      parameters:
      - in: path
        name: notification_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - communications
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionStatus'
          description: ''
        '401':
          description: Unauthorized
  /api/v1/communications/notifications/{notification_id}/resolve/:
    get:
      operationId: communications_notifications_resolve_retrieve
      description: Return only the redirect payload for the notification.
      parameters:
      - in: path
        name: notification_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - communications
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResolveResponse'
          description: ''
  /api/v1/auth/oauth/login/:
    post:
      operationId: auth_oauth_login_create
      description: |-
        Handle authentication requests, routing to appropriate method based on input.

        Args:
            request: DRF request object containing authentication credentials
            *args: Additional positional arguments
            **kwargs: Additional keyword arguments

        Returns:
            Response: JSON containing either:
                - JWT tokens and user data (success)
                - Error message (failure)

        Status Codes:
            - 200 OK: Successful authentication
            - 400 Bad Request: Missing/invalid parameters
            - 401 Unauthorized: Invalid credentials
      summary: Login with OAuth provider to obtain JWT
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      security:
      - bearerAuth: []
      - {}
      responses:
        '200':
          description: No response body
        '400':
          description: Invalid request or provider token
        '403':
          description: Email not provided/verified by provider
  /api/v1/auth/password/reset/:
    post:
      operationId: auth_password_reset_create
      description: |-
        Process password reset request.

        Args:
            request (Request): HTTP request with 'email' in data.

        Returns:
            Response:
                - 200 OK with success detail if email sent.
                - 400 Bad Request if email is missing.
                - 404 Not Found if user with email doesn't exist.
      summary: Request password reset
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      security:
      - bearerAuth: []
      - {}
      responses:
        '200':
          description: Password reset email sent
        '400':
          description: Validation error
        '404':
          description: User not found
  /api/v1/auth/password/reset/confirm/:
    post:
      operationId: auth_password_reset_confirm_create
      description: |-
        Process password reset confirmation.

        Args:
            request (Request): HTTP request with 'uid', 'token', 'new_password' in data.

        Returns:
            Response:
                - 200 OK with success detail if password updated.
                - 400 Bad Request if any validation fails.
      summary: Confirm password reset
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
        required: true
      security:
      - bearerAuth: []
      - {}
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Invalid token, UID, or password
  /api/v1/auth/register/:
    post:
      operationId: auth_register_create
      description: Handle user registration request.
      summary: Register a new user
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUserCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomUserCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomUserCreateRequest'
        required: true
      security:
      - bearerAuth: []
      - {}
      responses:
        '201':
          description: User created and verification email sent
        '400':
          description: Validation errors
  /api/v1/auth/resend-email/:
    post:
      operationId: auth_resend_email_create
      description: |-
        Resend the email verification link to a user's email address.

        This view validates the input data, retrieves the user by `user_id`,
        updates the `pending_email` if a new one is provided, generates a new
        verification token if not supplied, constructs the verification URL,
        renders HTML and plain text email chat, sends the email, and returns
        a generic success response regardless of whether the user exists.

        The email is sent to `pending_email` if it exists; otherwise, the user's
        primary email is used. The response does not disclose whether the user
        exists for security reasons.

        Args:
            request (rest_framework.request.Request): DRF request object containing:
                - user_id (int): Required ID of the user.
                - email (str, optional): New pending email to update.
                - token (str, optional): Custom verification token to use.

        Returns:
            rest_framework.response.Response: HTTP 202 Accepted with a generic
            message indicating that if the account exists, a verification email
            has been sent.
      summary: Resend verification email
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendEmailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendEmailRequest'
        required: true
      security:
      - bearerAuth: []
      - {}
      responses:
        '202':
          description: If the account exists, a verification email has been sent
        '400':
          description: Missing or invalid data
  /api/v1/auth/verify-email/{user_id}/{token}/:
    get:
      operationId: auth_verify_email_retrieve
      description: Handle email verification link.
      summary: Verify email address
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - Auth
      security:
      - bearerAuth: []
      - {}
      responses:
        '200':
          description: Email verified
        '400':
          description: Invalid or expired verification link
  /api/v1/communications/notification-types/:
    get:
      operationId: communications_notification_types_list
      description: |-
        API endpoint that allows notification types to be viewed.
        Requires authentication.
      tags:
      - communications
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationType'
          description: ''
  /api/v1/communications/notification-types/{id}/:
    get:
      operationId: communications_notification_types_retrieve
      description: |-
        API endpoint that allows notification types to be viewed.
        Requires authentication.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Notification Type.
        required: true
      tags:
      - communications
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationType'
          description: ''
  /api/v1/communications/preferences/:
    get:
      operationId: communications_preferences_list
      description: API endpoint that allows users to view and update their notification
        preferences.
      tags:
      - communications
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserNotificationPreference'
          description: ''
  /api/v1/communications/preferences/{id}/:
    get:
      operationId: communications_preferences_retrieve
      description: API endpoint that allows users to view and update their notification
        preferences.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - communications
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationPreference'
          description: ''
    patch:
      operationId: communications_preferences_partial_update
      description: API endpoint that allows users to view and update their notification
        preferences.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - communications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserNotificationPreferenceRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserNotificationPreferenceRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserNotificationPreferenceRequest'
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationPreference'
          description: ''
  /api/v1/communications/preferences/{id}/update_type_preference/:
    patch:
      operationId: communications_preferences_update_type_preference_partial_update
      description: |-
        Update a specific notification type preference.
        Expected payload: {"notification_type_id": 1, "frequency": "immediate"}
        Errors: 400 (validation), 404 (preference not found)
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - communications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserNotificationPreferenceRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserNotificationPreferenceRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserNotificationPreferenceRequest'
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationPreference'
          description: ''
  /api/v1/communications/preferences/options/:
    get:
      operationId: communications_preferences_options_retrieve
      description: |-
        Return business-level options for notification preferences (not HTTP OPTIONS).

        Currently returns available frequency choices.
      tags:
      - communications
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationPreference'
          description: ''
  /api/v1/investments/api/v1/investments/subscriptions/create/:
    post:
      operationId: investments_api_v1_investments_subscriptions_create_create
      description: |-
        API endpoint for creating a new investment subscription.

        - Requires authentication and investor role.
        - Validates funding constraints and prevents invalid investments.
        - Returns project funding status along with subscription details.
      tags:
      - investments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubscriptionCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubscriptionCreateRequest'
        required: true
      security:
      - bearerAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionCreate'
          description: ''
  /api/v1/investors/:
    get:
      operationId: investors_list
      description: |-
        ViewSet for managing Investor instances.
        Optimized with select_related to avoid N+1 queries when fetching related user, industry, and location.
      tags:
      - investors
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Investor'
          description: ''
    post:
      operationId: investors_create
      description: |-
        ViewSet for managing Investor instances.
        Optimized with select_related to avoid N+1 queries when fetching related user, industry, and location.
      tags:
      - investors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvestorRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InvestorRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InvestorRequest'
        required: true
      security:
      - bearerAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Investor'
          description: ''
  /api/v1/investors/{id}/:
    get:
      operationId: investors_retrieve
      description: |-
        ViewSet for managing Investor instances.
        Optimized with select_related to avoid N+1 queries when fetching related user, industry, and location.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Investor.
        required: true
      tags:
      - investors
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Investor'
          description: ''
    put:
      operationId: investors_update
      description: |-
        ViewSet for managing Investor instances.
        Optimized with select_related to avoid N+1 queries when fetching related user, industry, and location.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Investor.
        required: true
      tags:
      - investors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvestorRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InvestorRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InvestorRequest'
        required: true
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Investor'
          description: ''
    patch:
      operationId: investors_partial_update
      description: |-
        ViewSet for managing Investor instances.
        Optimized with select_related to avoid N+1 queries when fetching related user, industry, and location.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Investor.
        required: true
      tags:
      - investors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedInvestorRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedInvestorRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedInvestorRequest'
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Investor'
          description: ''
    delete:
      operationId: investors_destroy
      description: |-
        ViewSet for managing Investor instances.
        Optimized with select_related to avoid N+1 queries when fetching related user, industry, and location.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Investor.
        required: true
      tags:
      - investors
      security:
      - bearerAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/investors/saved/:
    get:
      operationId: investors_saved_list
      description: |-
        ViewSet for managing SavedStartup instances.
        Only authenticated investors who own the SavedStartup can modify/delete it.
      tags:
      - investors
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SavedStartup'
          description: ''
    post:
      operationId: investors_saved_create
      description: |-
        ViewSet for managing SavedStartup instances.
        Only authenticated investors who own the SavedStartup can modify/delete it.
      tags:
      - investors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavedStartupRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SavedStartupRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SavedStartupRequest'
        required: true
      security:
      - bearerAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedStartup'
          description: ''
  /api/v1/investors/saved/{id}/:
    get:
      operationId: investors_saved_retrieve
      description: |-
        ViewSet for managing SavedStartup instances.
        Only authenticated investors who own the SavedStartup can modify/delete it.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - investors
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedStartup'
          description: ''
    put:
      operationId: investors_saved_update
      description: |-
        ViewSet for managing SavedStartup instances.
        Only authenticated investors who own the SavedStartup can modify/delete it.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - investors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavedStartupRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SavedStartupRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SavedStartupRequest'
        required: true
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedStartup'
          description: ''
    patch:
      operationId: investors_saved_partial_update
      description: |-
        ViewSet for managing SavedStartup instances.
        Only authenticated investors who own the SavedStartup can modify/delete it.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - investors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSavedStartupRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSavedStartupRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSavedStartupRequest'
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedStartup'
          description: ''
    delete:
      operationId: investors_saved_destroy
      description: |-
        ViewSet for managing SavedStartup instances.
        Only authenticated investors who own the SavedStartup can modify/delete it.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - investors
      security:
      - bearerAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/projects/:
    get:
      operationId: projects_projects_list
      description: |-
        API endpoint for viewing and editing projects.

        This ViewSet supports both read and write operations for projects.
        It optimizes database access by using `select_related` for related fields
        (`startup` and `category`) to avoid N+1 query issues.

        Features:
            - Read operations: list and retrieve project details.
            - Write operations: create, update, partially update, and delete projects.
            - Filtering: by `status`, `category`, and `startup`.
            - Searching: by `title`, `description`, and `email`.
            - Ordering: by `created_at`, `funding_goal`, and `current_funding`.
            - Default ordering: newest projects first (`-created_at`).

        Permissions:
            - Authenticated users can view all projects.
            - Only the owner can modify or delete their projects.
      parameters:
      - in: query
        name: category
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: startup
        schema:
          type: integer
      - in: query
        name: status
        schema:
          type: string
          x-spec-enum-id: 73e900b46f9b46ee
          enum:
          - cancelled
          - completed
          - draft
          - in_progress
        description: |-
          * `draft` - Draft
          * `in_progress` - In Progress
          * `completed` - Completed
          * `cancelled` - Cancelled
      tags:
      - projects
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectRead'
          description: ''
    post:
      operationId: projects_projects_create
      description: |-
        API endpoint for viewing and editing projects.

        This ViewSet supports both read and write operations for projects.
        It optimizes database access by using `select_related` for related fields
        (`startup` and `category`) to avoid N+1 query issues.

        Features:
            - Read operations: list and retrieve project details.
            - Write operations: create, update, partially update, and delete projects.
            - Filtering: by `status`, `category`, and `startup`.
            - Searching: by `title`, `description`, and `email`.
            - Ordering: by `created_at`, `funding_goal`, and `current_funding`.
            - Default ordering: newest projects first (`-created_at`).

        Permissions:
            - Authenticated users can view all projects.
            - Only the owner can modify or delete their projects.
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectWriteRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectWriteRequest'
        required: true
      security:
      - bearerAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectWrite'
          description: ''
  /api/v1/projects/projects-documents/:
    get:
      operationId: projects_projects_documents_list
      description: |-
        Overrides the list action.
        Relies on filter_queryset to validate query params and filter the queryset.
        Handles Elasticsearch connection errors gracefully with HTTP 503 response.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - projects
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectDocumentList'
          description: ''
  /api/v1/projects/projects-documents/{id}/:
    get:
      operationId: projects_projects_documents_retrieve
      description: |-
        Elasticsearch-backed viewset for Project documents.
        Supports filtering, ordering, and full-text search with robust error handling.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Project.
        required: true
      tags:
      - projects
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDocument'
          description: ''
  /api/v1/projects/projects-documents/functional_suggest/:
    get:
      operationId: projects_projects_documents_functional_suggest_retrieve
      description: |-
        Functional suggest functionality.

        :param request:
        :return:
      tags:
      - projects
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDocument'
          description: ''
  /api/v1/projects/projects-documents/suggest/:
    get:
      operationId: projects_projects_documents_suggest_retrieve
      description: Suggest functionality.
      tags:
      - projects
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDocument'
          description: ''
  /api/v1/projects/projects/{id}/:
    get:
      operationId: projects_projects_retrieve
      description: |-
        API endpoint for viewing and editing projects.

        This ViewSet supports both read and write operations for projects.
        It optimizes database access by using `select_related` for related fields
        (`startup` and `category`) to avoid N+1 query issues.

        Features:
            - Read operations: list and retrieve project details.
            - Write operations: create, update, partially update, and delete projects.
            - Filtering: by `status`, `category`, and `startup`.
            - Searching: by `title`, `description`, and `email`.
            - Ordering: by `created_at`, `funding_goal`, and `current_funding`.
            - Default ordering: newest projects first (`-created_at`).

        Permissions:
            - Authenticated users can view all projects.
            - Only the owner can modify or delete their projects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Project.
        required: true
      tags:
      - projects
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRead'
          description: ''
    put:
      operationId: projects_projects_update
      description: |-
        API endpoint for viewing and editing projects.

        This ViewSet supports both read and write operations for projects.
        It optimizes database access by using `select_related` for related fields
        (`startup` and `category`) to avoid N+1 query issues.

        Features:
            - Read operations: list and retrieve project details.
            - Write operations: create, update, partially update, and delete projects.
            - Filtering: by `status`, `category`, and `startup`.
            - Searching: by `title`, `description`, and `email`.
            - Ordering: by `created_at`, `funding_goal`, and `current_funding`.
            - Default ordering: newest projects first (`-created_at`).

        Permissions:
            - Authenticated users can view all projects.
            - Only the owner can modify or delete their projects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Project.
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectWriteRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectWriteRequest'
        required: true
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectWrite'
          description: ''
    patch:
      operationId: projects_projects_partial_update
      description: Handle PATCH requests for partially updating a project.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Project.
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProjectWriteRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProjectWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProjectWriteRequest'
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectWrite'
          description: ''
    delete:
      operationId: projects_projects_destroy
      description: |-
        API endpoint for viewing and editing projects.

        This ViewSet supports both read and write operations for projects.
        It optimizes database access by using `select_related` for related fields
        (`startup` and `category`) to avoid N+1 query issues.

        Features:
            - Read operations: list and retrieve project details.
            - Write operations: create, update, partially update, and delete projects.
            - Filtering: by `status`, `category`, and `startup`.
            - Searching: by `title`, `description`, and `email`.
            - Ordering: by `created_at`, `funding_goal`, and `current_funding`.
            - Default ordering: newest projects first (`-created_at`).

        Permissions:
            - Authenticated users can view all projects.
            - Only the owner can modify or delete their projects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Project.
        required: true
      tags:
      - projects
      security:
      - bearerAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/search/:
    get:
      operationId: projects_search_list
      description: |-
        Overrides the list action.
        Relies on filter_queryset to validate query params and filter the queryset.
        Handles Elasticsearch connection errors gracefully with HTTP 503 response.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - projects
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectDocumentList'
          description: ''
  /api/v1/startups/:
    get:
      operationId: startups_list
      description: |-
        Base ViewSet that runs model full_clean() validation
        and logs creation and update events.
      parameters:
      - in: query
        name: industry
        schema:
          type: integer
      - in: query
        name: location__country
        schema:
          type: string
          x-spec-enum-id: 1a77d4ecc4ebd8ed
          enum:
          - AD
          - AE
          - AF
          - AG
          - AI
          - AL
          - AM
          - AO
          - AQ
          - AR
          - AS
          - AT
          - AU
          - AW
          - AX
          - AZ
          - BA
          - BB
          - BD
          - BE
          - BF
          - BG
          - BH
          - BI
          - BJ
          - BL
          - BM
          - BN
          - BO
          - BQ
          - BR
          - BS
          - BT
          - BV
          - BW
          - BY
          - BZ
          - CA
          - CC
          - CD
          - CF
          - CG
          - CH
          - CI
          - CK
          - CL
          - CM
          - CN
          - CO
          - CR
          - CU
          - CV
          - CW
          - CX
          - CY
          - CZ
          - DE
          - DJ
          - DK
          - DM
          - DO
          - DZ
          - EC
          - EE
          - EG
          - EH
          - ER
          - ES
          - ET
          - FI
          - FJ
          - FK
          - FM
          - FO
          - FR
          - GA
          - GB
          - GD
          - GE
          - GF
          - GG
          - GH
          - GI
          - GL
          - GM
          - GN
          - GP
          - GQ
          - GR
          - GS
          - GT
          - GU
          - GW
          - GY
          - HK
          - HM
          - HN
          - HR
          - HT
          - HU
          - ID
          - IE
          - IL
          - IM
          - IN
          - IO
          - IQ
          - IR
          - IS
          - IT
          - JE
          - JM
          - JO
          - JP
          - KE
          - KG
          - KH
          - KI
          - KM
          - KN
          - KP
          - KR
          - KW
          - KY
          - KZ
          - LA
          - LB
          - LC
          - LI
          - LK
          - LR
          - LS
          - LT
          - LU
          - LV
          - LY
          - MA
          - MC
          - MD
          - ME
          - MF
          - MG
          - MH
          - MK
          - ML
          - MM
          - MN
          - MO
          - MP
          - MQ
          - MR
          - MS
          - MT
          - MU
          - MV
          - MW
          - MX
          - MY
          - MZ
          - NA
          - NC
          - NE
          - NF
          - NG
          - NI
          - NL
          - 'NO'
          - NP
          - NR
          - NU
          - NZ
          - OM
          - PA
          - PE
          - PF
          - PG
          - PH
          - PK
          - PL
          - PM
          - PN
          - PR
          - PS
          - PT
          - PW
          - PY
          - QA
          - RE
          - RO
          - RS
          - RU
          - RW
          - SA
          - SB
          - SC
          - SD
          - SE
          - SG
          - SH
          - SI
          - SJ
          - SK
          - SL
          - SM
          - SN
          - SO
          - SR
          - SS
          - ST
          - SV
          - SX
          - SY
          - SZ
          - TC
          - TD
          - TF
          - TG
          - TH
          - TJ
          - TK
          - TL
          - TM
          - TN
          - TO
          - TR
          - TT
          - TV
          - TW
          - TZ
          - UA
          - UG
          - UM
          - US
          - UY
          - UZ
          - VA
          - VC
          - VE
          - VG
          - VI
          - VN
          - VU
          - WF
          - WS
          - YE
          - YT
          - ZA
          - ZM
          - ZW
        description: |-
          Country of the location

          * `AF` - Afghanistan
          * `AX` - Åland Islands
          * `AL` - Albania
          * `DZ` - Algeria
          * `AS` - American Samoa
          * `AD` - Andorra
          * `AO` - Angola
          * `AI` - Anguilla
          * `AQ` - Antarctica
          * `AG` - Antigua and Barbuda
          * `AR` - Argentina
          * `AM` - Armenia
          * `AW` - Aruba
          * `AU` - Australia
          * `AT` - Austria
          * `AZ` - Azerbaijan
          * `BS` - Bahamas
          * `BH` - Bahrain
          * `BD` - Bangladesh
          * `BB` - Barbados
          * `BY` - Belarus
          * `BE` - Belgium
          * `BZ` - Belize
          * `BJ` - Benin
          * `BM` - Bermuda
          * `BT` - Bhutan
          * `BO` - Bolivia
          * `BQ` - Bonaire, Sint Eustatius and Saba
          * `BA` - Bosnia and Herzegovina
          * `BW` - Botswana
          * `BV` - Bouvet Island
          * `BR` - Brazil
          * `IO` - British Indian Ocean Territory
          * `BN` - Brunei
          * `BG` - Bulgaria
          * `BF` - Burkina Faso
          * `BI` - Burundi
          * `CV` - Cabo Verde
          * `KH` - Cambodia
          * `CM` - Cameroon
          * `CA` - Canada
          * `KY` - Cayman Islands
          * `CF` - Central African Republic
          * `TD` - Chad
          * `CL` - Chile
          * `CN` - China
          * `CX` - Christmas Island
          * `CC` - Cocos (Keeling) Islands
          * `CO` - Colombia
          * `KM` - Comoros
          * `CG` - Congo
          * `CD` - Congo (the Democratic Republic of the)
          * `CK` - Cook Islands
          * `CR` - Costa Rica
          * `CI` - Côte d'Ivoire
          * `HR` - Croatia
          * `CU` - Cuba
          * `CW` - Curaçao
          * `CY` - Cyprus
          * `CZ` - Czechia
          * `DK` - Denmark
          * `DJ` - Djibouti
          * `DM` - Dominica
          * `DO` - Dominican Republic
          * `EC` - Ecuador
          * `EG` - Egypt
          * `SV` - El Salvador
          * `GQ` - Equatorial Guinea
          * `ER` - Eritrea
          * `EE` - Estonia
          * `SZ` - Eswatini
          * `ET` - Ethiopia
          * `FK` - Falkland Islands (Malvinas)
          * `FO` - Faroe Islands
          * `FJ` - Fiji
          * `FI` - Finland
          * `FR` - France
          * `GF` - French Guiana
          * `PF` - French Polynesia
          * `TF` - French Southern Territories
          * `GA` - Gabon
          * `GM` - Gambia
          * `GE` - Georgia
          * `DE` - Germany
          * `GH` - Ghana
          * `GI` - Gibraltar
          * `GR` - Greece
          * `GL` - Greenland
          * `GD` - Grenada
          * `GP` - Guadeloupe
          * `GU` - Guam
          * `GT` - Guatemala
          * `GG` - Guernsey
          * `GN` - Guinea
          * `GW` - Guinea-Bissau
          * `GY` - Guyana
          * `HT` - Haiti
          * `HM` - Heard Island and McDonald Islands
          * `VA` - Holy See
          * `HN` - Honduras
          * `HK` - Hong Kong
          * `HU` - Hungary
          * `IS` - Iceland
          * `IN` - India
          * `ID` - Indonesia
          * `IR` - Iran
          * `IQ` - Iraq
          * `IE` - Ireland
          * `IM` - Isle of Man
          * `IL` - Israel
          * `IT` - Italy
          * `JM` - Jamaica
          * `JP` - Japan
          * `JE` - Jersey
          * `JO` - Jordan
          * `KZ` - Kazakhstan
          * `KE` - Kenya
          * `KI` - Kiribati
          * `KW` - Kuwait
          * `KG` - Kyrgyzstan
          * `LA` - Laos
          * `LV` - Latvia
          * `LB` - Lebanon
          * `LS` - Lesotho
          * `LR` - Liberia
          * `LY` - Libya
          * `LI` - Liechtenstein
          * `LT` - Lithuania
          * `LU` - Luxembourg
          * `MO` - Macao
          * `MG` - Madagascar
          * `MW` - Malawi
          * `MY` - Malaysia
          * `MV` - Maldives
          * `ML` - Mali
          * `MT` - Malta
          * `MH` - Marshall Islands
          * `MQ` - Martinique
          * `MR` - Mauritania
          * `MU` - Mauritius
          * `YT` - Mayotte
          * `MX` - Mexico
          * `FM` - Micronesia (Federated States of)
          * `MD` - Moldova
          * `MC` - Monaco
          * `MN` - Mongolia
          * `ME` - Montenegro
          * `MS` - Montserrat
          * `MA` - Morocco
          * `MZ` - Mozambique
          * `MM` - Myanmar
          * `NA` - Namibia
          * `NR` - Nauru
          * `NP` - Nepal
          * `NL` - Netherlands
          * `NC` - New Caledonia
          * `NZ` - New Zealand
          * `NI` - Nicaragua
          * `NE` - Niger
          * `NG` - Nigeria
          * `NU` - Niue
          * `NF` - Norfolk Island
          * `KP` - North Korea
          * `MK` - North Macedonia
          * `MP` - Northern Mariana Islands
          * `NO` - Norway
          * `OM` - Oman
          * `PK` - Pakistan
          * `PW` - Palau
          * `PS` - Palestine, State of
          * `PA` - Panama
          * `PG` - Papua New Guinea
          * `PY` - Paraguay
          * `PE` - Peru
          * `PH` - Philippines
          * `PN` - Pitcairn
          * `PL` - Poland
          * `PT` - Portugal
          * `PR` - Puerto Rico
          * `QA` - Qatar
          * `RE` - Réunion
          * `RO` - Romania
          * `RU` - Russia
          * `RW` - Rwanda
          * `BL` - Saint Barthélemy
          * `SH` - Saint Helena, Ascension and Tristan da Cunha
          * `KN` - Saint Kitts and Nevis
          * `LC` - Saint Lucia
          * `MF` - Saint Martin (French part)
          * `PM` - Saint Pierre and Miquelon
          * `VC` - Saint Vincent and the Grenadines
          * `WS` - Samoa
          * `SM` - San Marino
          * `ST` - Sao Tome and Principe
          * `SA` - Saudi Arabia
          * `SN` - Senegal
          * `RS` - Serbia
          * `SC` - Seychelles
          * `SL` - Sierra Leone
          * `SG` - Singapore
          * `SX` - Sint Maarten (Dutch part)
          * `SK` - Slovakia
          * `SI` - Slovenia
          * `SB` - Solomon Islands
          * `SO` - Somalia
          * `ZA` - South Africa
          * `GS` - South Georgia and the South Sandwich Islands
          * `KR` - South Korea
          * `SS` - South Sudan
          * `ES` - Spain
          * `LK` - Sri Lanka
          * `SD` - Sudan
          * `SR` - Suriname
          * `SJ` - Svalbard and Jan Mayen
          * `SE` - Sweden
          * `CH` - Switzerland
          * `SY` - Syria
          * `TW` - Taiwan
          * `TJ` - Tajikistan
          * `TZ` - Tanzania
          * `TH` - Thailand
          * `TL` - Timor-Leste
          * `TG` - Togo
          * `TK` - Tokelau
          * `TO` - Tonga
          * `TT` - Trinidad and Tobago
          * `TN` - Tunisia
          * `TR` - Türkiye
          * `TM` - Turkmenistan
          * `TC` - Turks and Caicos Islands
          * `TV` - Tuvalu
          * `UG` - Uganda
          * `UA` - Ukraine
          * `AE` - United Arab Emirates
          * `GB` - United Kingdom
          * `UM` - United States Minor Outlying Islands
          * `US` - United States of America
          * `UY` - Uruguay
          * `UZ` - Uzbekistan
          * `VU` - Vanuatu
          * `VE` - Venezuela
          * `VN` - Vietnam
          * `VG` - Virgin Islands (British)
          * `VI` - Virgin Islands (U.S.)
          * `WF` - Wallis and Futuna
          * `EH` - Western Sahara
          * `YE` - Yemen
          * `ZM` - Zambia
          * `ZW` - Zimbabwe
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: stage
        schema:
          type: string
          x-spec-enum-id: 0a73ba3d72a52b97
          title: Development Stage
          enum:
          - exit
          - idea
          - launch
          - mvp
          - scale
        description: |-
          Current development stage of the startup

          * `idea` - Idea
          * `mvp` - MVP
          * `launch` - Launch
          * `scale` - Scale
          * `exit` - Exit
      tags:
      - startups
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Startup'
          description: ''
    post:
      operationId: startups_create
      description: |-
        Base ViewSet that runs model full_clean() validation
        and logs creation and update events.
      tags:
      - startups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartupRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StartupRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StartupRequest'
        required: true
      security:
      - bearerAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Startup'
          description: ''
  /api/v1/startups/{id}/:
    get:
      operationId: startups_retrieve
      description: |-
        Base ViewSet that runs model full_clean() validation
        and logs creation and update events.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Startup.
        required: true
      tags:
      - startups
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Startup'
          description: ''
    put:
      operationId: startups_update
      description: |-
        Base ViewSet that runs model full_clean() validation
        and logs creation and update events.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Startup.
        required: true
      tags:
      - startups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartupRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StartupRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StartupRequest'
        required: true
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Startup'
          description: ''
    patch:
      operationId: startups_partial_update
      description: |-
        Base ViewSet that runs model full_clean() validation
        and logs creation and update events.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Startup.
        required: true
      tags:
      - startups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedStartupRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedStartupRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedStartupRequest'
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Startup'
          description: ''
    delete:
      operationId: startups_destroy
      description: |-
        Base ViewSet that runs model full_clean() validation
        and logs creation and update events.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Startup.
        required: true
      tags:
      - startups
      security:
      - bearerAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/startups/search/:
    get:
      operationId: startups_search_list
      description: DocumentViewSet with suggest and functional-suggest mix-ins.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - startups
      security:
      - bearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStartupDocumentList'
          description: ''
  /api/v1/startups/search/{id}/:
    get:
      operationId: startups_search_retrieve
      description: DocumentViewSet with suggest and functional-suggest mix-ins.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Startup.
        required: true
      tags:
      - startups
      security:
      - bearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartupDocument'
          description: ''
  /api/v1/startups/search/functional_suggest/:
    get:
      operationId: startups_search_functional_suggest_retrieve
      description: |-
        Functional suggest functionality.

        :param request:
        :return:
      tags:
      - startups
      security:
      - bearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartupDocument'
          description: ''
  /api/v1/startups/search/suggest/:
    get:
      operationId: startups_search_suggest_retrieve
      description: Suggest functionality.
      tags:
      - startups
      security:
      - bearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartupDocument'
          description: ''
components:
  schemas:
    Category:
      type: object
      description: Read-only serializer for category details.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
      required:
      - id
      - name
    CategoryRequest:
      type: object
      description: Read-only serializer for category details.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
      required:
      - name
    CurrentUser:
      type: object
      description: Public serializer for the currently logged-in user.
      properties:
        user_id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
        first_name:
          type: string
          readOnly: true
        last_name:
          type: string
          readOnly: true
        user_phone:
          type: string
          readOnly: true
          nullable: true
        title:
          type: string
          readOnly: true
          nullable: true
        role:
          type: string
          readOnly: true
      required:
      - email
      - first_name
      - last_name
      - role
      - title
      - user_id
      - user_phone
    CustomTokenObtainPairRequest:
      type: object
      description: |-
        Custom serializer for obtaining JWT tokens.
        Adds custom claims to the token and includes additional user data in the response.
        Also prevents token issuance for inactive users.
      properties:
        email:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password
    CustomUserCreateRequest:
      type: object
      description: Custom user registration serializer that handles user creation
        with role assignment.
      properties:
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 50
        first_name:
          type: string
          minLength: 1
          maxLength: 50
        last_name:
          type: string
          minLength: 1
          maxLength: 50
        password:
          type: string
          writeOnly: true
          minLength: 1
          pattern: ^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$
        password2:
          type: string
          writeOnly: true
          minLength: 1
          title: Confirm Password
      required:
      - email
      - first_name
      - last_name
      - password
      - password2
    Investor:
      type: object
      description: |-
        Serializer for the Investor model.
        Includes all fields defined in the abstract Company base class and Investor-specific fields.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
          description: The user who owns this investor
        industry:
          type: integer
        company_name:
          type: string
          maxLength: 254
        location:
          type: integer
        logo:
          type: string
          format: uri
          nullable: true
        description:
          type: string
        website:
          type: string
          format: uri
          maxLength: 200
        email:
          type: string
          format: email
          maxLength: 254
        founded_year:
          type: integer
          minimum: 1900
          maximum: 2025
        team_size:
          type: integer
          minimum: 1
        stage:
          enum:
          - idea
          - mvp
          - launch
          - scale
          - exit
          type: string
          description: |-
            * `idea` - Idea
            * `mvp` - MVP
            * `launch` - Launch
            * `scale` - Scale
            * `exit` - Exit
          x-spec-enum-id: 0a73ba3d72a52b97
          default: mvp
        fund_size:
          type: string
          format: decimal
          pattern: ^-?\d{0,18}(?:\.\d{0,2})?$
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - company_name
      - created_at
      - email
      - founded_year
      - fund_size
      - id
      - industry
      - location
      - team_size
      - updated_at
      - user
    InvestorRequest:
      type: object
      description: |-
        Serializer for the Investor model.
        Includes all fields defined in the abstract Company base class and Investor-specific fields.
      properties:
        industry:
          type: integer
        company_name:
          type: string
          minLength: 1
          maxLength: 254
        location:
          type: integer
        logo:
          type: string
          format: binary
          nullable: true
        description:
          type: string
        website:
          type: string
          format: uri
          maxLength: 200
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        founded_year:
          type: integer
          minimum: 1900
          maximum: 2025
        team_size:
          type: integer
          minimum: 1
        stage:
          enum:
          - idea
          - mvp
          - launch
          - scale
          - exit
          type: string
          description: |-
            * `idea` - Idea
            * `mvp` - MVP
            * `launch` - Launch
            * `scale` - Scale
            * `exit` - Exit
          x-spec-enum-id: 0a73ba3d72a52b97
          default: mvp
        fund_size:
          type: string
          format: decimal
          pattern: ^-?\d{0,18}(?:\.\d{0,2})?$
      required:
      - company_name
      - email
      - founded_year
      - fund_size
      - industry
      - location
      - team_size
    NotificationType:
      type: object
      description: Serializer for notification types.
      properties:
        id:
          type: integer
          readOnly: true
        code:
          type: string
          readOnly: true
          description: Unique code for the notification type
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          description: Human-readable name
          maxLength: 100
        description:
          type: string
          description: Description of when this notification is sent
        is_active:
          type: boolean
          description: Whether this notification type is active
      required:
      - code
      - id
      - name
    NotificationTypeRequest:
      type: object
      description: Serializer for notification types.
      properties:
        name:
          type: string
          minLength: 1
          description: Human-readable name
          maxLength: 100
        description:
          type: string
          description: Description of when this notification is sent
        is_active:
          type: boolean
          description: Whether this notification type is active
      required:
      - name
    Notification:
      type: object
      description: Serializer for user notifications.
      properties:
        notification_id:
          type: string
          format: uuid
          readOnly: true
        notification_type:
          $ref: '#/components/schemas/NotificationType'
        title:
          type: string
        message:
          type: string
        is_read:
          type: boolean
        priority:
          type: string
          enum: [low, medium, high]
        priority_display:
          type: string
          description: Human-readable display value of priority
        actor:
          type: object
          nullable: true
          additionalProperties: true
        redirect:
          type: object
          nullable: true
          additionalProperties: true
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
        expires_at:
          type: string
          format: date-time
          nullable: true
      required:
      - notification_id
      - notification_type
      - title
      - message
      - is_read
      - priority
      - created_at
      - updated_at
    ActionStatus:
      type: object
      properties:
        status:
          type: string
      required:
      - status
    UnreadCount:
      type: object
      properties:
        unread_count:
          type: integer
      required:
      - unread_count
    ResolveResponse:
      type: object
      properties:
        redirect:
          type: object
          nullable: true
          additionalProperties: true
      required:
      - redirect
    PaginatedNotificationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 1
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/communications/notifications/?page=2
        previous:
          type: string
          nullable: true
          format: uri
          example: null
        results:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
    PaginatedProjectDocumentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProjectDocument'
    PaginatedStartupDocumentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/StartupDocument'
    PasswordResetConfirmRequest:
      type: object
      description: |-
        Serializer for confirming and completing the password reset.

        Attributes:
            uid (str): Base64 encoded user ID.
            token (str): Password reset token.
            new_password (str): New password to set. Must meet validation requirements.
      properties:
        uid:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
        new_password:
          type: string
          writeOnly: true
          minLength: 8
      required:
      - new_password
      - token
      - uid
    PasswordResetRequest:
      type: object
      description: |-
        Serializer for requesting a password reset email.

        Attributes:
            email (str): User's registered email address.
                         Required field. Validates that the user exists.
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    PatchedInvestorRequest:
      type: object
      description: |-
        Serializer for the Investor model.
        Includes all fields defined in the abstract Company base class and Investor-specific fields.
      properties:
        industry:
          type: integer
        company_name:
          type: string
          minLength: 1
          maxLength: 254
        location:
          type: integer
        logo:
          type: string
          format: binary
          nullable: true
        description:
          type: string
        website:
          type: string
          format: uri
          maxLength: 200
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        founded_year:
          type: integer
          minimum: 1900
          maximum: 2025
        team_size:
          type: integer
          minimum: 1
        stage:
          enum:
          - idea
          - mvp
          - launch
          - scale
          - exit
          type: string
          description: |-
            * `idea` - Idea
            * `mvp` - MVP
            * `launch` - Launch
            * `scale` - Scale
            * `exit` - Exit
          x-spec-enum-id: 0a73ba3d72a52b97
          default: mvp
        fund_size:
          type: string
          format: decimal
          pattern: ^-?\d{0,18}(?:\.\d{0,2})?$
    PatchedProjectWriteRequest:
      type: object
      description: |-
        Serializer for creating/updating Project with validation.
        Ensures required fields match the model and cross-field rules are enforced.
      properties:
        startup_id:
          type: integer
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        business_plan:
          type: string
          format: binary
          nullable: true
        media_files:
          type: string
          format: binary
          nullable: true
        status:
          enum:
          - draft
          - in_progress
          - completed
          - cancelled
          type: string
          description: |-
            * `draft` - Draft
            * `in_progress` - In Progress
            * `completed` - Completed
            * `cancelled` - Cancelled
          x-spec-enum-id: 73e900b46f9b46ee
        duration:
          type: integer
          maximum: 3650
          minimum: 1
          description: Duration in days
        funding_goal:
          type: string
          format: decimal
          pattern: ^-?\d{0,18}(?:\.\d{0,2})?$
        current_funding:
          type: string
          format: decimal
          pattern: ^-?\d{0,18}(?:\.\d{0,2})?$
          default: '0.00'
        category_id:
          type: integer
        website:
          type: string
          format: uri
          maxLength: 200
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 255
        has_patents:
          type: boolean
        is_participant:
          type: boolean
        is_active:
          type: boolean
    PatchedSavedStartupRequest:
      type: object
      description: |-
        Serializer for creating and retrieving SavedStartup records.

        Ensures:
        - Only authenticated investors can save startups.
        - Prevents saving own startup.
        - Avoids duplicates via validator and IntegrityError handling.
      properties:
        startup:
          type: integer
          writeOnly: true
        status:
          enum:
          - watching
          - contacted
          - negotiating
          - passed
          type: string
          description: |-
            * `watching` - Watching
            * `contacted` - Contacted
            * `negotiating` - Negotiating
            * `passed` - Passed
          x-spec-enum-id: 34827c2d6e495653
        notes:
          type: string
          nullable: true
    PatchedStartupRequest:
      type: object
      description: Full serializer with nested project details.
      properties:
        company_name:
          type: string
          minLength: 1
          maxLength: 254
        description:
          type: string
        industry:
          type: integer
        location:
          type: integer
        website:
          type: string
          format: uri
          maxLength: 200
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        founded_year:
          type: integer
          maximum: 2025
          minimum: 1900
        team_size:
          type: integer
          maximum: 2147483647
          minimum: 1
        stage:
          enum:
          - idea
          - mvp
          - launch
          - scale
          - exit
          type: string
          x-spec-enum-id: 0a73ba3d72a52b97
          title: Development Stage
          description: |-
            Current development stage of the startup

            * `idea` - Idea
            * `mvp` - MVP
            * `launch` - Launch
            * `scale` - Scale
            * `exit` - Exit
        social_links:
          type: object
          additionalProperties: {}
        user:
          type: integer
          description: User who owns this startup
    PatchedUserNotificationPreferenceRequest:
      type: object
      description: |-
        Serializer for the UserNotificationPreference model.
        Handles both creation and updates of notification preferences.
        The user is automatically set from the request context on creation.
      properties:
        enable_in_app:
          type: boolean
          title: Enable in-app notifications
        enable_email:
          type: boolean
          title: Enable email notifications
        enable_push:
          type: boolean
          title: Enable push notifications
    ProjectDocument:
      type: object
      description: Serializer for the Elasticsearch ProjectDocument.
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        status:
          type: string
        startup:
          type: string
        category:
          type: string
      required:
      - category
      - description
      - id
      - startup
      - status
      - title
    ProjectRead:
      type: object
      description: |-
        Serializer for reading Project with nested related objects,
        including custom fields for startup details.
      properties:
        id:
          type: integer
          readOnly: true
        startup:
          allOf:
          - $ref: '#/components/schemas/StartupProject'
          readOnly: true
        startup_name:
          type: string
          readOnly: true
        startup_logo:
          type: string
          readOnly: true
        title:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        business_plan:
          type: string
          format: uri
          readOnly: true
          nullable: true
        media_files:
          type: string
          format: uri
          readOnly: true
          nullable: true
        status:
          enum:
          - draft
          - in_progress
          - completed
          - cancelled
          type: string
          description: |-
            * `draft` - Draft
            * `in_progress` - In Progress
            * `completed` - Completed
            * `cancelled` - Cancelled
          x-spec-enum-id: 73e900b46f9b46ee
          readOnly: true
        status_display:
          type: string
          readOnly: true
        duration:
          type: integer
          readOnly: true
          description: Duration in days
        funding_goal:
          type: string
          format: decimal
          pattern: ^-?\d{0,18}(?:\.\d{0,2})?$
          readOnly: true
        current_funding:
          type: string
          format: decimal
          pattern: ^-?\d{0,18}(?:\.\d{0,2})?$
          readOnly: true
        category:
          allOf:
          - $ref: '#/components/schemas/Category'
          readOnly: true
        website:
          type: string
          format: uri
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
        has_patents:
          type: boolean
          readOnly: true
        is_participant:
          type: boolean
          readOnly: true
        is_active:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - business_plan
      - category
      - created_at
      - current_funding
      - description
      - duration
      - email
      - funding_goal
      - has_patents
      - id
      - is_active
      - is_participant
      - media_files
      - startup
      - startup_logo
      - startup_name
      - status
      - status_display
      - title
      - updated_at
      - website
    ProjectWrite:
      type: object
      description: |-
        Serializer for creating/updating Project with validation.
        Ensures required fields match the model and cross-field rules are enforced.
      properties:
        id:
          type: integer
          readOnly: true
        startup_id:
          type: integer
        title:
          type: string
          maxLength: 255
        description:
          type: string
        business_plan:
          type: string
          format: uri
          nullable: true
        media_files:
          type: string
          format: uri
          nullable: true
        status:
          enum:
          - draft
          - in_progress
          - completed
          - cancelled
          type: string
          description: |-
            * `draft` - Draft
            * `in_progress` - In Progress
            * `completed` - Completed
            * `cancelled` - Cancelled
          x-spec-enum-id: 73e900b46f9b46ee
        duration:
          type: integer
          maximum: 3650
          minimum: 1
          description: Duration in days
        funding_goal:
          type: string
          format: decimal
          pattern: ^-?\d{0,18}(?:\.\d{0,2})?$
        current_funding:
          type: string
          format: decimal
          pattern: ^-?\d{0,18}(?:\.\d{0,2})?$
          default: '0.00'
        category_id:
          type: integer
        website:
          type: string
          format: uri
          maxLength: 200
        email:
          type: string
          format: email
          maxLength: 255
        has_patents:
          type: boolean
        is_participant:
          type: boolean
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - category_id
      - created_at
      - email
      - funding_goal
      - id
      - startup_id
      - title
      - updated_at
    ProjectWriteRequest:
      type: object
      description: |-
        Serializer for creating/updating Project with validation.
        Ensures required fields match the model and cross-field rules are enforced.
      properties:
        startup_id:
          type: integer
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        business_plan:
          type: string
          format: binary
          nullable: true
        media_files:
          type: string
          format: binary
          nullable: true
        status:
          enum:
          - draft
          - in_progress
          - completed
          - cancelled
          type: string
          description: |-
            * `draft` - Draft
            * `in_progress` - In Progress
            * `completed` - Completed
            * `cancelled` - Cancelled
          x-spec-enum-id: 73e900b46f9b46ee
        duration:
          type: integer
          maximum: 3650
          minimum: 1
          description: Duration in days
        funding_goal:
          type: string
          format: decimal
          pattern: ^-?\d{0,18}(?:\.\d{0,2})?$
        current_funding:
          type: string
          format: decimal
          pattern: ^-?\d{0,18}(?:\.\d{0,2})?$
          default: '0.00'
        category_id:
          type: integer
        website:
          type: string
          format: uri
          maxLength: 200
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 255
        has_patents:
          type: boolean
        is_participant:
          type: boolean
        is_active:
          type: boolean
      required:
      - category_id
      - email
      - funding_goal
      - startup_id
      - title
    ResendEmailRequest:
      type: object
      description: |-
        Serializer for resending a verification email.

        This serializer is used to validate the request payload for the endpoint
        that allows resending an email verification link to a user.
        It does not reveal whether the user exists, for security purposes.

        Attributes:
            user_id (IntegerField): The ID of the target user. Must be a positive integer.
            token (CharField): The current verification token. Can be empty if a new token should be generated.
            email (EmailField, optional): A new email address to send the verification link to.
                If provided, it will override the stored email.
      properties:
        user_id:
          type: integer
          minimum: 1
        token:
          type: string
        email:
          type: string
          format: email
          minLength: 1
      required:
      - user_id
    SavedStartup:
      type: object
      description: |-
        Serializer for creating and retrieving SavedStartup records.

        Ensures:
        - Only authenticated investors can save startups.
        - Prevents saving own startup.
        - Avoids duplicates via validator and IntegrityError handling.
      properties:
        id:
          type: integer
          readOnly: true
        investor:
          type: integer
          readOnly: true
        startup_name:
          type: string
          readOnly: true
        status:
          enum:
          - watching
          - contacted
          - negotiating
          - passed
          type: string
          description: |-
            * `watching` - Watching
            * `contacted` - Contacted
            * `negotiating` - Negotiating
            * `passed` - Passed
          x-spec-enum-id: 34827c2d6e495653
        notes:
          type: string
          nullable: true
        saved_at:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - investor
      - saved_at
      - startup_name
      - updated_at
    SavedStartupRequest:
      type: object
      description: |-
        Serializer for creating and retrieving SavedStartup records.

        Ensures:
        - Only authenticated investors can save startups.
        - Prevents saving own startup.
        - Avoids duplicates via validator and IntegrityError handling.
      properties:
        startup:
          type: integer
          writeOnly: true
        status:
          enum:
          - watching
          - contacted
          - negotiating
          - passed
          type: string
          description: |-
            * `watching` - Watching
            * `contacted` - Contacted
            * `negotiating` - Negotiating
            * `passed` - Passed
          x-spec-enum-id: 34827c2d6e495653
        notes:
          type: string
          nullable: true
      required:
      - startup
    Startup:
      type: object
      description: Full serializer with nested project details.
      properties:
        id:
          type: integer
          readOnly: true
        company_name:
          type: string
          maxLength: 254
        description:
          type: string
        industry:
          type: integer
        location:
          type: integer
        website:
          type: string
          format: uri
          maxLength: 200
        email:
          type: string
          format: email
          maxLength: 254
        founded_year:
          type: integer
          maximum: 2025
          minimum: 1900
        team_size:
          type: integer
          maximum: 2147483647
          minimum: 1
        stage:
          enum:
          - idea
          - mvp
          - launch
          - scale
          - exit
          type: string
          x-spec-enum-id: 0a73ba3d72a52b97
          title: Development Stage
          description: |-
            Current development stage of the startup

            * `idea` - Idea
            * `mvp` - MVP
            * `launch` - Launch
            * `scale` - Scale
            * `exit` - Exit
        social_links:
          type: object
          additionalProperties: {}
        user:
          type: integer
          description: User who owns this startup
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectRead'
          readOnly: true
      required:
      - company_name
      - created_at
      - email
      - founded_year
      - id
      - industry
      - location
      - projects
      - updated_at
      - user
    StartupDocument:
      type: object
      description: Serializer for StartupDocument (Elasticsearch).
      properties:
        id:
          type: integer
        company_name:
          type: string
        description:
          type: string
        location:
          type: string
        stage:
          type: string
        industry:
          type: string
          readOnly: true
      required:
      - company_name
      - description
      - id
      - industry
      - location
      - stage
    StartupProject:
      type: object
      description: Read-only serializer for startup details.
      properties:
        id:
          type: integer
          readOnly: true
        company_name:
          type: string
          maxLength: 254
        stage:
          enum:
          - idea
          - mvp
          - launch
          - scale
          - exit
          type: string
          x-spec-enum-id: 0a73ba3d72a52b97
          title: Development Stage
          description: |-
            Current development stage of the startup

            * `idea` - Idea
            * `mvp` - MVP
            * `launch` - Launch
            * `scale` - Scale
            * `exit` - Exit
        website:
          type: string
          format: uri
          maxLength: 200
      required:
      - company_name
      - id
    StartupProjectRequest:
      type: object
      description: Read-only serializer for startup details.
      properties:
        company_name:
          type: string
          minLength: 1
          maxLength: 254
        stage:
          enum:
          - idea
          - mvp
          - launch
          - scale
          - exit
          type: string
          x-spec-enum-id: 0a73ba3d72a52b97
          title: Development Stage
          description: |-
            Current development stage of the startup

            * `idea` - Idea
            * `mvp` - MVP
            * `launch` - Launch
            * `scale` - Scale
            * `exit` - Exit
        website:
          type: string
          format: uri
          maxLength: 200
      required:
      - company_name
    StartupRequest:
      type: object
      description: Full serializer with nested project details.
      properties:
        company_name:
          type: string
          minLength: 1
          maxLength: 254
        description:
          type: string
        industry:
          type: integer
        location:
          type: integer
        website:
          type: string
          format: uri
          maxLength: 200
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        founded_year:
          type: integer
          maximum: 2025
          minimum: 1900
        team_size:
          type: integer
          maximum: 2147483647
          minimum: 1
        stage:
          enum:
          - idea
          - mvp
          - launch
          - scale
          - exit
          type: string
          x-spec-enum-id: 0a73ba3d72a52b97
          title: Development Stage
          description: |-
            Current development stage of the startup

            * `idea` - Idea
            * `mvp` - MVP
            * `launch` - Launch
            * `scale` - Scale
            * `exit` - Exit
        social_links:
          type: object
          additionalProperties: {}
        user:
          type: integer
          description: User who owns this startup
      required:
      - company_name
      - email
      - founded_year
      - industry
      - location
      - user
    SubscriptionCreate:
      type: object
      description: |-
        Serializer for creating a new investment subscription.

        Fields:
            investor (Investor): The investor making the subscription.
            project (Project): The project to invest in.
            amount (Decimal): Investment amount, required and must be >= 0.01.

        Validation:
            - Ensures project exists and is a valid instance.
            - Ensures the requesting user is an investor.
            - Prevents self-investment (investor cannot fund their own startup project).
            - Prevents investments into fully funded projects.
            - Prevents investment amounts that exceed remaining funding.
            - Ensures amount is greater than or equal to 0.01.

        Creation:
            - Uses database transactions with row-level locking to prevent race conditions.
            - Recalculates effective funding using both DB aggregate and project's current_funding to avoid drift.
            - Updates the project's current_funding field after saving the subscription.
      properties:
        id:
          type: integer
          readOnly: true
        investor:
          type: integer
        project:
          type: integer
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
      required:
      - amount
      - id
      - investor
      - project
    SubscriptionCreateRequest:
      type: object
      description: |-
        Serializer for creating a new investment subscription.

        Fields:
            investor (Investor): The investor making the subscription.
            project (Project): The project to invest in.
            amount (Decimal): Investment amount, required and must be >= 0.01.

        Validation:
            - Ensures project exists and is a valid instance.
            - Ensures the requesting user is an investor.
            - Prevents self-investment (investor cannot fund their own startup project).
            - Prevents investments into fully funded projects.
            - Prevents investment amounts that exceed remaining funding.
            - Ensures amount is greater than or equal to 0.01.

        Creation:
            - Uses database transactions with row-level locking to prevent race conditions.
            - Recalculates effective funding using both DB aggregate and project's current_funding to avoid drift.
            - Updates the project's current_funding field after saving the subscription.
      properties:
        investor:
          type: integer
        project:
          type: integer
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
      required:
      - amount
      - investor
      - project
    TokenBlacklistRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    TokenObtainPairRequest:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
      required:
      - refresh
    UserNotificationPreference:
      type: object
      description: |-
        Serializer for the UserNotificationPreference model.
        Handles both creation and updates of notification preferences.
        The user is automatically set from the request context on creation.
      properties:
        user_id:
          type: integer
          readOnly: true
        enable_in_app:
          type: boolean
          title: Enable in-app notifications
        enable_email:
          type: boolean
          title: Enable email notifications
        enable_push:
          type: boolean
          title: Enable push notifications
        type_preferences:
          type: array
          items:
            $ref: '#/components/schemas/UserNotificationTypePreference'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - type_preferences
      - updated_at
      - user_id
    UserNotificationTypePreference:
      type: object
      description: Serializer for the UserNotificationTypePreference model.
      properties:
        id:
          type: integer
          readOnly: true
        notification_type:
          allOf:
          - $ref: '#/components/schemas/NotificationType'
          readOnly: true
        frequency:
          enum:
          - immediate
          - daily_digest
          - weekly_summary
          - disabled
          type: string
          description: |-
            * `immediate` - Immediate
            * `daily_digest` - Daily Digest
            * `weekly_summary` - Weekly Summary
            * `disabled` - Disabled
          x-spec-enum-id: a95a4559861f428e
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - frequency
      - id
      - notification_type
      - updated_at
    UserNotificationTypePreferenceRequest:
      type: object
      description: Serializer for the UserNotificationTypePreference model.
      properties:
        notification_type_id:
          type: integer
          writeOnly: true
        frequency:
          enum:
          - immediate
          - daily_digest
          - weekly_summary
          - disabled
          type: string
          description: |-
            * `immediate` - Immediate
            * `daily_digest` - Daily Digest
            * `weekly_summary` - Weekly Summary
            * `disabled` - Disabled
          x-spec-enum-id: a95a4559861f428e
      required:
      - frequency
      - notification_type_id
</file>

<file path="README.md">
# Forum-Project-Stage-CC
Forum Project Stage CC Template Repo

**Project Vision Statement:**

*"Empowering Innovation: Bridging Startups and Investors for Ukraine's Economic Growth"*

**Overview:**

In the dynamic world of entrepreneurship, the path from a transformative idea to a successful venture is often complex and challenging. Our WebAPI application, developed using the Django Rest Framework, is designed to be a cornerstone in simplifying this journey. We aim to create a robust and secure digital platform that caters to two pivotal groups in the business ecosystem: innovative startups with compelling ideas and forward-thinking investors seeking valuable opportunities.

All technical documentation is located in the `docs/` folder at the root of the repository:

- [`API.md`](docs/API.md): Detailed description of available endpoints and request/response formats.
- [`CONTRIBUTING_DOCS.md`](docs/CONTRIBUTING_DOCS.md): Guidelines and instructions for contributors and developers.



**Goals:**

1. **Fostering Collaborative Opportunities:** Our platform bridges startups and investors, enabling startups to showcase their groundbreaking proposals and investors to discover and engage with high-potential ventures.

2. **Seamless User Experience:** We prioritize intuitive navigation and interaction, ensuring that startups and investors can easily connect, communicate, and collaborate.

3. **Secure and Trustworthy Environment:** Security is at the forefront of our development, ensuring the confidentiality and integrity of all shared information and communications.

4. **Supporting Economic Growth:** By aligning startups with the right investors, our platform not only cultivates individual business success but also contributes significantly to the growth and diversification of Ukraine's economy.

**Commitment:**

We are committed to delivering a platform that is not just a marketplace for ideas and investments but a thriving community that nurtures innovation fosters economic development, and supports the aspirations of entrepreneurs and investors alike. Our vision is to see a world where every transformative idea has the opportunity to flourish and where investors can confidently fuel the engines of progress and innovation.

![image](https://github.com/mehalyna/Forum-Project-Stage-CC/assets/39273210/54b0de76-f6e3-4bf3-bf38-fb5bf1d1d63d)



### Basic Epics

0. **As a user of the platform**, I want the ability to represent both as a startup and as an investor company, so that I can engage in the platform's ecosystem from both perspectives using a single account.

   - Features:
     - implement the functionality for users to select and switch roles.

2. **As a startup company,** I want to create a profile on the platform, so that I can present my ideas and proposals to potential investors.
   
   - Features:
     -  user registration functionality for startups.
     -  profile setup page where startups can add details about their company and ideas.

3. **As an investor,** I want to view profiles of startups, so that I can find promising ideas to invest in.
   
   - Features:
     -  feature for investors to browse and filter startup profiles.
     -  viewing functionality for detailed startup profiles.

4. **As a startup company,** I want to update my project information, so that I can keep potential investors informed about our progress and milestones.
   
   - Features:
     -  functionality for startups to edit and update their project information.
     -  system to notify investors about updates to startups they are following.

5. **As an investor,** I want to be able to contact startups directly through the platform, so that I can discuss investment opportunities.
   
   - Features:
     -  secure messaging system within the platform for communication between startups and investors.
     -  privacy and security measures to protect the communication.

6. **As a startup company,** I want to receive notifications about interested investors, so that I can engage with them promptly.
   
   - Features:
     -  notification functionality for startups when an investor shows interest or contacts them.
     -  dashboard for startups to view and manage investor interactions.

7. **As an investor,** I want to save and track startups that interest me, so that I can manage my investment opportunities effectively.
   
   - Features:
     -  feature for investors to save and track startups.
     -  dashboard for investors to manage their saved startups and investment activities.

### Additional Features

- **Security and Data Protection**: Ensure that user data, especially sensitive financial information, is securely handled.
  
- **User Feedback System**: Create a system for users to provide feedback on the platform, contributing to continuous improvement.

- **Analytical Tools**: Implement analytical tools for startups to understand investor engagement and for investors to analyze startup potential.

### Agile Considerations

- Each user story can be broken down into smaller tasks and developed in sprints.
- Regular feedback from both user groups (startups and investors) should be incorporated.

---

### General Git Flow

1. Clone the repo and create your own feature branch from `main`.
2. Make sure to follow naming conventions below.
3. Commit frequently with clear, concise messages.
4. Push to remote and open a Pull Request (PR).
5. Wait for at least **3 code review approvals** before merging to `main`.

### Branch Naming Convention

Branch names should follow this format:

```

issue-\<ISSUE\_NUMBER>-<short-task-summary>

```

Examples:
```
- `issue-23-add-multimodal-upload`
- `issue-17-fix-langchain-vectorbug`
- `issue-12-improve-prompt-formatting`
```

> _Tip: Reference the GitHub Issue in your PR for context._

---

## Pull Request Guidelines

- Always link the related issue (e.g., "Closes #17").
- Add a clear title and description of your changes.
- Include screenshots or examples if UI-related.
- Run all tests before submitting a PR.
- Mark as **"Ready for Review"** only when complete.

---
## 🔐 Environment Variables

This project uses environment variables defined in a `.env` file at the root of the project.

### How it's loaded

- ✅ When using Docker Compose, the `.env` file is loaded automatically via the `env_file` directive.
- ✅ Inside Django, the variables are accessed using `python-decouple` (`config('SECRET_KEY')` etc).

### Hybrid Django + FastAPI Setup

This project integrates **Django** and **FastAPI** into a single ASGI application to support both traditional Django views and modern asynchronous FastAPI endpoints.

#### ASGI Application Structure

- `core/asgi.py` mounts both apps using `Starlette`'s `Mount` routing:
  - Django app is mounted at `/`
  - FastAPI app is mounted at `/api/fastapi`

#### Running Locally

```bash
uvicorn core.asgi:application --reload
```


### Elasticsearch Integration

This project integrates Django with Elasticsearch to provide powerful search and filtering capabilities.

🚀 Technologies:
Django: The core web framework.
Elasticsearch: The search and analytics engine.
django-elasticsearch-dsl & django-elasticsearch-dsl-drf: Libraries for seamless Elasticsearch integration with Django.
drf-spectacular: Tool for automatic API documentation (Swagger/OpenAPI).

💻 Getting Started:
This guide will get your local development environment up and running.

Prerequisites:
Ensure you have Docker installed to run Elasticsearch locally.
1. Run Elasticsearch: Start the Elasticsearch container using Docker Compose.
```
docker-compose up -d elasticsearch
```
2. Install Dependencies: Install the required Python packages from your requirements.txt file.
```
pip install -r requirements.txt
```
3. Index Data: Build your Elasticsearch indexes and sync them with your database. This is a crucial step to ensure all your data is searchable.
```
python manage.py search_index --rebuild
```
4. Run the Django Server: Start the development server to access the API.
```
python manage.py runserver
```

🔍 API Endpoints:
All API endpoints now support advanced search and filtering via Elasticsearch.

API Documentation:
Swagger UI and ReDoc documentation are automatically generated for all endpoints.
- Swagger UI: /api/schema/swagger-ui/
- ReDoc: /api/schema/redoc/

Startups Endpoint:
- URL: /api/startups/
- Method: GET
Description: Perform full-text search, filtering, and ordering on startup data.

Query Parameters:
- search or q: Full-text keyword to match in company_name and description.
- industries.name: Filters by industry name (e.g., Fintech).
- location.country: Filters by the country (e.g., USA).
- funding_stage: Filters by funding stage (e.g., Seed, Series A).
- ordering: Sorts results. Use a minus sign for descending order (e.g., -funding_stage).

Example:
```
curl "http://localhost:8000/api/startups/?search=ai&funding_stage=seed&ordering=-funding_stage"
```

Projects Endpoint:
- URL: /api/projects/
- Method: GET
Description: Search and filter project data.

Query Parameters:
- search or q: Full-text keyword to match in title and description.
- category.name: Filters by the project's category name.
- startup.company_name: Filters by the name of the associated startup.

Example:
```
curl "http://localhost:8000/api/projects/?search=solar&category.name=Tech"
```

# OAuth Authentication Setup

This project supports authentication using **OAuth providers** (**Google** and **GitHub**).

## 🔹 Google OAuth Setup

### Create Google OAuth Credentials
1. Go to [Google Cloud Console](https://console.cloud.google.com/).
2. Create a new project (or select an existing one).
3. Navigate to **APIs & Services → Credentials**.
4. Click **Create Credentials → OAuth 2.0 Client ID**.
5. If prompted, configure the consent screen.
6. Add **Authorized Redirect URIs**:  `http://yourdomain.com/oauth/callback/`(example)
7. Copy the **Client ID** and **Client Secret**.

### Environment Variables
Add the following to `.env` file:

```text
GOOGLE_OAUTH_CLIENT_ID=your_google_client_id
GOOGLE_OAUTH_CLIENT_SECRET=your_google_client_secret
```
## 🔹 GitHub OAuth Setup

### Create GitHub OAuth App
1. Go to [GitHub Developer Settings](https://github.com/settings/developers).
2. Click **New OAuth App**.
3. Fill in application details.
4. Set **Authorization Callback URL**:  `http://yourdomain.com/oauth/callback/`
5. Copy the **Client ID** and generate a **Client Secret**.

### Environment Variables
Add these to `.env` file:

```text
GITHUB_OAUTH_CLIENT_ID=your_github_client_id
GITHUB_OAUTH_CLIENT_SECRET=your_github_client_secret
```

## 🔐 Authentication Flow

### OAuth Login Process

#### Client-Side OAuth Flow
1. Frontend redirects users to **Google/GitHub OAuth consent screen**.
2. After consent, provider redirects back with **authorization code**.
3. Frontend exchanges code for **access token** using provider's token endpoint.

#### Backend Token Validation
Example request:

```http
POST api/v1/auth/oauth/login/
Content-Type: application/json

{
  "provider": "google",  // or "github"
  "access_token": "oauth_provided_access_token"
}
```
#### Backend Processing
1. Validates access token with provider's API.
2. Retrieves user profile information.
3. Creates or updates local user record.
4. Issues JWT tokens for authentication(Only for users with is_active=True).

#### Response
```json
{
  "access": "jwt_access_token",
    "user": {
    "id": "user_123",
    "email": "user@example.com",
    "first_name": "John",
    "last_name": "Doe",
    "user_phone": "",
    "title": "",
    "role": "user"
  }
}
```
### JWT Token Issuance
The system uses Django REST Framework Simple JWT for token management:
- Access Token: Short-lived (default 5 minutes) for API authentication
- Refresh Token - set in HTTP-only cookie: Longer-lived (default 24 hours) for obtaining new access tokens.
- Automatic User Creation: New users are automatically created with data from OAuth providers.
### Troubleshooting
Common Errors
|    Error Message                        |      HTTP Status    |                    Cause                   |                     Solution                          |
|-----------------------------------------|---------------------|--------------------------------------------|-------------------------------------------------------|
| "Invalid provider"                      | 400 Bad Request     | provider missing/invalid                   | Ensure both `provider` and `access_token` are strings.|
| "access_token is missing"               | 400 Bad Request     | Missing token                              | Provide access_token                                  |
| "Unsupported provider"                  | 400 Bad Request     | Provider other than Google/GitHub          | Use only `"google"` or `"github"` as provider value.  |
| "OAuth authentication failed"           | 400 Bad Request     | Expired, malformed, or revoked token       | Re-authenticate with provider                         |
| "No verified primary email found"       | 403 Forbidden       | GitHub account lacks verified email        | User must add/verify email in GitHub settings.        |
</file>

<file path=".github/workflows/ci-cd.yml">
name: Django CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      enable_deploy:
        description: 'Enable deployment step?'
        required: true
        default: 'off'

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      DJANGO_SETTINGS_MODULE: core.settings
      SECRET_KEY: dummy_key_for_ci
      DEBUG: 0
      DB_NAME: test_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: localhost
      ELASTICSEARCH_HOST: http://localhost:9200
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

      GITHUB_CLIENT_ID: ${{ secrets.GIT_CLIENT_ID }}
      GITHUB_CLIENT_SECRET: ${{ secrets.GIT_CLIENT_SECRET }}
      
      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      EMAIL_PORT: 587
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_USE_TLS: true
      DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}

      REDIS_HOST: localhost
      REDIS_PORT: 6379

      MONGO_DB: test_chat
      MONGO_HOST: localhost
      MONGO_PORT: 27017

    services:
      db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.12
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        ports:
          - 9200:9200
        options: >-
          --health-cmd="curl -f http://localhost:9200/_cat/health?h=status"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Elasticsearch
        run: |
          echo "Waiting for Elasticsearch to be ready..."
          timeout 60 bash -c 'until curl -s http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s > /dev/null; do sleep 2; done'
          echo "Elasticsearch is ready!"

      - name: Wait for Redis
        run: |
          echo "Waiting for Redis to be ready..."
          timeout 30 bash -c 'until nc -z localhost 6379; do sleep 2; done'
          echo "Redis is ready!"

      - name: Run Migrations
        run: |
          python manage.py migrate

      - name: Run Tests
        run: |
          python manage.py test

      - name: Run Linting (flake8 - allow fail)
        continue-on-error: true
        run: |
          flake8 . --exclude=venv,migrations,__pycache__,settings.py

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # TODO: Enable Docker login when secrets are configured
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t my-django-app:latest -t my-django-app:${{ github.sha }} .

      # TODO: Push image to Docker Hub after testing is complete
      # - name: Push Docker Image
      #   run: |
      #     docker push ${{ secrets.DOCKER_USERNAME }}/projectname:latest

  deploy:
    if: ${{ github.event.inputs.enable_deploy == 'on' }}
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to Production
        run: |
          echo " Deployment triggered! Production code is going live."
</file>

<file path="chat/routing.py">
from django.urls import path
from . import consumers

websocket_urlpatterns = [
    path('ws/chat/<str:other_user_email>/', consumers.InvestorStartupMessageConsumer.as_asgi()),
]
</file>

<file path="chat/serializers.py">
import os
import re
from django.utils.timezone import now
from rest_framework import serializers
from chat.documents import Room, Message
from core.settings.constants import FORBIDDEN_WORDS_SET
from collections import OrderedDict

MAX_PARTICIPANTS = int(os.getenv("MAX_PARTICIPANTS", 50))
MIN_MESSAGE_LENGTH = int(os.getenv("MIN_MESSAGE_LENGTH", 1))
MAX_MESSAGE_LENGTH = int(os.getenv("MAX_MESSAGE_LENGTH", 1000))


class RoomSerializer(serializers.Serializer):
    """
    Serializer for chat rooms (conversations).

    Fields:
        - name (str): Unique identifier for the room (3-50 chars, letters, digits, dash, underscore).
        - is_group (bool): Indicates if the room is a group chat (True) or private chat (False).
        - participants (list[str]): List of user IDs participating in the room.

    Validation:
        - Room name must contain only allowed characters.
        - Number of participants must not exceed MAX_PARTICIPANTS.
        - Private rooms must have exactly 2 participants.
    """

    name = serializers.CharField(min_length=3, max_length=50)
    is_group = serializers.BooleanField(default=False)
    participants = serializers.ListField(
        child=serializers.CharField(), allow_empty=False
    )

    def validate_name(self, value):
        """
        Ensure the room name only contains letters, digits, dash, or underscore.
        """
        if not re.match(r'^[a-zA-Z0-9_-]+$', value):
            raise serializers.ValidationError(
                "Room name can only contain letters, numbers, dash, underscore."
            )
        return value

    def validate_participants(self, value):
        """
        Ensure participants list contains unique IDs and does not exceed the maximum limit.
        """
        unique_ids = list(OrderedDict.fromkeys(value))
        if len(unique_ids) > MAX_PARTICIPANTS:
            raise serializers.ValidationError(
                f"Room cannot have more than {MAX_PARTICIPANTS} participants."
            )
        return unique_ids

    def validate(self, data):
        """
        Cross-field validation for the room.
        - Ensures private rooms have exactly 2 participants.
        """
        if not data['is_group'] and len(data['participants']) != 2:
            raise serializers.ValidationError(
                "Private room must have exactly 2 participants."
            )
        return data

    def create(self, validated_data):
        """
        Create and persist a new Room instance.
        """
        room = Room(**validated_data)
        room.save()
        return room

    def update(self, instance, validated_data):
        """
        Update an existing Room instance with validated data.
        """
        instance.name = validated_data.get('name', instance.name)
        instance.is_group = validated_data.get('is_group', instance.is_group)
        instance.participants = validated_data.get('participants', instance.participants)
        instance.save()
        return instance


class MessageSerializer(serializers.Serializer):
    """
    Serializer for chat messages.

    Fields:
        - room (str): The name of the room where the message belongs.
        - sender_id (str): ID of the user sending the message.
        - receiver_id (str, optional): ID of the recipient (required for private messages).
        - text (str): Message content (with length restrictions and forbidden words filtering).
        - timestamp (datetime): Time of message creation (defaults to now in UTC).
        - is_read (bool): Indicates if the message has been read.

    Validation:
        - Text must not be empty, contain forbidden words, or spam-like repeated characters.
        - Sender must belong to the room.
        - For private rooms, receiver_id is required and must be the other participant.
        - For group rooms, receiver_id must be a participant if provided.
    """

    room = serializers.CharField()
    sender_id = serializers.CharField()
    receiver_id = serializers.CharField(required=False, allow_null=True)
    text = serializers.CharField(
        min_length=MIN_MESSAGE_LENGTH, max_length=MAX_MESSAGE_LENGTH
    )
    timestamp = serializers.DateTimeField(default=now)
    is_read = serializers.BooleanField(default=False)

    def validate_text(self, value):
        """
        Validate the content of the message.
        """
        if not value.strip():
            raise serializers.ValidationError("Message text cannot be empty.")

        lowered = value.lower()
        forbidden_pattern = r'\b(?:' + '|'.join(
            re.escape(word) for word in FORBIDDEN_WORDS_SET
        ) + r')\b'
        if re.search(forbidden_pattern, lowered):
            raise serializers.ValidationError("Message contains forbidden content.")

        if re.search(r"([^aeiou\s])\1{10,}", value, re.IGNORECASE):
            raise serializers.ValidationError("Message looks like spam.")

        return value

    def validate(self, data):
        """
        Cross-field validation for message consistency with the room.
        """
        try:
            room = data.get('room')
            if not room:
                raise serializers.ValidationError("Room name is required.")
        except Room.DoesNotExist:
            raise serializers.ValidationError("Room does not exist.")

        if data['sender_id'] not in room.participants:
            raise serializers.ValidationError("Sender must be a participant of the room.")

        if room.is_group:
            if data.get('receiver_id') and data['receiver_id'] not in room.participants:
                raise serializers.ValidationError(
                    "Receiver must be a participant of the group."
                )
        else:
            if not data.get('receiver_id'):
                raise serializers.ValidationError(
                    "Receiver is required in private messages."
                )
            if data['receiver_id'] not in room.participants:
                raise serializers.ValidationError(
                    "Receiver must be a participant of the room."
                )

        data['room_instance'] = room
        return data

    def create(self, validated_data):
        """
        Create and persist a new Message instance in the given room.
        """
        room = validated_data.pop('room_instance')
        msg = Message(room=room, **validated_data)
        msg.save()
        return msg
</file>

<file path="chat/urls.py">
from django.urls import path
from chat.views.chat_views import ConversationCreateView, SendMessageView, ConversationMessagesView

urlpatterns = [
    path("conversations/", ConversationCreateView.as_view(), name="create_conversation"),
    path("messages/", SendMessageView.as_view(), name="send_message"),
    path("conversations/<str:room_name>/messages/", ConversationMessagesView.as_view(), name="list_messages"),
]
</file>

<file path="communications/migrations/0003_remove_notification_related_project_id_and_more.py">
# Generated by Django 5.2.4 on 2025-08-27 15:05

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('communications', '0002_initial'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='notification',
            name='related_project_id',
        ),
        migrations.AlterField(
            model_name='notification',
            name='related_startup_id',
            field=models.CharField(blank=True, max_length=64, null=True),
        ),
    ]
</file>

<file path="communications/signals.py">
import logging
from django.conf import settings
from django.db import transaction
from django.db.models.signals import post_save, post_migrate
from django.apps import apps
from django.dispatch import receiver
from datetime import timedelta
from django.utils import timezone

from .models import (
    UserNotificationPreference,
    NotificationType,
    UserNotificationTypePreference,
    Notification,
    NotificationTrigger,
    NotificationPriority,
)

logger = logging.getLogger(__name__)

_types_seeded = False
_handlers: list = []

def _to_int(value):
    try:
        return int(value)
    except (TypeError, ValueError):
        return None

@receiver(post_save, sender=settings.AUTH_USER_MODEL)
def create_user_notification_preferences(sender, instance, created, **kwargs):
    """
    Create default notification preferences and per-type preferences when a new user is created.
    """
    logger.debug(
        "[SIGNAL] create_user_notification_preferences fired",
        extra={"sig_created": bool(created), "user_id": getattr(instance, "pk", None)},
    )
    if created:
        preference, pref_created = UserNotificationPreference.objects.get_or_create(user=instance)
        logger.info(
            "[SIGNAL] UserNotificationPreference ensured",
            extra={"user_id": getattr(instance, "pk", None), "pref_created": pref_created},
        )

        notification_types = NotificationType.objects.filter(is_active=True)
        logger.debug(
            "[SIGNAL] Active notification types fetched",
            extra={"count": notification_types.count()},
        )
        for nt in notification_types:
            _, utp_created = UserNotificationTypePreference.objects.get_or_create(
                user_preference=preference,
                notification_type=nt,
                defaults={"frequency": nt.default_frequency},
            )
            if utp_created:
                logger.debug(
                    "[SIGNAL] Type preference created",
                    extra={"user_id": instance.pk, "nt_code": nt.code},
                )


@receiver(post_migrate)
def create_initial_notification_types(sender, **kwargs):
    """
    Ensure initial NotificationType rows exist after migrations.
    """
    if sender.name != "communications":
        return

    global _types_seeded
    if _types_seeded:
        logger.debug("[SIGNAL] Notification types already seeded, skipping")
        return

    logger.info("[SIGNAL] Seeding initial NotificationType records")
    notification_types = getattr(settings, "COMMUNICATIONS_NOTIFICATION_TYPES", None)
    if not notification_types:
        logger.info(
            "[SIGNAL] Skipping types seeding: COMMUNICATIONS_NOTIFICATION_TYPES not set or empty"
        )
        _types_seeded = True
        return

    desired_codes = {nt["code"] for nt in notification_types}
    logger.debug("[SIGNAL] Desired notification type codes computed", extra={"codes": list(desired_codes)})

    with transaction.atomic():
        existing_codes = set(
            NotificationType.objects.filter(code__in=desired_codes).values_list("code", flat=True)
        )
        to_create = [nt for nt in notification_types if nt["code"] not in existing_codes]
        logger.info(
            "[SIGNAL] NotificationType diff calculated",
            extra={"existing": list(existing_codes), "to_create_count": len(to_create)},
        )

        if to_create:
            objs = [
                NotificationType(
                    code=nt["code"],
                    name=nt["name"],
                    description=nt.get("description", ""),
                    default_frequency=nt.get("default_frequency", "immediate"),
                    is_active=nt.get("is_active", True),
                )
                for nt in to_create
            ]
            NotificationType.objects.bulk_create(objs, ignore_conflicts=True)
            logger.info(
                "[SIGNAL] NotificationType bulk_create done",
                extra={"inserted_codes": [o.code for o in objs]},
            )

    _types_seeded = True
    logger.debug("[SIGNAL] Types seeding marked as done")


def _get_or_create_ntype(code: str, name: str | None = None) -> NotificationType:
    ntype = NotificationType.objects.filter(code=code).first()
    if ntype:
        logger.debug("[SIGNAL] NotificationType found", extra={"code": code, "id": ntype.pk})
        return ntype
    ntype, created = NotificationType.objects.get_or_create(
        code=code,
        defaults={"name": name or code.replace("_", " ").title(), "description": "", "is_active": True},
    )
    logger.info(
        "[SIGNAL] NotificationType ensured",
        extra={"code": code, "created_now": created, "id": getattr(ntype, "pk", None)},
    )
    return ntype

def _connect_saved_startup_signal():
    try:
        SavedStartup = apps.get_model("investors", "SavedStartup")
        logger.debug("[SIGNAL] investors.SavedStartup model resolved")
    except Exception as e:
        logger.warning("Could not resolve investors.SavedStartup", exc_info=True)
        return

    @receiver(
        post_save,
        sender=SavedStartup,
        dispatch_uid="comm_saved_startup_created",
        weak=False,
    )
    def notify_startup_followed(sender, instance, created, **kwargs):
        logger.debug(
            "[SIGNAL] notify_startup_followed fired",
            extra={"sig_created": bool(created), "savedstartup_id": getattr(instance, "pk", None)},
        )
        if not created:
            logger.debug("[SIGNAL] Instance was updated, not created. Skip.")
            return

        startup = getattr(instance, "startup", None)
        investor = getattr(instance, "investor", None)

        if not startup or not getattr(startup, "pk", None):
            logger.warning(
                "[SIGNAL] Skip: startup missing/unsaved",
                extra={"savedstartup_id": getattr(instance, "pk", None)},
            )
            return
        if not investor or not getattr(investor, "pk", None):
            logger.warning(
                "[SIGNAL] Skip: investor missing/unsaved",
                extra={"savedstartup_id": getattr(instance, "pk", None)},
            )
            return

        # Resolve Django User objects for startup owner & investor
        startup_user = (
            getattr(startup, "user", None)
            or getattr(getattr(startup, "owner", None), "user", None)
            or getattr(startup, "owner", None)
        )
        investor_user = (
            getattr(investor, "user", None)
            or getattr(getattr(investor, "owner", None), "user", None)
            or getattr(investor, "owner", None)
        )

        if not getattr(startup_user, "pk", None):
            logger.warning(
                "[SIGNAL] Skip: startup_user missing",
                extra={"startup_id": getattr(startup, "pk", None)},
            )
            return
        if not getattr(investor_user, "pk", None):
            logger.warning(
                "[SIGNAL] Skip: investor_user missing",
                extra={"investor_id": getattr(investor, "pk", None)},
            )
            return

        if startup_user.pk == investor_user.pk:
            logger.info(
                "[SIGNAL] Skip: user followed own startup",
                extra={"user_id": startup_user.pk},
            )
            return

        sid = _to_int(getattr(startup, "id", None))
        if sid is None:
            logger.warning("[SIGNAL] Skip: startup id is not int-like", extra={"raw_id": getattr(startup, "id", None)})
            return
        inv_name = getattr(investor_user, "get_full_name", lambda: "")() or getattr(investor_user, "email", "")
        title = "New follower"
        message = f"{inv_name} followed your startup."

        # Ensure notification type
        ntype = NotificationType.objects.filter(code="startup_followed", is_active=True).first()
        if not ntype:
            logger.debug("[SIGNAL] NotificationType 'startup_followed' not found, creating")
            ntype = _get_or_create_ntype("startup_followed", "Startup Followed")
            
        now = timezone.now()
        second_start = now.replace(microsecond=0)
        second_end = second_start + timedelta(seconds=1)

        # Deduplication
        base_qs = Notification.objects.filter(
            user=startup_user,
            notification_type=ntype,
            triggered_by_user=investor_user,
            related_startup_id=sid,
            created_at__gte=second_start,
            created_at__lt=second_end,
        )
        if base_qs.exists():
            logger.info(
                "[SIGNAL] Duplicate",
                extra={
                    "startup_user_id": startup_user.pk,
                    "investor_user_id": investor_user.pk,
                    "startup_id": sid,
                    "second_start": second_start.isoformat(),
                },
            )
            return

        def _create():
            _now = timezone.now()
            _second_start = _now.replace(microsecond=0)
            _second_end = _second_start + timedelta(seconds=1)
            
            # double-check inside transaction/on_commit
            if Notification.objects.filter(
                user=startup_user,
                notification_type=ntype,
                triggered_by_user=investor_user,
                related_startup_id=sid,
                created_at__gte=_second_start,
                created_at__lt=_second_end,
            ).exists():
                logger.info(
                    "[SIGNAL] Duplicate within same second (re-check)",
                    extra={"startup_id": sid, "second_start": _second_start.isoformat()},
                )
                return

            notif = Notification.objects.create(
                user=startup_user,
                notification_type=ntype,
                title=title,
                message=message,
                triggered_by_user=investor_user,
                triggered_by_type=NotificationTrigger.INVESTOR,
                priority=NotificationPriority.LOW,
                related_startup_id=sid,
            )
            logger.info(
                "[SIGNAL] Notification created",
                extra={
                    "notification_id": str(getattr(notif, "notification_id", "")),
                    "user_id": startup_user.pk,
                    "startup_id": sid,
                    "investor_user_id": investor_user.pk,
                },
            )

        def safe_create():
            try:
                _create()
            except Exception:
                logger.error("[SIGNAL] Failed to create notification", exc_info=True)

        conn = transaction.get_connection()
        if conn.in_atomic_block:
            logger.debug("[SIGNAL] In atomic block; scheduling on_commit")
            transaction.on_commit(safe_create)
        else:
            logger.debug("[SIGNAL] Not in atomic block; creating immediately")
            safe_create()

    _handlers.append(notify_startup_followed)
    logger.info("[SIGNAL] _connect_saved_startup_signal handler registered",
                extra={"handlers_count": len(_handlers)})


# Initialize handlers at import
logger.info("[SIGNAL] Initializing communications signals")
_connect_saved_startup_signal()
</file>

<file path="core/urls.py">
"""
URL configuration for core project.

Routes are organized by app and follow RESTful naming conventions.
All API endpoints use plural nouns for consistency.
Versioning is applied via 'api/v1/' to support future evolution.
"""

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from .healthcheck import elasticsearch_healthcheck

urlpatterns = [
    path('admin/', admin.site.urls),

    # Versioned API
    path('api/v1/auth/', include('users.urls')),
    path('api/v1/projects/', include('projects.urls')),
    path('api/v1/startups/', include('startups.urls')),
    path('api/v1/investors/', include('investors.urls')),
    path('api/v1/investments/', include(('investments.urls', 'investments'), namespace='investments')),
    path('api/v1/communications/', include('communications.urls')),
    path('api/v1/search/', include('search.urls')),

    # Health & allauth
    path('health/elasticsearch/', elasticsearch_healthcheck),
    path('accounts/', include('allauth.urls')),

    path("chat/", include("chat.urls")),

]

# Interactive API docs (Swagger/ReDoc) and machine-readable OpenAPI schema
if getattr(settings, 'DOCS_ENABLED', True):
    urlpatterns += [path('api/', include('core.urls_docs'))]

if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
</file>

<file path="frontend/src/hooks/useFormWithProtection.jsx">
import { useState, useMemo } from "react";
import { isFormDisabled } from '../utils/formUtils/isFormDisabled';

/**
 * Hook to manage form state with brute force protection
 * @param initialData - initial form data
 */
function useFormWithProtection(initialData = {}) {
    // Brute force protection
    const [attempts, setAttempts] = useState(0);
    const [isLocked, setIsLocked] = useState(false);

    // State to hold validation errors
    const [errors, setErrors] = useState({});

    // State to hold form data
    const [data, setData] = useState(initialData);

    // Filter out unexpected field from form entries and errors
    const filteredFormEntries = Object.entries(data).filter(
        ([key]) => key !== "unexpected"
    );

    // Filter out unexpected field from error keys
    const filteredErrorKeys = Object.keys(errors).filter(
        (key) => key !== "unexpected"
    );

    // Disabled if form invalid
    const isDisabled = useMemo(() =>
            isFormDisabled(filteredFormEntries, filteredErrorKeys, errors),
        [filteredFormEntries, filteredErrorKeys, errors]
    );

    return {
        attempts,
        setAttempts,
        isLocked,
        setIsLocked,
        errors,
        setErrors,
        data,
        setData,
        isDisabled,
    };
}

useFormWithProtection.propTypes = {
    initialData: Object,
}

export { useFormWithProtection };
</file>

<file path="frontend/src/hooks/useFormWithServerErrors.jsx">
import { Validator } from '../utils/validation/validate';

/**
 * Custom hook to manage form state, validation, and server-side errors.
 * @param {Object} form - form state object
 * @param {(function(string): void)} navigate - navigation function
 * @param {(function(Object): Object)} extractError - function to extract errors from server response
 * @param {(function(Object): void)} doSubmit - function to handle form submission
 * @param {function(any, any): void} handleChangeCustom - optional custom change handler
 */
function useFormWithServerErrors({ form, navigate, extractError, doSubmit, handleChangeCustom }) {

    // Function to process server-side errors
    const handleError = (error) => {
        const extracted = extractError(error);
        form.setErrors(prev => ({ ...prev, ...extracted }));
    };

    // Function to validate form data
    const validate = () => {
        const validationErrors = Validator.validate(form.data);
        form.setErrors(validationErrors);
        return Object.values(validationErrors).every(v => v === null);
    };

    // Function to handle form submission
    const handleSubmit = () => {
        if (form.isLocked) return;
        form.setIsLocked(true);
        if (validate()) {
            doSubmit({ form, navigate, handleError });
        }
    };

    // Function to handle input changes
    const handleChange = (e) => {
        if (handleChangeCustom) {
            handleChangeCustom(e, form);
        } else {
            Validator.handleChange(e, form.data, form.setData, form.setErrors);
        }
    };

    return { handleError, handleSubmit, handleChange, validate };
}

useFormWithServerErrors.propTypes = {
    form: Object.isRequired,
    navigate: Function.isRequired,
    extractError: Function.isRequired,
    doSubmit: Function.isRequired,
    handleChangeCustom: Function,
}

export { useFormWithServerErrors }
</file>

<file path="frontend/src/hooks/useIsMobile.jsx">
import { useState, useEffect } from "react";
import PropTypes from 'prop-types';

/**
 * Hook to manage mobile state based on window width.
 * @param {number} breakpoint - The width threshold to consider as mobile. Default is 769px.
 * @return {boolean}
 */
function useIsMobile(breakpoint = 769) {
    const [isMobile, setIsMobile] = useState(false);

    useEffect(() => {
        if (typeof window === "undefined") return;

        const handleResize = () => {
            setIsMobile(window.innerWidth <= breakpoint);
        };

        handleResize();

        window.addEventListener("resize", handleResize);
        return () => window.removeEventListener("resize", handleResize);
    }, [breakpoint]);

    return isMobile;
}

useIsMobile.propTypes = {
    breakpoint: PropTypes.number,
}

export default useIsMobile;
</file>

<file path="frontend/src/pages/ForgotPasswordDone/forgotPasswordDone.jsx">
import './forgotPasswordDone.css';
import Panel, { PanelBody, PanelNavigation, PanelTitle } from '../../components/Panel/panel';
import Button from '../../components/Button/button';
import { useNavigate } from 'react-router-dom';

function ForgotPasswordDone() {
    const navigate = useNavigate();

    return (
        <>
            <Panel aria-labelledby="forgot-password-form-title">
                <PanelTitle id="forgot-password-form-title"
                            aria-describedby="forgot-password-help1"
                >
                    Відновлення паролю майже завершено
                </PanelTitle>
                <PanelBody>
                    <div>
                        <p id="forgot-password-help1"
                           className={'panel--font-size'}
                        >
                            На вашу електронну адресу були надіслані інструкції для зміни паролю.
                        </p>
                    </div>
                </PanelBody>
                <PanelNavigation>
                    <Button
                        onClick={() => navigate('/')}
                        className={'button__padding panel--button'}
                        type="submit"
                    >
                        Повернутися до входу
                    </Button>
                </PanelNavigation>
            </Panel>
        </>
    );
}

export default ForgotPasswordDone;
</file>

<file path="frontend/src/pages/Home/home.jsx">
import './home.css';
import Button from '../../components/Button/button';
import { Link, useNavigate } from 'react-router-dom';
import ParticipantCard from '../../components/ParticipantCard/participantCard';
import PropTypes from 'prop-types';
import useIsMobile from '../../hooks/useIsMobile';
import GenericGrid from '../../components/GenericGrid/genericGrid';
import clsx from 'clsx';

/**
 * A reusable section component for the home page.
 * Renders its children inside a colored section with a container.
 *
 * @component
 * @param {Object} props - Component props.
 * @param {'white' | 'green' | 'yellow'} props.color - The color theme for the section.
 * Applied as part of the section's CSS class name.
 * @param {string} [props.className] - Optional additional CSS classes for the container.
 * @param {React.ReactNode} props.children - The content to be rendered inside the section.
 *
 * @example
 * <HomeSection color="blue" className="custom-class">
 *   <h2>Welcome</h2>
 *   <p>This is the home page.</p>
 * </HomeSection>
 */
function HomeSection({ color, className, children }) {
    return (
        <section className={`home--section__${color}`}>
            <div className={clsx('home--container', className)}>
                { children }
            </div>
        </section>
    );
}

HomeSection.propTypes = {
    color: PropTypes.string.isRequired,
    className: PropTypes.string,
    children: PropTypes.node.isRequired,
};

/**
 * NewParticipantGrid component
 * Renders a grid of new participants
 * Each participant includes a background image, profile picture, title, and location
 * The component maps over the provided data and renders a ParticipantCard for each item
 * @param {Array.<Object>} data - Array of objects containing participant data
 * @returns {JSX.Element}
 */
function NewParticipantGrid({ data }) {
    return (
        <GenericGrid
            data={data}
            expectedLength={4}
            className="participants--grid"
            renderItem={(item) => (
                <ParticipantCard
                    key={item.uid}
                    className="participants--grid-item"
                    uid={item.uid}
                    bcgImgSrc={item.bcgImgSrc}
                    ppImgSrc={item.ppImgSrc}
                    alt={item.alt}
                    title={item.title}
                    location={item.location}
                />
            )}
        />
    );
}

NewParticipantGrid.propTypes = {
    data: PropTypes.arrayOf(PropTypes.object).isRequired
}

/**
 * TargetAudienceGrid component
 * Renders a grid of target audience items
 * Each item includes an image and a title
 * @param {Array.<Object>} data - Array of objects containing imgSrc, alt, and title for each target audience item
 * @returns {JSX.Element}
 */
function TargetAudienceGrid({ data }) {
    return (
        <GenericGrid
            data={data}
            expectedLength={8}
            className="target--grid"
            renderItem={(item) => (
                <div className="target--grid-item" key={item.id}>
                    <img
                        src={item.imgSrc}
                        alt={item.alt}
                        className="target--grid-item-picture"
                    />
                    <h3 className="target--grid-item-title">{item.title}</h3>
                </div>
            )}
        />
    );
}

TargetAudienceGrid.propTypes = {
    data: PropTypes.arrayOf(PropTypes.object).isRequired
}

/**
 * BenefitsGrid component
 * Renders a grid of benefits panels
 * Each panel includes a title and a description
 * @param {Array.<Object>} data - Array of objects containing title and description for each benefit
 * @returns {JSX.Element}
 */
function BenefitsGrid({ data }) {
    return (
        <GenericGrid
            data={data}
            expectedLength={6}
            className="benefits--grid"
            renderItem={(item) => (
                <div className="benefits--grid-item" key={item.id}>
                    <h3 className="benefits--grid-item-title">{item.title}</h3>
                    <p>{item.description}</p>
                </div>
            )}
        />
    );
}

BenefitsGrid.propTypes = {
    data: PropTypes.arrayOf(PropTypes.object).isRequired
}

/**
 * HomePage component
 * Main page of the application
 * It includes a hero section, a value proposition section, a target audience section, and a benefits section.
 * The hero section contains a title, subtitle, and a button.
 * The target audience section displays a grid of target audience items with images and titles.
 * The benefits section displays a grid of benefits panels with titles and descriptions.
 * The page is styled with CSS classes defined in home.css.
 * @returns {JSX.Element}
 */
function HomePage() {
    // Participants data
    const newParticipantsData = [
        {uid: '1', bcgImgSrc: '/pictures/png/new-participant-bcg-1.png', ppImgSrc: '/pictures/png/new-participant-pp-1.png', alt: 'Participant', title: 'Асоціація рітейлерів України', location: 'Київ, Київська обл, Закарпатська обл.'},
        {uid: '2', bcgImgSrc: '/pictures/png/new-participant-bcg-2.png', ppImgSrc: '/pictures/png/new-participant-pp-2.png', alt: 'Participant', title: 'Regno', location: 'Київ, Київська обл, Закарпатська обл.'},
        {uid: '3', bcgImgSrc: '/pictures/png/new-participant-bcg-3.png', ppImgSrc: '/pictures/png/new-participant-pp-3.png', alt: 'Participant', title: 'Мукко', location: 'Київ, Київська обл, Закарпатська обл.'},
        {uid: '4', bcgImgSrc: '/pictures/png/new-participant-bcg-4.png', ppImgSrc: '/pictures/png/new-participant-pp-4.png', alt: 'Participant', title: 'МХП', location: 'Київ, Київська обл, Закарпатська обл.'}
    ];

    // Target audience data
    const targetAudienceData = [
        {id: '1', imgSrc: '/pictures/svg/bread.svg', alt: 'Bread', title: 'Виробники крафтової продукції'},
        {id: '2', imgSrc: '/pictures/svg/vine.svg', alt: 'Vine', title: 'Сомельє та ресторатори'},
        {id: '3', imgSrc: '/pictures/svg/building.svg', alt: 'Building', title: 'Представники готельно-ресторанного бізнесу'},
        {id: '4', imgSrc: '/pictures/svg/cart.svg', alt: 'Cart', title: 'Представники роздрібних та гуртових торгових мереж'},
        {id: '5', imgSrc: '/pictures/svg/box.svg', alt: 'Box', title: 'Представники пакувальної індустрії'},
        {id: '6', imgSrc: '/pictures/svg/truck.svg', alt: 'Truck', title: 'Представники логістичних компаній та служб доставки'},
        {id: '7', imgSrc: '/pictures/svg/rocket.svg', alt: 'Rocket', title: 'Стартапери'},
        {id: '8', imgSrc: '/pictures/svg/people.svg', alt: 'People', title: 'Інші фахівці галузі'}
    ];

    // Benefits data
    const benefitsData = [
        {id: '1', title: 'Прямий зв\'язок з виробниками', description: 'Знайомтеся з історією та цінностями брендів'},
        {id: '2', title: 'Ексклюзивні пропозиції', description: 'Знаходьте унікальні продукти, недоступні в масовому продажі'},
        {id: '3', title: 'Інновації та тренди', description: 'Будьте в курсі останніх новинок та технологій галузі'},
        {id: '4', title: 'Співпраця та синергія', description: 'Об\'єднуйтесь, щоб творити нове та ділитися досвідом'},
        {id: '5', title: 'Розвиток та масштабування', description: 'Знаходьте нових партнерів, клієнтів та ринки збуту'},
        {id: '6', title: 'Підтримка та знання', description: 'Отримуйте консультації, експертну допомогу та доступ до освітніх ресурсів'}
    ];

    const navigate = useNavigate();

    // State for changing the link text in the “New participants section”
    const isMobile = useIsMobile(769);

    return (
        <div className={'home'}>

            {/* Hero section */}
            <HomeSection
                color={'green'}
                className={'home--container__padding-narrow home--container__direction-row hero--section'}
                role="banner"
                aria-label="Головна секція Craftmerge"
            >
                <div className={'hero--title-container'}>
                    <h2 className={'hero--logo-title'}>CRAFTMERGE</h2>
                    <h2 className={'hero--text-title'}>Обʼєднуємо крафтових виробників та інноваторів</h2>
                    <div>
                        <Button
                            className={'button__padding'}
                            onClick={() => navigate('/who-we-are')}
                            aria-label="Дізнатися детальніше про компанію Craftmerge"
                        >
                            Детальніше про нас
                        </Button>
                    </div>
                </div>
                <div className={'hero--pictures'}>
                    <picture>
                        <source media="(max-width: 769px)" srcSet="/pictures/png/hero-small.png" />
                        <source media="(max-width: 1513px)" srcSet="/pictures/png/hero-middle.png" />
                        <img src={'/pictures/png/hero-big.png'} alt={'Hero'}/>
                    </picture>
                </div>
            </HomeSection>

            {/* New participants section */}
            <HomeSection
                color={'white'}
                className={'home--container__padding-wide'}
                role="banner"
            >
                <div className={'participants--title-container'}>
                    <h2 className={'home--title participants--title__flex'}>
                        Нові учасники
                    </h2>
                    <Link to={'/companies'} className={'link-right-arrow'}>
                        <p className={'participants--link link__underline'} aria-label="Переглянути всі підприємства">
                            {isMobile ? 'Всі' : 'Всі підприємства'}
                        </p>
                    </Link>
                </div>
                <NewParticipantGrid data={newParticipantsData} />
            </HomeSection>

            {/* Value proposition section */}
            <HomeSection
                color={'green'}
                className={'home--container__text-align-center home--container__padding-wide'}
                role="banner"
            >
                <h2 className={'home--title involve--title__max-width involve--title__margin'}>Майданчик для тих, хто втілює свої ідеї в життя</h2>
                <Button
                    className={'involve--button__padding'}
                    onClick={() => navigate('/auth/register')}
                    aria-label="Долучитися до Craftmerge"
                >
                    Долучитися
                </Button>
            </HomeSection>

            {/* Target audience section */}
            <HomeSection
                color={'yellow'}
                className={'home--container__padding-wide'}
                role="banner"
            >
                <h2 className={'home--title target--title__margin'}>Для кого</h2>
                <TargetAudienceGrid data={targetAudienceData} />
            </HomeSection>

            {/* Benefits section */}
            <HomeSection
                color={'white'}
                className={'home--container__padding-wide'}
                role="banner"
            >
                <h2 className={'home--title benefits--grid-item-title__margin'}>Чому варто</h2>
                <BenefitsGrid data={benefitsData} />
            </HomeSection>
        </div>
    );
}

export default HomePage;
</file>

<file path="frontend/src/utils/formUtils/isFormDisabled.jsx">
/**
 * Check if the form should be disabled based on empty fields and errors.
 * @param filteredFormEntries - Filtered form entries
 * @param filteredErrorKeys - Filtered error keys
 * @param errors - Errors
 * @return {boolean}
 */
export function isFormDisabled(filteredFormEntries, filteredErrorKeys, errors) {
    const hasEmptyField = filteredFormEntries.some(
        ([, value]) => !value.trim()
    );

    const hasError = filteredErrorKeys.some(
        (key) => errors[key]
    );

    return hasEmptyField || hasError;
}
</file>

<file path="investors/migrations/0005_alter_investor_company_name_alter_investor_stage.py">
# Generated by Django 5.2.4 on 2025-08-29 22:38

import validation.validate_names
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('investors', '0004_investor_social_links'),
    ]

    operations = [
        migrations.AlterField(
            model_name='investor',
            name='company_name',
            field=models.CharField(
                max_length=254,
                unique=True,
                validators=[
                    validation.validate_names.validate_company_name,
                    validation.validate_names.validate_latin
                ]
            ),
        ),
        migrations.AlterField(
            model_name='investor',
            name='stage',
            field=models.CharField(
                choices=[
                    ('idea', 'Idea'),
                    ('mvp', 'MVP'),
                    ('seed', 'Seed'),
                    ('launch', 'Launch'),
                    ('scale', 'Scale'),
                    ('exit', 'Exit')
                ],
                default='mvp',
                help_text='Current development stage of the investor',
                max_length=20,
                verbose_name='Stage'
            ),
        ),
    ]
</file>

<file path="investors/serializers/__init__.py">
from .investor import InvestorSerializer, SavedStartupSerializer
from .investor_create import InvestorCreateSerializer

__all__ = [
    "InvestorSerializer",
    "SavedStartupSerializer",
    "InvestorCreateSerializer",
]
</file>

<file path="investors/views_saved.py">
import django_filters
from rest_framework import generics, status
from rest_framework.exceptions import PermissionDenied
from rest_framework.filters import SearchFilter, OrderingFilter
from rest_framework.response import Response
from investors.models import SavedStartup
from investors.serializers import SavedStartupSerializer
from users.cookie_jwt import CookieJWTAuthentication
from users.permissions import IsAuthenticatedOr401


class SavedStartupFilter(django_filters.FilterSet):
    status = django_filters.CharFilter(field_name="status", lookup_expr="iexact")
    saved_after = django_filters.IsoDateTimeFilter(field_name="saved_at", lookup_expr="gte")
    saved_before = django_filters.IsoDateTimeFilter(field_name="saved_at", lookup_expr="lte")

    class Meta:
        model = SavedStartup
        fields = ["status"]


class InvestorSavedStartupsList(generics.ListAPIView):
    """
    GET /api/investor/saved-startups/?status=watching&search=cool&ordering=-saved_at
    - returns ONLY the current investor's saved startups
    - filtering by status, saved_at range
    - search by startup name/email
    - ordering by saved_at, status, startup name
    """
    permission_classes = [IsAuthenticatedOr401]
    authentication_classes = [CookieJWTAuthentication]
    serializer_class = SavedStartupSerializer
    filter_backends = [django_filters.rest_framework.DjangoFilterBackend, SearchFilter, OrderingFilter]
    filterset_class = SavedStartupFilter
    search_fields = ["startup__company_name", "startup__email"]
    ordering_fields = ["saved_at", "status", "startup__company_name"]
    ordering = ["-saved_at"]

    def get_queryset(self):
        user = self.request.user
        investor = getattr(user, "investor", None)
        if not investor:
            raise PermissionDenied("Only investors can list saved startups.")
        return (
            SavedStartup.objects
            .select_related("startup", "investor")
            .filter(investor=investor)
        )


class UnsaveStartupView(generics.GenericAPIView):
    """
    DELETE /api/startups/<startup_id>/unsave/
    Idempotent: returns 200 with {"deleted": true/false}
    """
    permission_classes = [IsAuthenticatedOr401]
    authentication_classes = [CookieJWTAuthentication]
    serializer_class = SavedStartupSerializer 

    def delete(self, request, startup_id: int):
        investor = getattr(request.user, "investor", None)
        if not investor:
            raise PermissionDenied("Only investors can unsave startups.")

        deleted_count, _ = SavedStartup.objects.filter(
            investor=investor,
            startup_id=startup_id,
        ).delete()

        return Response(
            {"startup_id": startup_id, "saved": False, "deleted": bool(deleted_count)},
            status=status.HTTP_200_OK,
        )
</file>

<file path="projects/migrations/0003_project_milestones_project_technologies_used_and_more.py">
# Generated by Django 5.2.4 on 2025-08-29 14:56

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('projects', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='project',
            name='milestones',
            field=models.JSONField(blank=True, default=dict, help_text='Project milestones or roadmap'),
        ),
        migrations.AddField(
            model_name='project',
            name='technologies_used',
            field=models.CharField(blank=True, default='', help_text='Technologies used in the project, comma-separated', max_length=255),
        ),
        migrations.CreateModel(
            name='ProjectHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changed_fields', models.JSONField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='projects.project')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Project History',
                'verbose_name_plural': 'Project Histories',
                'db_table': 'project_history',
                'ordering': ['-timestamp'],
            },
        ),
    ]
</file>

<file path="projects/apps.py">
from django.apps import AppConfig

class ProjectsConfig(AppConfig):
    name = 'projects'

    def ready(self):
        import startups.signals, projects.documents
        import projects.signals
</file>

<file path="projects/models.py">
from decimal import Decimal

from django.db import models
from django.conf import settings
from django.core.validators import MinValueValidator, MaxValueValidator
from django.core.exceptions import ValidationError

from validation.validate_document import validate_document_file
from validation.validate_email import validate_email_custom
from validation.validate_names import validate_forbidden_names

from common.enums import ProjectStatus


class Category(models.Model):
    """
    Represents a category for projects or other entities.
    """

    name = models.CharField(max_length=100, unique=True)
    description = models.TextField(blank=True, default="")
    created_at = models.DateTimeField(auto_now_add=True)

    def clean(self):
        super().clean()
        validate_forbidden_names(self.name, field_name="name")

    def __str__(self):
        return self.name

    class Meta:
        ordering = ['name']
        verbose_name = 'Category'
        verbose_name_plural = 'Categories'
        db_table = 'categories'


class Project(models.Model):
    """
    Represents a startup project with details about funding, status, and documentation.
    """

    startup = models.ForeignKey(
        'startups.Startup',
        on_delete=models.CASCADE,
        related_name='projects'
    )

    title = models.CharField(max_length=255)
    description = models.TextField(blank=True, default="")

    business_plan = models.FileField(
        upload_to='projects/business_plans/',
        blank=True,
        null=True,
        validators=[validate_document_file]
    )

    media_files = models.FileField(
        upload_to='projects/media/',
        blank=True,
        null=True,
        validators=[validate_document_file]
    )

    status = models.CharField(
        max_length=50,
        choices=ProjectStatus.choices,
        default=ProjectStatus.DRAFT
    )

    duration = models.PositiveIntegerField(
        help_text="Duration in days",
        blank=True,
        default=1,
        validators=[MinValueValidator(1), MaxValueValidator(3650)]
    )

    funding_goal = models.DecimalField(
        max_digits=20,
        decimal_places=2,
        validators=[MinValueValidator(Decimal('0.01'))]
    )

    current_funding = models.DecimalField(
        max_digits=20,
        decimal_places=2,
        default=Decimal('0.00'),
        validators=[MinValueValidator(Decimal('0.00'))]
    )

    category = models.ForeignKey('Category', on_delete=models.PROTECT)
    website = models.URLField(blank=True, default="")
    email = models.EmailField(
        max_length=255,
        validators=[validate_email_custom],
        unique=True
    )

    has_patents = models.BooleanField(default=False)
    is_participant = models.BooleanField(default=False)
    is_active = models.BooleanField(default=False)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    technologies_used = models.CharField(max_length=255, blank=True, default="", help_text="Technologies used in the project, comma-separated")
    milestones = models.JSONField(default=dict, blank=True, help_text="Project milestones or roadmap")


    def clean(self):
        """
        Validates the Project instance.

        - Current funding must not exceed the funding goal.
        - Business plan is required if the project is in progress or completed.
        - Funding goal is required if the project is marked as a participant.

        Raises:
            ValidationError: A dictionary of field-specific error messages.
        """
        errors = {}

        if self.funding_goal is not None and self.current_funding > self.funding_goal:
            errors['current_funding'] = 'Current funding cannot exceed funding goal.'

        if self.status in [ProjectStatus.IN_PROGRESS, ProjectStatus.COMPLETED] and not self.business_plan:
            errors['business_plan'] = 'Business plan is required for projects in progress or completed.'

        if self.is_participant and not self.funding_goal:
            errors['funding_goal'] = 'Funding goal is required for participant projects.'

        if errors:
            raise ValidationError(errors)

    def __str__(self):
        return f"Project '{self.title}' by {self.startup}"

    class Meta:
        db_table = 'projects'
        ordering = ['-created_at']
        verbose_name = 'Project'
        verbose_name_plural = 'Projects'
        indexes = [
            models.Index(fields=['status'], name='project_status_idx'),
            models.Index(fields=['created_at'], name='project_created_at_idx'),
            models.Index(fields=['startup'], name='project_startup_idx'),
        ]
        constraints = [
            models.UniqueConstraint(fields=['title', 'startup'], name='unique_startup_project_title')
        ]
class ProjectHistory(models.Model):
    """
    Stores a history of changes for the Project model.
    """
    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='history')
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)
    changed_fields = models.JSONField()
    timestamp = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = "project_history"
        ordering = ['-timestamp']
        verbose_name = "Project History"
        verbose_name_plural = "Project Histories"

    def __str__(self):
        return f"History for {self.project.title} at {self.timestamp}"
</file>

<file path="projects/serializers.py">
from decimal import Decimal
from django.db import transaction
from django.db.models import F
from rest_framework import serializers
from projects.models import Project, Category
from startups.models import Startup
from common.enums import ProjectStatus
from django_elasticsearch_dsl_drf.serializers import DocumentSerializer
from projects.documents import ProjectDocument
from startups.serializers.startup_project import StartupProjectSerializer
from utils.get_field_value import get_field_value

from investments.models import Subscription


class CategorySerializer(serializers.ModelSerializer):
    """Read-only serializer for category details."""

    class Meta:
        model = Category
        fields = ['id', 'name', 'description']


class ProjectReadSerializer(serializers.ModelSerializer):
    """
    Serializer for reading Project with nested related objects,
    including custom fields for startup details.
    """
    id = serializers.IntegerField(read_only=True)
    category = CategorySerializer(read_only=True)
    startup = StartupProjectSerializer(read_only=True)
    status_display = serializers.SerializerMethodField()
    startup_name = serializers.SerializerMethodField()
    startup_logo = serializers.SerializerMethodField()

    class Meta:
        model = Project
        fields = [
            'id', 'startup', 'startup_name', 'startup_logo', 'title', 'description',
            'business_plan', 'media_files', 'status', 'status_display', 'duration',
            'funding_goal', 'current_funding', 'category', 'website', 'email',
            'has_patents', 'is_participant', 'is_active', 'created_at', 'updated_at'
        ]
        read_only_fields = fields

    def get_status_display(self, obj):
        return ProjectStatus(obj.status).label if obj.status else None

    def get_startup_name(self, obj):
        """Returns the name of the associated startup."""
        return obj.startup.company_name if obj.startup else None

    def get_startup_logo(self, obj):
        """Returns the URL of the startup's logo."""
        request = self.context.get('request')
        if obj.startup and obj.startup.logo:
            return request.build_absolute_uri(obj.startup.logo.url)
        return None


class ProjectWriteSerializer(serializers.ModelSerializer):
    """
    Serializer for creating/updating Project with validation.
    Ensures required fields match the model and cross-field rules are enforced.
    """
    id = serializers.IntegerField(read_only=True)
    startup_id = serializers.PrimaryKeyRelatedField(
        queryset=Startup.objects.all(),
        source='startup'
    )
    category_id = serializers.PrimaryKeyRelatedField(
        queryset=Category.objects.all(),
        source='category'
    )

    funding_goal = serializers.DecimalField(
        max_digits=20,
        decimal_places=2,
        required=True
    )
    current_funding = serializers.DecimalField(
        max_digits=20,
        decimal_places=2,
        default=Decimal('0.00'),
        required=False
    )

    class Meta:
        model = Project
        fields = [
            'id', 'startup_id', 'title', 'description', 'business_plan',
            'media_files', 'status', 'duration',
            'funding_goal', 'current_funding', 'category_id', 'website',
            'email', 'has_patents', 'is_participant', 'is_active',
            'created_at', 'updated_at', 'technologies_used', 'milestones'
        ]
        read_only_fields = ('startup_id',)

    def validate_funding_goal(self, value):
        """
        Ensure funding_goal is a positive decimal with at most 20 digits.
        """
        if len(str(value).replace('.', '').replace('-', '')) > 20:
            raise serializers.ValidationError('Funding goal is too large.')
        if value <= 0:
            raise serializers.ValidationError('Funding goal must be greater than 0.')
        return value

    def validate(self, data):
        """
        Cross-field validation for Project.
        - current_funding must not exceed funding_goal
        - business_plan required for in_progress or completed
        - funding_goal required if is_participant is True
        """
        getattr(self, 'instance', None)
        funding_goal = get_field_value(self, data, 'funding_goal')
        current_funding = get_field_value(self, data, 'current_funding') or Decimal('0.00')
        business_plan = get_field_value(self, data, 'business_plan')
        status = get_field_value(self, data, 'status')
        is_participant = get_field_value(self, data, 'is_participant') or False
        errors = {}

        if funding_goal is not None and Decimal(str(current_funding)) > Decimal(str(funding_goal)):
            errors['current_funding'] = 'Current funding cannot exceed funding goal.'

        if funding_goal is not None and current_funding >= funding_goal and not business_plan:
            errors['business_plan'] = 'Business plan is required when funding goal is reached.'

        if status in [ProjectStatus.IN_PROGRESS, ProjectStatus.COMPLETED] and not business_plan:
            errors['business_plan'] = 'Business plan is required for projects in progress or completed.'

        if is_participant and funding_goal is None:
            errors['funding_goal'] = 'Funding goal is required for participant projects.'

        if errors:
            raise serializers.ValidationError(errors)

        return data

class ProjectDocumentSerializer(DocumentSerializer):
    """
    Serializer for the Elasticsearch ProjectDocument.
    """

    class Meta:
        document = ProjectDocument
        fields = ('id', 'title', 'description', 'status', 'startup', 'category')
</file>

<file path="search/admin.py">
from django.contrib import admin

# Register your models here.
</file>

<file path="search/apps.py">
from django.apps import AppConfig

class SearchConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "search"
</file>

<file path="search/models.py">
from django.db import models

# Create your models here.
</file>

<file path="search/views.py">
from rest_framework.generics import ListAPIView
from django_elasticsearch_dsl.search import Search
from elasticsearch_dsl.query import Q
from startups.models import Startup
from projects.models import Project
from .documents import StartupDocument, ProjectDocument
from .serializers import StartupSearchSerializer, ProjectSearchSerializer


class StartupSearchView(ListAPIView):
    serializer_class = StartupSearchSerializer

    def get_queryset(self):
        query = self.request.query_params.get("q", "")
        if not query:
            return Startup.objects.none()

        search = StartupDocument.search().query(
            Q("multi_match", query=query, fields=["company_name", "description", "stage"])
        )
        ids = [hit.id for hit in search]
        return Startup.objects.filter(id__in=ids)


class ProjectSearchView(ListAPIView):
    serializer_class = ProjectSearchSerializer

    def get_queryset(self):
        query = self.request.query_params.get("q", "")
        if not query:
            return Project.objects.none()

        search = ProjectDocument.search().query(
            Q("multi_match", query=query, fields=["title", "description", "status"])
        )
        ids = [hit.id for hit in search]
        return Project.objects.filter(id__in=ids)
</file>

<file path="startups/migrations/0003_alter_startup_company_name_alter_startup_stage.py">
# Generated by Django 5.2.4 on 2025-08-29 22:38

import validation.validate_names
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('startups', '0002_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='startup',
            name='company_name',
            field=models.CharField(
                max_length=254,
                unique=True,
                validators=[
                    validation.validate_names.validate_company_name,
                    validation.validate_names.validate_latin
                ]
            ),
        ),
        migrations.AlterField(
            model_name='startup',
            name='stage',
            field=models.CharField(
                choices=[
                    ('idea', 'Idea'),
                    ('mvp', 'MVP'),
                    ('seed', 'Seed'),
                    ('launch', 'Launch'),
                    ('scale', 'Scale'),
                    ('exit', 'Exit')
                ],
                default='idea',
                help_text='Current development stage of the startup',
                max_length=20,
                verbose_name='Development Stage'
            ),
        ),
    ]
</file>

<file path="tests/elasticsearch/test_project_elasticsearch.py">
from django.urls import reverse
from elasticsearch_dsl import Index
from rest_framework import status
from projects.documents import ProjectDocument
from tests.elasticsearch.setup_tests_data import BaseElasticsearchAPITestCase
from rest_framework.test import APIClient


class ProjectElasticsearchTests(BaseElasticsearchAPITestCase):
    """
    Test suite for Project Elasticsearch integration and API behavior,
    using factory-based setup from ProjectTestSetupMixin.
    Includes tests for search, filters, validation, permissions, and edge cases.
    """

    def setUp(self):
        """ Create the Elasticsearch index and allow ES to index the documents. """
        super().setUp()
        self.index = Index('projects')
        try:
            self.index.delete()
        except:
            pass
        self.index.create()
        ProjectDocument._doc_type.mapping.save('projects')
        for project in [self.project1, self.project2]:
            ProjectDocument().update(project)
        ProjectDocument._index.refresh()

    def tearDown(self):
        """
        Delete Elasticsearch index after each test to clean up.
        """
        try:
            self.index.delete()
        except:
            pass

    def test_combined_filters_work_correctly(self):
        url = reverse('project-document-list')
        response = self.client.get(url, {
            'category.name': 'Tech',
            'startup.company_name': 'Fintech Solutions'
        })
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]['title'], "First Test Project")

    def test_empty_query_returns_all_projects(self):
        """
        Test that querying the project list with no filters
        returns all existing projects with HTTP 200 OK.
        """
        url = reverse('project-list')
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 2)

    def test_no_results_for_non_existent_title(self):
        """
        Test that searching for a non-existent project title
        returns an empty list with HTTP 200 OK.
        """
        url = reverse('project-list')
        response = self.client.get(url, {'search': 'nonexistent_project'})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 0)

    def test_invalid_filter_field_returns_bad_request(self):
        """
        Test that using an invalid filter field returns HTTP 400 Bad Request.
        """
        url = reverse('project-document-list')
        response = self.client.get(url, {'nonexistent_field': 'value'})
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)

    def test_create_project_missing_required_fields(self):
        """
        Test that creating a project without required fields
        'title' and 'email' results in HTTP 400 Bad Request
        with appropriate error messages.
        """
        url = reverse('project-list')
        data = {
            'startup_id': self.startup1.id,
            'funding_goal': '10000.00',
            'current_funding': '0.00',
            'category_id': self.category1.id,
        }
        response = self.client.post(url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('title', response.data)
        self.assertIn('email', response.data)

    def test_create_project_invalid_funding_goal(self):
        """
        Test that creating a project with a negative funding goal
        returns HTTP 400 Bad Request with error for 'funding_goal'.
        """
        url = reverse('project-list')
        data = {
            'startup_id': self.startup1.id,
            'title': 'Invalid Funding',
            'funding_goal': '-500',
            'current_funding': '0.00',
            'category_id': self.category1.id,
            'email': 'invalidfunding@example.com',
        }
        response = self.client.post(url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('funding_goal', response.data)

    def test_permission_denied_for_other_user_update(self):
        """
        Test that the authenticated user cannot update a project
        belonging to another user, receiving HTTP 403 Forbidden.
        """
        project = self.project2  # belongs to user2
        url = reverse('project-detail', args=[project.pk])
        data = {'title': 'Unauthorized Update'}
        response = self.client.patch(url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    def test_permission_denied_for_unauthenticated_user_access(self):
        """Unauthenticated user should get 401 when accessing project list."""
        client = APIClient(enforce_csrf_checks=False)
        url = reverse('project-list')
        response = client.get(url)
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    def test_funding_goal_edge_case_large_value(self):
        """
        Test creating a project with an extremely large funding goal value.
        Accepts either success (201 Created) or validation failure (400 Bad Request)
        depending on validation rules.
        """
        url = reverse('project-list')
        data = {
            'startup_id': self.startup1.id,
            'title': 'Large Funding Goal',
            'funding_goal': '9999999999999999999999.99',
            'current_funding': '0.00',
            'category_id': self.category1.id,
            'email': 'largefund@example.com',
        }
        response = self.client.post(url, data, format='json')
        self.assertIn(response.status_code, [status.HTTP_201_CREATED, status.HTTP_400_BAD_REQUEST])

    def test_create_project_with_invalid_funding_goal_type(self):
        """
        Attempt to create a project with a funding_goal value that cannot be converted to Decimal.
        Expects HTTP 400 Bad Request with validation error on funding_goal.
        """
        url = reverse('project-list')
        data = {
            'startup_id': self.startup1.id,
            'title': 'Invalid Funding Type',
            'funding_goal': 'invalid_decimal',
            'current_funding': '0.00',
            'category_id': self.category1.id,
            'email': 'invalidtype@example.com',
        }
        response = self.client.post(url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('funding_goal', response.data)

    def test_current_funding_cannot_exceed_funding_goal(self):
        """
        Attempt to create a project where current_funding exceeds funding_goal.
        Expects HTTP 400 Bad Request with validation error on current_funding.
        """
        url = reverse('project-list')
        data = {
            'startup_id': self.startup1.id,
            'title': 'Funding Exceeded',
            'funding_goal': '1000.00',
            'current_funding': '2000.00',
            'category_id': self.category1.id,
            'email': 'fundingexceeded@example.com',
        }
        response = self.client.post(url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('current_funding', response.data)

    def test_update_project_startup_id_forbidden(self):
        """
        Attempt to update the startup_id of an existing project.
        Expects either an error response (HTTP 400 or 403) or that the field remains unchanged on HTTP 200.
        """
        project = self.project1
        url = reverse('project-detail', args=[project.pk])
        new_startup_id = self.startup2.id
        data = {'startup_id': new_startup_id}
        response = self.client.patch(url, data, format='json')

        self.assertIn(response.status_code,
                      [status.HTTP_400_BAD_REQUEST, status.HTTP_403_FORBIDDEN, status.HTTP_200_OK])

        if response.status_code == status.HTTP_200_OK:
            self.assertEqual(response.data['startup_id'], project.startup_id)

    def test_delete_nonexistent_project_returns_404(self):
        """
        Attempt to delete a project with a non-existent ID.
        Expects HTTP 404 Not Found response.
        """
        url = reverse('project-detail', args=[999999])
        response = self.client.delete(url)
        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)

    def test_search_partial_title_match_returns_results(self):
        """
        Search for projects by partial match in the title.
        Expects at least one project in the response matching the search term.
        """
        url = reverse('project-list')
        search_term = 'First Test'
        response = self.client.get(url, {'search': search_term})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertGreaterEqual(len(response.data), 1)
        self.assertTrue(any(search_term.lower() in proj['title'].lower() for proj in response.data))
</file>

<file path="tests/investments/test_serializer_create.py">
from decimal import Decimal, ROUND_DOWN
from common.enums import Stage
from investments.services.investment_share_service import recalculate_investment_shares, calculate_investment_share
from tests.test_base_case import BaseAPITestCase


class SubscriptionSerializerValidDataTests(BaseAPITestCase):
    """
    Tests for validating correct behavior of SubscriptionSerializer with valid input data.

    Includes tests for:
    - Typical valid subscription creation
    - Proper rounding of investment shares
    - Handling minimum boundary values
    - Cumulative rounding effects over multiple subscriptions
    """

    def test_subscription_serializer_valid_data(self):
        """Validate serializer with typical valid data."""
        data = self.get_subscription_data(self.investor1, self.project, 250.00)
        serializer = self.serializer_with_user(data, self.investor1.user)
        is_valid = serializer.is_valid()
        if not is_valid:
            print("Validation errors:", serializer.errors)
        self.assertTrue(is_valid, f"Serializer validation failed: {serializer.errors}")

    def test_valid_subscription_creation(self):
        """Test creating a valid subscription with proper amount and investment share."""
        data = self.get_subscription_data(self.investor1, self.project, Decimal("250.00"))
        serializer = self.serializer_with_user(data, self.investor1.user)
        is_valid = serializer.is_valid()
        if not is_valid:
            for field, errors in serializer.errors.items():
                print(f"Validation errors in field '{field}': {errors}")
        self.assertTrue(is_valid, "Serializer validation failed")
        subscription = serializer.save()
        recalculate_investment_shares(self.project)
        subscription.refresh_from_db()
        expected_share = calculate_investment_share(subscription.amount, self.project.funding_goal)
        self.assertAlmostEqual(float(subscription.amount), 250.00, places=2)
        self.assertAlmostEqual(float(subscription.investment_share), float(expected_share), places=2)

    def test_rounding_of_investment_share(self):
        """ Test that the investment_share is correctly rounded for typical decimal amounts. """
        data = self.get_subscription_data(self.investor1, self.project, 333.33)
        serializer = self.serializer_with_user(data, self.investor1.user)
        self.assertTrue(serializer.is_valid(), serializer.errors)
        subscription = serializer.save()
        expected_share = (Decimal("333.33") / self.project.funding_goal * 100).quantize(Decimal("0.01"),
                                                                                        rounding=ROUND_DOWN)
        self.assertEqual(subscription.investment_share, expected_share)

    def test_minimum_amount_boundary(self):
        """
        Test that the minimum allowed amount (0.01) is accepted and investment_share calculated correctly.
        """
        data = self.get_subscription_data(self.investor1, self.project, 0.01)
        serializer = self.serializer_with_user(data, self.investor1.user)
        self.assertTrue(serializer.is_valid(), serializer.errors)
        subscription = serializer.save()
        expected_share = (Decimal("0.01") / self.project.funding_goal * 100).quantize(Decimal("0.01"))
        self.assertEqual(subscription.investment_share, expected_share)

    def test_cumulative_rounding_errors(self):
        """
        Test multiple small investments that individually round but together should not exceed funding goal.
        """
        self.project.funding_goal = Decimal("100.00")
        self.project.save()
        increments = [Decimal("33.33"), Decimal("33.33"), Decimal("33.34")]
        subscriptions = []
        for i, amount in enumerate(increments, start=1):
            investor = getattr(self, f'investor{i}', None)
            if not investor:
                user = self.get_or_create_user(f"user{i}@example.com", f"Investor{i}", "Test")
                investor = self.get_or_create_investor(
                    user=user,
                    company_name=f"Investor {i}",
                    fund_size="1000000.00",
                    stage=Stage.SCALE
                )
                setattr(self, f'investor{i}', investor)
            data = self.get_subscription_data(investor, self.project, amount)
            serializer = self.serializer_with_user(data, investor.user)
            self.assertTrue(serializer.is_valid(), serializer.errors)
            subscription = serializer.save()
            subscriptions.append(subscription)
        recalculate_investment_shares(self.project)
        total_share = Decimal("0.00")
        for sub in subscriptions:
            sub.refresh_from_db()
            total_share += sub.investment_share
        self.assertLessEqual(total_share, Decimal("100.00"))
        self.assertGreaterEqual(total_share, Decimal("99.99"))


class SubscriptionSerializerAmountValidationTests(BaseAPITestCase):
    """
    Tests focusing on validation errors related to the 'amount' field
    in SubscriptionSerializer, such as missing, negative, or zero amounts.
    """

    def test_missing_amount_field(self):
        """Ensure serializer rejects subscription missing the 'amount' field."""
        data = self.get_subscription_data(self.investor1, self.project, 250.00)
        data.pop("amount")
        serializer = self.serializer_with_user(data, self.investor1.user)
        self.assertFalse(serializer.is_valid())
        self.assertIn("amount", serializer.errors)
        self.assertTrue(
            any("required" in str(msg).lower() for msg in serializer.errors["amount"]),
            f"Expected 'required' error message for missing amount, got: {serializer.errors['amount']}"
        )

    def test_negative_amount_is_rejected(self):
        """Ensure negative subscription amounts are rejected."""
        data = self.get_subscription_data(self.investor1, self.project, -100.00)
        serializer = self.serializer_with_user(data, self.investor1.user)
        self.assertFalse(serializer.is_valid())
        self.assertIn("amount", serializer.errors)
        error_messages = serializer.errors["amount"]
        self.assertTrue(
            any("greater than or equal to" in str(msg).lower() for msg in error_messages),
            f"Expected 'amount' error message about positive value, got: {error_messages}"
        )

    def test_zero_amount_is_rejected(self):
        """Ensure zero subscription amount is rejected."""
        data = self.get_subscription_data(self.investor1, self.project, 0.00)
        serializer = self.serializer_with_user(data, self.investor1.user)
        self.assertFalse(serializer.is_valid())
        self.assertIn("amount", serializer.errors)
        error_messages = serializer.errors["amount"]
        self.assertTrue(
            any("greater than or equal to" in str(msg).lower() for msg in error_messages),
            f"Expected error message about amount being greater than 0, got: {error_messages}"
        )


class SubscriptionSerializerInvestmentConstraintsTests(BaseAPITestCase):
    """Tests enforcing business logic and investment constraints for Subscriptions."""

    def test_self_investment_rejected(self):
        """Reject self-investment where investor owns the project."""
        self.project.startup.user = self.investor1.user
        self.project.startup.save()
        data = self.get_subscription_data(self.investor1, self.project, Decimal("100.00"))
        serializer = self.serializer_with_user(data, self.investor1.user)
        self.assertFalse(serializer.is_valid())
        self.assertIn("non_field_errors", serializer.errors)
        error_messages = serializer.errors["non_field_errors"]
        self.assertTrue(
            any("cannot invest in their own" in str(msg).lower() for msg in error_messages),
            f"Expected self-investment error, got: {error_messages}"
        )

    def test_exceeds_funding_goal(self):
        """Reject subscription exceeding the funding goal."""
        amount1 = (self.project.funding_goal * Decimal("0.9")).quantize(Decimal("0.01"), rounding=ROUND_DOWN)
        amount2 = (self.project.funding_goal * Decimal("0.2")).quantize(Decimal("0.01"), rounding=ROUND_DOWN)
        self.get_or_create_subscription(
            investor=self.investor1,
            project=self.project,
            amount=amount1,
            investment_share=Decimal("90.00")
        )
        data = self.get_subscription_data(
            self.investor2,
            self.project,
            amount2
        )
        serializer = self.serializer_with_user(data, self.investor2.user)
        self.assertFalse(serializer.is_valid())
        self.assertIn("amount", serializer.errors)
        error_messages = serializer.errors["amount"]
        self.assertTrue(
            any("exceeds funding goal" in str(msg).lower() for msg in error_messages),
            f"Expected 'exceeds funding goal' error message, got: {error_messages}"
        )

    def test_sequential_subscriptions_exceeding_funding_goal(self):
        """Reject second subscription that pushes total above funding goal."""
        amount1 = (self.project.funding_goal * Decimal("0.6")).quantize(Decimal("0.01"), rounding=ROUND_DOWN)
        first_data = self.get_subscription_data(self.investor1, self.project, amount1)
        amount2 = (self.project.funding_goal * Decimal("0.5")).quantize(Decimal("0.01"), rounding=ROUND_DOWN)
        second_data = self.get_subscription_data(self.investor2, self.project, amount2)
        serializer1 = self.serializer_with_user(first_data, self.investor1.user)
        self.assertTrue(serializer1.is_valid(), serializer1.errors)
        serializer1.save()
        serializer2 = self.serializer_with_user(second_data, self.investor2.user)
        self.assertFalse(serializer2.is_valid())
        self.assertIn("amount", serializer2.errors)
        error_messages = serializer2.errors["amount"]
        self.assertTrue(
            any("exceeds funding goal" in str(msg).lower() for msg in error_messages),
            f"Expected 'exceeds funding goal' error message, got: {error_messages}"
        )

    def test_fully_funded_project_no_more_subscriptions(self):
        """Reject any subscriptions once project is fully funded."""
        self.get_or_create_subscription(
            investor=self.investor1,
            project=self.project,
            amount=self.project.funding_goal,
            investment_share=Decimal("100.00")
        )
        data = self.get_subscription_data(self.investor2, self.project, Decimal("1.00"))
        serializer = self.serializer_with_user(data, self.investor2.user)
        self.assertFalse(serializer.is_valid())
        self.assertTrue(
            "amount" in serializer.errors or "project" in serializer.errors,
            f"Expected validation error for fully funded project, got: {serializer.errors}"
        )
        error_messages = serializer.errors.get("amount", []) + serializer.errors.get("project", [])
        self.assertTrue(
            any("exceeds funding goal" in str(msg).lower() or "fully funded" in str(msg).lower()
                for msg in error_messages),
            f"Expected 'exceeds funding goal' error message, got: {error_messages}"
        )

    def test_total_investment_share_cannot_exceed_funding_goal(self):
        """Ensure total subscriptions do not exceed the project's funding goal."""
        self.get_or_create_subscription(
            investor=self.investor1,
            project=self.project,
            amount=Decimal("600000.00")
        )
        self.get_or_create_subscription(
            investor=self.investor2,
            project=self.project,
            amount=Decimal("300000.00")
        )
        user3 = self.get_or_create_user("inv3@example.com", "Investor", "Three")
        investor3 = self.get_or_create_investor(
            user=user3,
            company_name="Investor Three",
            fund_size=Decimal("5000000.00"),
            stage=Stage.LAUNCH
        )
        data = self.get_subscription_data(investor3, self.project, Decimal("200000.00"))
        serializer = self.serializer_with_user(data, investor3.user)
        self.assertFalse(serializer.is_valid())
        self.assertIn("amount", serializer.errors)
        error_messages = serializer.errors["amount"]
        self.assertTrue(
            any("exceeds funding goal" in str(msg).lower() for msg in error_messages),
            f"Expected 'exceeds funding goal' error message, got: {error_messages}"
        )
</file>

<file path="tests/investors/test_saved_startups_endpoints.py">
from django.contrib.auth import get_user_model
from django.contrib.auth.hashers import make_password
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase
from rest_framework.test import APIClient
from investors.models import Investor, SavedStartup
from startups.models import Startup, Industry, Location
from users.models import UserRole
from utils.authenticate_client import authenticate_client


class SavedStartupsEndpointsTests(APITestCase):
    """
    API endpoints under investors app:

    - GET    /api/investor/saved-startups/              -> list current investor's saved startups
      Query params supported:
        * status=watching|contacted|negotiating|passed
        * saved_after=<ISO datetime>, saved_before=<ISO datetime>
        * search=<substring of startup name/email>
        * ordering=saved_at|-saved_at|status|startup__company_name

    - DELETE /api/startups/<startup_id>/unsave/         -> idempotent unsave (200, {"deleted": true/false})
    """

    def setUp(self):
        User = get_user_model()

        # Role (create if missing)
        self.role_user, _ = UserRole.objects.get_or_create(role="user")

        # FK fixtures
        self.location = Location.objects.create(country="US", city="NYC", region="NY")
        self.industry = Industry.objects.create(name="FinTech")

        # Investor user (authenticated caller)
        self.user = User.objects.create(
            email="inv@example.com",
            password=make_password("Pass123!"),
            role=self.role_user,
        )
        self.investor = Investor.objects.create(
            user=self.user,
            industry=self.industry,
            company_name="API Capital",
            location=self.location,
            email="api.capital@example.com",
            founded_year=2020,
            team_size=5,
            stage="mvp",
            fund_size="1000000.00",
        )

        # Startup owners: IMPORTANT — different users for different startups
        self.owner1 = User.objects.create(
            email="owner1@example.com",
            password=make_password("Pass123!"),
            role=self.role_user,
        )
        self.owner2 = User.objects.create(
            email="owner2@example.com",
            password=make_password("Pass123!"),
            role=self.role_user,
        )

        # Two startups with different owners (avoid OneToOne user clash)
        self.startup1 = Startup.objects.create(
            user=self.owner1,
            industry=self.industry,
            company_name="Cool One",
            location=self.location,
            email="one@cool.com",
            founded_year=2020,
            team_size=10,
            stage="mvp",
        )
        self.startup2 = Startup.objects.create(
            user=self.owner2,
            industry=self.industry,
            company_name="Alpha Two",
            location=self.location,
            email="two@alpha.com",
            founded_year=2021,
            team_size=8,
            stage="mvp",
        )

        # Authenticate as investor
        authenticate_client(self.client, self.user)

        # Seed: investor already saved startup1
        SavedStartup.objects.create(
            investor=self.investor,
            startup=self.startup1,
            status="watching",
        )

        # URLs
        self.list_url = reverse("investor-saved-startups")
        self.unsave_url_1 = reverse("startup-unsave", kwargs={"startup_id": self.startup1.id})
        self.unsave_url_2 = reverse("startup-unsave", kwargs={"startup_id": self.startup2.id})

    def test_auth_required(self):
        """Both list and unsave require authentication -> 401 when anonymous."""
        client = APIClient()
        r1 = client.get(self.list_url)
        self.assertEqual(r1.status_code, status.HTTP_403_FORBIDDEN)

        r2 = client.delete(self.unsave_url_1)
        self.assertEqual(r2.status_code, status.HTTP_403_FORBIDDEN)

    def test_list_requires_investor_profile(self):
        """Non-investor user should get 403 (PermissionDenied in get_queryset)."""
        User = get_user_model()
        plain = User.objects.create_user(email="plain@ex.com", password="x", role=self.role_user)
        authenticate_client(self.client, plain)

        r = self.client.get(self.list_url)
        self.assertEqual(r.status_code, status.HTTP_403_FORBIDDEN)

    def test_list_returns_only_current_investor_and_supports_search_ordering(self):
        """List returns only current investor's rows + supports search/filter/ordering."""
        # Add second saved row for this investor to exercise filters/sorting
        SavedStartup.objects.create(
            investor=self.investor, startup=self.startup2, status="contacted"
        )

        # Default list
        r = self.client.get(self.list_url)
        self.assertEqual(r.status_code, status.HTTP_200_OK)
        data = r.json()
        self.assertEqual(len(data), 2)

        # Search by startup name (DRF SearchFilter)
        r = self.client.get(self.list_url + "?search=Alpha")
        self.assertEqual(r.status_code, status.HTTP_200_OK)
        data = r.json()
        self.assertEqual(len(data), 1)
        self.assertEqual(data[0]["startup_name"], "Alpha Two")

        # Filter by status
        r = self.client.get(self.list_url + "?status=watching")
        self.assertEqual(r.status_code, status.HTTP_200_OK)
        data = r.json()
        self.assertTrue(all(row["status"] == "watching" for row in data))

        # Ordering by startup name ascending
        r = self.client.get(self.list_url + "?ordering=startup__company_name")
        self.assertEqual(r.status_code, status.HTTP_200_OK)
        names = [row["startup_name"] for row in r.json()]
        self.assertEqual(names, sorted(names))

    def test_unsave_existing_returns_200_and_removes_row(self):
        """Unsave existing record -> 200 and row removed."""
        self.assertTrue(
            SavedStartup.objects.filter(investor=self.investor, startup=self.startup1).exists()
        )

        r = self.client.delete(self.unsave_url_1)
        self.assertEqual(r.status_code, status.HTTP_200_OK)
        body = r.json()
        self.assertEqual(body["startup_id"], self.startup1.id)
        self.assertFalse(body["saved"])
        self.assertTrue(body["deleted"])

        self.assertFalse(
            SavedStartup.objects.filter(investor=self.investor, startup=self.startup1).exists()
        )

    def test_unsave_not_existing_is_idempotent_returns_200_deleted_false(self):
        """Unsave for a startup not saved yet -> still 200, deleted=false (idempotent)."""
        # Ensure startup2 not saved
        self.assertFalse(
            SavedStartup.objects.filter(investor=self.investor, startup=self.startup2).exists()
        )

        r = self.client.delete(self.unsave_url_2)
        self.assertEqual(r.status_code, status.HTTP_200_OK)
        body = r.json()
        self.assertEqual(body["startup_id"], self.startup2.id)
        self.assertFalse(body["saved"])
        self.assertFalse(body["deleted"])
</file>

<file path="tests/investors/test_saved_startups.py">
from django.urls import reverse
from django.contrib.auth.hashers import make_password
from django.test import TransactionTestCase
from django.db import IntegrityError
from rest_framework import status
from rest_framework.test import APIClient
from investors.models import Investor, SavedStartup
from startups.models import Startup
from users.models import User, UserRole
from tests.test_base_case import BaseAPITestCase as BaseInvestorTestCase
from utils.authenticate_client import authenticate_client


class SavedStartupAPITests(BaseInvestorTestCase):
    def setUp(self):
        super().setUp()
        self.investor = Investor.objects.create(
            user=self.user,
            industry=self.industry,
            company_name="API Capital",
            location=self.location,
            email="api.capital@example.com",
            founded_year=2020,
            team_size=5,
            stage="mvp",
            fund_size="1000000.00",
        )
        role_user = UserRole.objects.get(role="user")
        self.startup_owner = User.objects.create(
            email="startup.owner@example.com",
            password=make_password("Pass123!"),
            first_name="Star",
            last_name="Tup",
            role=role_user,
        )
        self.startup = Startup.objects.create(
            user=self.startup_owner,
            industry=self.industry,
            company_name="Cool Startup",
            location=self.location,
            email="info@coolstartup.com",
            founded_year=2020,
            team_size=10,
            stage="mvp",
        )
        self.list_url = reverse("saved-startup-list")

    def test_investor_can_create_saved_startup(self):
        res = self.client.post(self.list_url, {"startup": self.startup.id, "status": "watching", "notes": "ok"}, format="json")
        self.assertEqual(res.status_code, status.HTTP_201_CREATED, res.data)
        self.assertEqual(SavedStartup.objects.count(), 1)
        obj = SavedStartup.objects.first()
        self.assertEqual(obj.investor, self.investor)
        self.assertEqual(obj.startup, self.startup)
        self.assertEqual(res.data["investor"], self.investor.id)
        self.assertNotIn("startup", res.data)
        if "startup_name" in res.data:
            self.assertEqual(res.data["startup_name"], self.startup.company_name)

    def test_create_fails_when_startup_missing(self):
        res = self.client.post(self.list_url, {}, format="json")
        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST, res.data)
        self.assertIn("startup", res.data)

    def test_create_fails_when_startup_invalid(self):
        res = self.client.post(self.list_url, {"startup": 999999}, format="json")
        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST, res.data)
        self.assertIn("startup", res.data)

    def test_investor_cannot_save_own_startup(self):
        own = Startup.objects.create(
            user=self.user,
            industry=self.industry,
            company_name="My Own",
            location=self.location,
            email="me@own.com",
            founded_year=2024,
            team_size=1,
            stage="idea",
        )
        res = self.client.post(self.list_url, {"startup": own.id}, format="json")
        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST, res.data)
        self.assertIn("You cannot save your own startup", str(res.data))

    def test_cannot_save_duplicate(self):
        SavedStartup.objects.create(investor=self.investor, startup=self.startup, status="watching")
        res = self.client.post(self.list_url, {"startup": self.startup.id}, format="json")
        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST, res.data)
        self.assertIn("Already saved", str(res.data))

    def test_only_investor_can_save(self):
        role_user = UserRole.objects.get(role="user")
        plain_user = User.objects.create(
            email="plain@example.com",
            password=make_password("Pass123!"),
            first_name="No",
            last_name="Investor",
            role=role_user,
        )
        authenticate_client(self.client, plain_user)
        res = self.client.post(self.list_url, {"startup": self.startup.id}, format="json")
        self.assertEqual(res.status_code, status.HTTP_403_FORBIDDEN, res.data)
        self.assertIn("you do not have permission to perform this action.", str(res.data['detail']).lower())

    def test_auth_required_on_list(self):
        client = APIClient()
        res = client.get(self.list_url)
        self.assertEqual(res.status_code, status.HTTP_403_FORBIDDEN)

    def test_auth_required_on_create(self):
        client = APIClient()
        res = client.post(self.list_url, {"startup": self.startup.id}, format="json")
        self.assertEqual(res.status_code, status.HTTP_403_FORBIDDEN)

    def test_list_only_current_investor(self):
        role_user = UserRole.objects.get(role="user")
        other_user = User.objects.create(
            email="investor2@example.com",
            password=make_password("Pass123!"),
            first_name="Petro",
            last_name="Second",
            role=role_user,
        )
        other_investor = Investor.objects.create(
            user=other_user,
            industry=self.industry,
            company_name="Another Capital",
            location=self.location,
            email="another.capital@example.com",
            founded_year=2021,
            team_size=3,
            stage="idea",
            fund_size="500000.00",
        )
        SavedStartup.objects.create(investor=other_investor, startup=self.startup, status="watching")
        my_obj = SavedStartup.objects.create(investor=self.investor, startup=self.startup, status="watching")
        res = self.client.get(self.list_url)
        self.assertEqual(res.status_code, status.HTTP_200_OK, res.data)
        self.assertEqual(len(res.data), 1)
        self.assertEqual(res.data[0]["id"], my_obj.id)
        self.assertEqual(res.data[0]["investor"], self.investor.id)

    def test_get_detail_returns_expected_fields(self):
        obj = SavedStartup.objects.create(investor=self.investor, startup=self.startup, status="watching", notes="hi")
        url = reverse("saved-startup-detail", args=[obj.id])
        res = self.client.get(url)
        self.assertEqual(res.status_code, status.HTTP_200_OK, res.data)
        self.assertEqual(res.data["id"], obj.id)
        self.assertEqual(res.data["investor"], self.investor.id)
        self.assertNotIn("startup", res.data)
        if "startup_name" in res.data:
            self.assertEqual(res.data["startup_name"], self.startup.company_name)
        self.assertIn("status", res.data)
        self.assertIn("notes", res.data)
        self.assertIn("saved_at", res.data)

    def test_patch_status(self):
        obj = SavedStartup.objects.create(investor=self.investor, startup=self.startup, status="watching")
        url = reverse("saved-startup-detail", args=[obj.id])
        res = self.client.patch(url, {"status": "contacted"}, format="json")
        self.assertEqual(res.status_code, status.HTTP_200_OK, res.data)
        obj.refresh_from_db()
        self.assertEqual(obj.status, "contacted")

    def test_invalid_status_choice(self):
        res = self.client.post(self.list_url, {"startup": self.startup.id, "status": "nope"}, format="json")
        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)

    def test_delete_saved(self):
        obj = SavedStartup.objects.create(investor=self.investor, startup=self.startup, status="watching")
        url = reverse("saved-startup-detail", args=[obj.id])
        res = self.client.delete(url)
        self.assertEqual(res.status_code, status.HTTP_204_NO_CONTENT, res.data)
        self.assertFalse(SavedStartup.objects.filter(id=obj.id).exists())

    def test_cannot_patch_savedstartup_of_another_investor(self):
        role_user = UserRole.objects.get(role="user")
        other_user = User.objects.create(
            email="other@example.com",
            password=make_password("Pass123!"),
            first_name="Other",
            last_name="Investor",
            role=role_user,
        )
        other_investor = Investor.objects.create(
            user=other_user,
            industry=self.industry,
            company_name="Other Capital",
            location=self.location,
            email="other.cap@example.com",
            founded_year=2021,
            team_size=3,
            stage="idea",
            fund_size="500000.00",
        )
        foreign_obj = SavedStartup.objects.create(investor=other_investor, startup=self.startup, status="watching")
        url = reverse("saved-startup-detail", args=[foreign_obj.id])
        res = self.client.patch(url, {"status": "contacted"}, format="json")
        self.assertEqual(res.status_code, status.HTTP_404_NOT_FOUND, res.data)

    def test_cannot_delete_savedstartup_of_another_investor(self):
        role_user = UserRole.objects.get(role="user")
        other_user = User.objects.create(
            email="other2@example.com",
            password=make_password("Pass123!"),
            first_name="Other2",
            last_name="Investor",
            role=role_user,
        )
        other_investor = Investor.objects.create(
            user=other_user,
            industry=self.industry,
            company_name="Other2 Capital",
            location=self.location,
            email="other2.cap@example.com",
            founded_year=2021,
            team_size=3,
            stage="idea",
            fund_size="500000.00",
        )
        foreign_obj = SavedStartup.objects.create(investor=other_investor, startup=self.startup, status="watching")
        url = reverse("saved-startup-detail", args=[foreign_obj.id])
        res = self.client.delete(url)
        self.assertEqual(res.status_code, status.HTTP_404_NOT_FOUND, res.data)
        self.assertTrue(SavedStartup.objects.filter(id=foreign_obj.id).exists())

    def test_cannot_change_investor_or_startup_via_patch(self):
        obj = SavedStartup.objects.create(investor=self.investor, startup=self.startup, status="watching")
        url = reverse("saved-startup-detail", args=[obj.id])
        payload = {"investor": 999999, "startup": 999999, "status": "contacted"}
        res = self.client.patch(url, payload, format="json")
        self.assertIn(res.status_code, (status.HTTP_200_OK, status.HTTP_400_BAD_REQUEST), res.data)
        obj.refresh_from_db()
        self.assertEqual(obj.investor_id, self.investor.id)
        self.assertEqual(obj.startup_id, self.startup.id)

    def test_create_without_notes_ok(self):
        res = self.client.post(self.list_url, {"startup": self.startup.id, "status": "watching"}, format="json")
        self.assertEqual(res.status_code, status.HTTP_201_CREATED, res.data)
        obj = SavedStartup.objects.get(id=res.data["id"])
        self.assertTrue(obj.notes in (None, ""))

    def test_patch_notes_to_null_or_empty(self):
        obj = SavedStartup.objects.create(investor=self.investor, startup=self.startup, status="watching", notes="x")
        url = reverse("saved-startup-detail", args=[obj.id])
        res = self.client.patch(url, {"notes": None}, format="json")
        self.assertEqual(res.status_code, status.HTTP_200_OK, res.data)
        obj.refresh_from_db()
        self.assertTrue(obj.notes in (None, ""))

    def test_only_investor_can_list(self):
        role_user = UserRole.objects.get(role="user")
        plain_user = User.objects.create(
            email="plain2@example.com",
            password=make_password("Pass123!"),
            first_name="No",
            last_name="Investor",
            role=role_user,
        )
        authenticate_client(self.client, plain_user)
        res = self.client.get(self.list_url)
        self.assertIn(res.status_code, (status.HTTP_400_BAD_REQUEST, status.HTTP_403_FORBIDDEN))

    def test_extra_fields_are_ignored_on_create(self):
        res = self.client.post(
            self.list_url,
            {"startup": self.startup.id, "status": "watching", "notes": "ok", "extra": "zzz"},
            format="json",
        )
        self.assertEqual(res.status_code, status.HTTP_201_CREATED, res.data)
        self.assertNotIn("extra", res.data)

    def test_duplicate_returns_400_not_500(self):
        SavedStartup.objects.create(investor=self.investor, startup=self.startup, status="watching")
        res = self.client.post(self.list_url, {"startup": self.startup.id, "status": "watching"}, format="json")
        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST, res.data)


class SavedStartupDBConstraintsTests(TransactionTestCase):
    reset_sequences = True

    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.role_user, _ = UserRole.objects.get_or_create(role="user")

    def setUp(self):
        from startups.models import Industry, Location
        self.industry = Industry.objects.create(name="IT")
        self.location = Location.objects.create(country="US", city="NYC", region="NY")
        self.user = User.objects.create(
            email="dbuser@example.com",
            password=make_password("Pass123!"),
            first_name="Db",
            last_name="User",
            role=self.role_user,
        )
        self.investor = Investor.objects.create(
            user=self.user,
            industry=self.industry,
            company_name="DB Capital",
            location=self.location,
            email="db.cap@example.com",
            founded_year=2020,
            team_size=5,
            stage="mvp",
            fund_size="1000000.00",
        )
        self.owner = User.objects.create(
            email="db.startup@example.com",
            password=make_password("Pass123!"),
            first_name="Db",
            last_name="Startup",
            role=self.role_user,
        )
        self.startup = Startup.objects.create(
            user=self.owner,
            industry=self.industry,
            company_name="DB Startup",
            location=self.location,
            email="db@startup.com",
            founded_year=2020,
            team_size=3,
            stage="mvp",
        )

    def test_unique_constraint_on_investor_startup(self):
        SavedStartup.objects.create(investor=self.investor, startup=self.startup, status="watching")
        with self.assertRaises(IntegrityError):
            SavedStartup.objects.create(investor=self.investor, startup=self.startup, status="contacted")
</file>

<file path="tests/projects/test_api.py">
from decimal import Decimal
from ddt import ddt, data, unpack
from django.urls import reverse
from rest_framework import status
from common.enums import ProjectStatus
from projects.models import Project
from tests.test_base_case import BaseAPITestCase
from rest_framework.test import APIClient


class ProjectAPICRUDTests(BaseAPITestCase):
    """
    API CRUD tests for the Project model.
    Uses TestDataMixin to set up required related data
    such as users, startups, industries, locations, and categories.
    """

    def get_project_data(self, **overrides):
        """
        Generate a default project payload for API requests.

        Args:
            **overrides: Optional fields to override defaults.

        Returns:
            dict: Dictionary representing project data for API calls.
        """
        data = {
            "startup_id": self.startup.id,
            "title": "Default Project",
            "funding_goal": "50000.00",
            "current_funding": "1000.00",
            "category_id": self.category.id,
            "email": "default@example.com",
        }
        data.update(overrides)
        return data

    def test_create_project(self):
        """
        Test creating a new project via POST request.
        Expects HTTP 201 status and verifies:
          - The created project's title matches the request.
          - The project is associated with the correct startup.
          - The funding_goal and current_funding are stored correctly.
          - The category is assigned correctly.
          - Default fields such as status are set appropriately.
        """
        url = reverse("project-list")
        self.startup.user = self.user
        self.startup.save()
        data = self.get_project_data(title="API Project", email="api@example.com")
        response = self.client.post(url, data, format="json")
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(response.data["title"], data["title"])
        self.assertEqual(response.data["startup_id"], self.startup.id)
        self.assertEqual(str(response.data["funding_goal"]), data["funding_goal"])
        self.assertEqual(str(response.data["current_funding"]), data["current_funding"])
        self.assertEqual(response.data["category_id"], self.category.id)
        self.assertIn("status", response.data)
        self.assertEqual(response.data["status"], ProjectStatus.DRAFT)
        self.assertEqual(response.data["email"], data["email"])
        self.assertIn("id", response.data)
        self.assertIn("created_at", response.data)
        self.assertIn("updated_at", response.data)

    def test_get_project_list(self):
        """
        Test retrieving a list of projects via GET request.
        Ensures HTTP 200 status and that the list contains at least one project.
        """
        self.get_or_create_project()
        url = reverse("project-list")
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertGreaterEqual(len(response.data), 1)

    def test_patch_project(self):
        """
        Test updating an existing project's title via PATCH request.
        Expects HTTP 200 status and verifies that the title changes.
        """
        self.startup.user = self.user
        self.startup.save()
        project = self.get_or_create_project(
            startup=self.startup,
            title="OriginalTitle",
            funding_goal=Decimal("10000.00"),
            current_funding=Decimal("1000.00"),
            category=self.category,
            email="userproject@example.com",
            status=ProjectStatus.DRAFT
        )
        url = reverse("project-detail", args=[project.pk])
        data = {"title": "UpdatedTitle"}
        response = self.client.patch(url, data, format="json")
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data["title"], data["title"])

    def test_delete_project(self):
        """
        Test deleting an existing project via DELETE request.
        Expects HTTP 204 No Content status.
        """
        self.startup.user = self.user
        self.startup.save()
        project = self.get_or_create_project(
            startup=self.startup,
            title="DeleteMe",
            funding_goal=Decimal("10000.00"),
            current_funding=Decimal("500.00"),
            category=self.category,
            email="delete@example.com",
            status=ProjectStatus.DRAFT
        )
        url = reverse("project-detail", args=[project.pk])
        response = self.client.delete(url)
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)


class ProjectAPIPermissionTests(BaseAPITestCase):
    """
    Test suite for verifying project-related API permissions.

    This class ensures that:
      - Unauthenticated users cannot create or list projects.
      - Authenticated users cannot update or delete projects owned by other users.
      - Access control rules are correctly enforced for different user roles.

    Uses TestDataMixin to generate test data for users, startups, industries,
    locations, categories, projects, and subscriptions.
    """

    def create_other_user_startup_project(self, project_title, project_email):
        """
        Create a project owned by a different user for permission tests.

        Args:
            project_title (str): Title of the project.
            project_email (str): Email associated with the project.

        Returns:
            Project: The created project instance owned by another user.
        """
        other_user = self.get_or_create_user('apiother@example.com', 'Api', 'Other')
        other_startup = self.get_or_create_startup(
            other_user,
            company_name='ListStartup',
            industry=self.industry,
            location=self.location
        )
        project = self.get_or_create_project(
            startup=other_startup,
            title=project_title,
            funding_goal=Decimal("10000.00"),
            current_funding=Decimal("500.00"),
            category=self.category,
            email=project_email,
            status=ProjectStatus.DRAFT
        )
        return project

    def test_unauthenticated_user_cannot_create_project(self):
        """
        Unauthenticated user should receive HTTP 401 Unauthorized
        when trying to create a project.
        """
        client = APIClient()
        url = reverse('project-list')
        data = {
            'startup_id': self.startup.id,
            'title': 'Unauthorized',
            'funding_goal': '50000.00',
            'current_funding': '1000.00',
            'category_id': self.category.id,
            'email': 'unauth@example.com',
        }
        response = client.post(url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    def test_unauthenticated_user_cannot_access_project_list(self):
        """
        Unauthenticated user should receive HTTP 401 Unauthorized
        when trying to access the project list.
        """
        client = APIClient()
        url = reverse('project-list')
        response = client.get(url)
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    def test_user_cannot_modify_other_users_project(self):
        """
        Ensure an authenticated user cannot update or delete a project
        owned by another user.

        Attempts to PATCH or DELETE should result in HTTP 403 Forbidden.
        """
        other_project = self.create_other_user_startup_project(
            project_title="OtherProject",
            project_email="otherproject@example.com"
        )
        url = reverse("project-detail", args=[other_project.pk])
        patch_response = self.client.patch(url, {"title": "HackedTitle"}, format="json")
        self.assertEqual(patch_response.status_code, status.HTTP_403_FORBIDDEN)

        delete_response = self.client.delete(url)
        self.assertEqual(delete_response.status_code, status.HTTP_403_FORBIDDEN)


@ddt
class ProjectAPIValidationTests(BaseAPITestCase):
    """
    Test suite for validating Project API input fields.

    This class uses parametrized tests (via DDT) to verify that:
      - Required fields are enforced.
      - Numeric fields have correct boundaries (e.g., funding_goal must be positive and reasonable).
      - Email fields are properly formatted.
      - Appropriate validation error messages are returned when invalid data is submitted.

    Each test asserts that:
      - The response status code is HTTP 400 Bad Request.
      - The response data contains an error for the specific field.
      - The error message includes an expected substring indicating the validation issue.
    """

    def get_project_data(self, **overrides):
        """
        Return a dictionary of default project data, optionally overridden by kwargs.

        Args:
            **overrides: Key-value pairs to override default data.

        Returns:
            dict: Project data dictionary.
        """
        data = {
            'startup_id': self.startup.id,
            'title': 'Default Project',
            'funding_goal': '50000.00',
            'current_funding': '1000.00',
            'category_id': self.category.id,
            'email': 'default@example.com',
        }
        data.update(overrides)
        return data

    @data(
        ('funding_goal', '1000000000000000000000000.00', 'too large'),
        ('funding_goal', '-1000.00', 'greater than'),
        ('funding_goal', '0.00', 'greater than'),
        ('email', 'invalid-email-format', 'valid'),
        ('title', None, 'required'),
        ('email', None, 'required'),
    )
    @unpack
    def test_field_validation(self, field_name, invalid_value, expected_error_fragment):
        """
        Parametrized test that verifies validation errors occur for various invalid inputs.

        Args:
            field_name (str): The field to test validation on.
            invalid_value (Any): The invalid value to assign to the field. If None, the field is omitted.
            expected_error_fragment (str): A substring expected to be found in the validation error message.

        The test asserts that:
            - The response status code is 400 Bad Request.
            - The response data contains an error for the given field.
            - The error message includes the expected error fragment.
        """
        url = reverse('project-list')
        self.startup.user = self.user
        self.startup.save()
        tested_data = self.get_project_data()
        if invalid_value is None:
            tested_data.pop(field_name, None)
        else:
            tested_data[field_name] = invalid_value

        response = self.client.post(url, tested_data, format='json')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn(field_name, response.data)

        errors = response.data.get(field_name, [])
        if not isinstance(errors, list):
            errors = [errors]

        self.assertTrue(
            any(
                expected_error_fragment in str(msg).lower()
                or 'ensure that there are no more than' in str(msg).lower()
                for msg in errors
            ),
            f"Expected validation error containing '{expected_error_fragment}' for field '{field_name}', got: {errors}"
        )
</file>

<file path="tests/projects/test_updates.py">
from django.urls import reverse
from rest_framework import status
from tests.test_base_case import BaseAPITestCase
from projects.models import ProjectHistory
from communications.models import Notification

class ProjectUpdateAPITests(BaseAPITestCase):

    def setUp(self):
        super().setUp()
        self.project = self.get_or_create_project(startup=self.startup)
        self.client.force_authenticate(user=self.startup_user)
        self.url = reverse("project-detail", args=[self.project.pk])

    def test_project_update_creates_history(self):
        """We verify that the update creates an entry in ProjectHistory."""
        self.assertEqual(ProjectHistory.objects.count(), 0)
        
        update_data = {'title': 'A Brand New Title'}
        response = self.client.patch(self.url, update_data, format="json")
        
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(ProjectHistory.objects.count(), 1)
        
        history = ProjectHistory.objects.first()
        self.assertEqual(history.project, self.project)
        self.assertEqual(history.user, self.startup_user)
        self.assertIn('title', history.changed_fields)
        self.assertEqual(history.changed_fields['title']['new'], 'A Brand New Title')

    def test_project_update_triggers_notification(self):
        """We verify that the update sends notifications to subscribed investors."""
        self.get_or_create_subscription(self.investor1, self.project, 100)
        self.assertEqual(Notification.objects.count(), 0)
        
        update_data = {'description': 'An updated description for investors.'}
        self.client.patch(self.url, update_data, format="json")

        notifications = Notification.objects.filter(
            user=self.investor1.user, 
            related_project_id=self.project.id
        )
        self.assertEqual(notifications.count(), 1)
        notification = notifications.first()
        self.assertEqual(notification.notification_type.code, 'project_updated')
</file>

<file path="tests/startups/test_api.py">
from django.urls import reverse
from rest_framework import status
from startups.models import Startup
from tests.test_base_case import BaseAPITestCase
from unittest.mock import patch
from rest_framework.test import APIClient
from django.core.exceptions import ValidationError as DjangoValidationError
from utils.authenticate_client import authenticate_client


class StartupAPITests(BaseAPITestCase):
    """
    Test suite for Startup API endpoints, including creation and retrieval of startups.
    """

    def setUp(self):
        super().setUp()
        self.client = APIClient()
        self.startup_data = {
            'company_name': 'Great',
            'team_size': 25,
            'user': self.user.pk,
            'industry': self.industry.pk,
            'location': self.location.pk,
            'founded_year': 2020,
            'email': 'great@example.com',
        }
        self.url = reverse('startup-list')

    @patch("users.permissions.IsStartupUser.has_permission", return_value=True)
    @patch("users.permissions.IsStartupUser.has_object_permission", return_value=True)
    def test_create_startup_success(self, mock_has_object_permission, mock_has_permission):
        """
        Test that a startup can be successfully created via POST request to the startup-list endpoint.
        Verifies that the response status is HTTP 201 Created and the returned data matches the input.
        """
        authenticate_client(self.client, self.user)
        response = self.client.post(self.url, self.startup_data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

        data = response.data
        self.assertEqual(data['company_name'], 'Great')
        self.assertEqual(data['team_size'], 25)
        self.assertEqual(data['founded_year'], 2020)
        self.assertEqual(data['email'], 'great@example.com')

        startup = Startup.objects.get(pk=data['id'])
        self.assertEqual(startup.user, self.user)

    @patch("users.permissions.IsStartupUser.has_permission", return_value=True)
    @patch("users.permissions.IsStartupUser.has_object_permission", return_value=True)
    def test_get_startup_list(self, mock_has_object_permission, mock_has_permission):
        """
        Test that the GET request to startup-list endpoint returns a list of startups,
        including at least one startup created in the test setup.
        Verifies response status is HTTP 200 OK and that at least one startup is returned.
        """
        authenticate_client(self.client, self.user)
        self.get_or_create_startup(
            user=self.user,
            company_name='ListStartup',
            industry=self.industry,
            location=self.location
        )
        url = reverse('startup-list')
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertGreaterEqual(len(response.data), 1)

    @patch("users.permissions.IsStartupUser.has_permission", return_value=True)
    @patch("users.permissions.IsStartupUser.has_object_permission", return_value=True)
    def test_create_startup_validation_error(self, mock_has_object_permission, mock_has_permission):
        """
        Ensure that creating a startup with invalid data (empty company_name)
        returns HTTP 400 Bad Request and includes the relevant validation error.
        """
        authenticate_client(self.client, self.user)
        data = self.startup_data.copy()
        data['company_name'] = ''
        response = self.client.post(self.url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('company_name', response.data)

    @patch("users.permissions.IsStartupUser.has_permission", return_value=True)
    @patch("users.permissions.IsStartupUser.has_object_permission", return_value=True)
    def test_filter_by_industry(self, mock_has_object_permission, mock_has_permission):
        """
        Verify that the industry filter correctly returns startups only
        within the specified industry and excludes others.
        """
        authenticate_client(self.client, self.user)
        startup1 = self.get_or_create_startup(
            user=self.user, industry=self.industry, location=self.location,
            company_name='IndustryA'
        )
        other_industry = self.get_or_create_industry(name='Machinery Building')
        other_user = self.get_or_create_user("greatemployee@example.com", "Great", "Employee")
        startup2 = self.get_or_create_startup(
            user=other_user,
            industry=other_industry,
            location=self.location,
            company_name='IndustryB'
        )
        response = self.client.get(self.url, {'industry': self.industry.pk})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        returned_names = [s['company_name'] for s in response.data]
        self.assertIn(startup1.company_name, returned_names)
        self.assertNotIn(startup2.company_name, returned_names)

    @patch("users.permissions.IsStartupUser.has_permission", return_value=True)
    @patch("users.permissions.IsStartupUser.has_object_permission", return_value=True)
    def test_search_by_company_name(self, mock_has_object_permission, mock_has_permission):
        """
        Ensure that searching by a partial company name returns the matching startups.
        """
        authenticate_client(self.client, self.user)
        self.get_or_create_startup(
            user=self.user, company_name='Searchable Startup',
            industry=self.industry, location=self.location
        )
        response = self.client.get(self.url, {'search': 'Searchable'})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertTrue(any('Searchable' in s['company_name'] for s in response.data))

    @patch("users.permissions.IsStartupUser.has_permission", return_value=True)
    @patch("users.permissions.IsStartupUser.has_object_permission", return_value=True)
    def test_retrieve_startup_detail(self, mock_has_object_permission, mock_has_permission):
        """
        Verify that retrieving a single startup by its ID returns
        the correct details and HTTP 200 OK.
        """
        authenticate_client(self.client, self.user)
        startup = self.get_or_create_startup(
            user=self.user, company_name='DetailStartup',
            industry=self.industry, location=self.location
        )
        url_detail = reverse('startup-detail', args=[startup.pk])
        response = self.client.get(url_detail)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['company_name'], 'DetailStartup')

    @patch("users.permissions.IsStartupUser.has_permission", return_value=True)
    @patch("users.permissions.IsStartupUser.has_object_permission", return_value=True)
    def test_update_startup_success(self, mock_has_object_permission, mock_has_permission):
        """
        Ensure that a full update (PUT) to a startup works and
        returns HTTP 200 OK with the updated data.
        """
        authenticate_client(self.client, self.user)
        startup = self.get_or_create_startup(
            user=self.user, company_name='OldName',
            industry=self.industry, location=self.location
        )
        url_detail = reverse('startup-detail', args=[startup.pk])
        data = {
            'company_name': 'UpdatedName',
            'team_size': 20,
            'user': self.user.pk,
            'industry': self.industry.pk,
            'location': self.location.pk,
            'founded_year': 2018,
            'email': 'updated@example.com'
        }
        response = self.client.put(url_detail, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['company_name'], 'UpdatedName')

    @patch("users.permissions.IsStartupUser.has_permission", return_value=True)
    @patch("users.permissions.IsStartupUser.has_object_permission", return_value=True)
    def test_partial_update_startup(self, mock_has_object_permission, mock_has_permission):
        """
        Ensure that a partial update (PATCH) to a startup works and
        returns HTTP 200 OK with the updated field.
        """
        authenticate_client(self.client, self.user)
        startup = self.get_or_create_startup(
            user=self.user, company_name='PartialUpdate',
            industry=self.industry, location=self.location
        )
        url_detail = reverse('startup-detail', args=[startup.pk])
        data = {'company_name': 'PartialUpdatedName'}
        response = self.client.patch(url_detail, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['company_name'], 'PartialUpdatedName')

    @patch("users.permissions.IsStartupUser.has_permission", return_value=True)
    @patch("users.permissions.IsStartupUser.has_object_permission", return_value=True)
    def test_update_startup_validation_error(self, mock_has_object_permission, mock_has_permission):
        """
        Verify that updating a startup with invalid data
        (empty company_name) returns HTTP 400 Bad Request with errors.
        """
        authenticate_client(self.client, self.user)
        startup = self.get_or_create_startup(
            user=self.user, company_name='ValidName',
            industry=self.industry, location=self.location
        )
        url_detail = reverse('startup-detail', args=[startup.pk])
        data = {'company_name': ''}
        response = self.client.patch(url_detail, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('company_name', response.data)

    @patch("users.permissions.IsStartupUser.has_permission", return_value=True)
    @patch("users.permissions.IsStartupUser.has_object_permission", return_value=True)
    def test_delete_startup(self, mock_has_object_permission, mock_has_permission):
        """
        Ensure that deleting a startup works, returns HTTP 204 No Content,
        and removes the object from the database.
        """
        authenticate_client(self.client, self.user)
        startup = self.get_or_create_startup(
            user=self.user, company_name='ToDelete',
            industry=self.industry, location=self.location
        )
        url_detail = reverse('startup-detail', args=[startup.pk])
        response = self.client.delete(url_detail)
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertFalse(Startup.objects.filter(pk=startup.pk).exists())

    @patch("users.permissions.IsStartupUser.has_permission", return_value=True)
    @patch("users.permissions.IsStartupUser.has_object_permission", return_value=True)
    def test_create_startup_user_is_ignored(self, mock_has_object_permission, mock_has_permission):
        """
        Even if a different user ID is passed in request,
        Startup should be created with request.user.
        """
        authenticate_client(self.client, self.user)
        other_user = self.get_or_create_user("fake@example.com", "Fake", "User")
        data = self.startup_data.copy()
        data['user'] = other_user.pk
        response = self.client.post(self.url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        startup = Startup.objects.get(pk=response.data['id'])
        self.assertEqual(startup.user, self.user)

    @patch('startups.models.Startup.clean', side_effect=DjangoValidationError({'non_field_errors': ['Invalid data']}))
    @patch("users.permissions.IsStartupUser.has_permission", return_value=True)
    @patch("users.permissions.IsStartupUser.has_object_permission", return_value=True)
    def test_create_startup_model_clean_error(self, mock_has_object_permission, mock_has_permission, mock_clean):
        """
        Simulate model validation error during creation.
        Should return HTTP 400.
        """
        authenticate_client(self.client, self.user)
        response = self.client.post(self.url, self.startup_data, format='json')

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('non_field_errors', response.data)
        self.assertEqual(response.data['non_field_errors'][0], 'Invalid data')

    def test_get_list_unauthenticated(self):
        """
        Unauthenticated request should return HTTP 401.
        """
        self.client.cookies.clear()

        response = self.client.get(self.url)
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    @patch("users.permissions.IsStartupUser.has_permission", return_value=True)
    @patch("users.permissions.IsStartupUser.has_object_permission", return_value=True)
    def test_update_startup_returns_updated_fields(self, mock_has_object_permission, mock_has_permission):
        """
        After update, API should return all updated fields correctly.
        """
        authenticate_client(self.client, self.user)
        startup = self.get_or_create_startup(
            user=self.user,
            company_name='InitialName',
            industry=self.industry,
            location=self.location
        )
        url_detail = reverse('startup-detail', args=[startup.pk])
        data = {
            'company_name': 'NewName',
            'team_size': 30,
            'user': self.user.pk,
            'industry': self.industry.pk,
            'location': self.location.pk,
            'founded_year': 2021,
            'email': 'new@example.com'
        }
        response = self.client.put(url_detail, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['company_name'], 'NewName')
        self.assertEqual(response.data['team_size'], 30)
        self.assertEqual(response.data['founded_year'], 2021)
        self.assertEqual(response.data['email'], 'new@example.com')
</file>

<file path="tests/startups/test_startup_preferences.py">
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase, APIClient
from tests.factories import StartupFactory, UserFactory
from tests.communications.factories import NotificationTypeFactory
from communications.models import UserNotificationPreference, NotificationType
from startups.models import Startup
from utils.authenticate_client import authenticate_client


class StartupNotificationPreferencesAPITests(APITestCase):
    """Integration tests for startup notification preferences API:
    verifies retrieval, channel toggles, per-type frequency updates, and permissions.
    """
    def setUp(self):
        """Prepare two active types, create a startup user, and authenticate the client."""
        self.notification_type1 = NotificationTypeFactory()
        self.notification_type2 = NotificationTypeFactory()

        self.startup = StartupFactory()
        self.user = self.startup.user

        authenticate_client(self.client, self.user)

    def test_get_preferences_creates_defaults(self):
        """GET initializes default channel flags and seeds per-type preferences."""
        url = reverse('startup-preferences')
        resp = self.client.get(url)
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        self.assertIn('enable_in_app', resp.data)
        self.assertIn('enable_email', resp.data)
        self.assertIn('enable_push', resp.data)
        self.assertIn('type_preferences', resp.data)
        pref = UserNotificationPreference.objects.get(user=self.user)
        self.assertEqual(pref.type_preferences.count(), NotificationType.objects.filter(is_active=True).count())

    def test_patch_channel_preferences(self):
        """PATCH updates enable_in_app/email/push channel toggles."""
        _ = self.client.get(reverse('startup-preferences'))

        url = reverse('startup-preferences')
        payload = {
            'enable_in_app': True,
            'enable_email': False,
            'enable_push': True,
        }
        resp = self.client.patch(url, payload, format='json')
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        self.assertTrue(resp.data['enable_in_app'])
        self.assertFalse(resp.data['enable_email'])
        self.assertTrue(resp.data['enable_push'])

    def test_update_type_preference_valid(self):
        """PATCH per-type preference sets a valid frequency value successfully."""
        pref_resp = self.client.get(reverse('startup-preferences'))
        self.assertEqual(pref_resp.status_code, status.HTTP_200_OK)

        pref = UserNotificationPreference.objects.get(user=self.user)
        type_pref = pref.type_preferences.first()

        url = reverse('startup-preferences-update-type')
        payload = {
            'notification_type_id': type_pref.notification_type.id,
            'frequency': 'daily_digest',
        }
        resp = self.client.patch(url, payload, format='json')
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        self.assertEqual(resp.data['frequency'], 'daily_digest')

    def test_update_type_preference_invalid_frequency(self):
        """Return 400 when frequency is invalid for a type preference update."""
        _ = self.client.get(reverse('startup-preferences'))
        pref = UserNotificationPreference.objects.get(user=self.user)
        type_pref = pref.type_preferences.first()

        url = reverse('startup-preferences-update-type')
        resp = self.client.patch(
            url,
            {'notification_type_id': type_pref.notification_type.id, 'frequency': 'invalid_freq'},
            format='json',
        )
        self.assertEqual(resp.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('frequency', resp.data)

    def test_update_type_preference_invalid_type_id_non_integer(self):
        """Return 400 when notification_type_id is not an integer."""
        _ = self.client.get(reverse('startup-preferences'))

        url = reverse('startup-preferences-update-type')
        resp = self.client.patch(
            url,
            {'notification_type_id': 'abc', 'frequency': 'immediate'},
            format='json',
        )
        self.assertEqual(resp.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('notification_type_id', resp.data)
        self.assertEqual(resp.data['notification_type_id'], ['A valid integer is required.'])

    def test_update_type_preference_not_found(self):
        """Return 404 when the user's seeded preferences do not include the requested type."""
        _ = self.client.get(reverse('startup-preferences'))

        another_type = NotificationTypeFactory()

        url = reverse('startup-preferences-update-type')
        resp = self.client.patch(
            url,
            {'notification_type_id': another_type.id, 'frequency': 'immediate'},
            format='json',
        )
        self.assertEqual(resp.status_code, status.HTTP_404_NOT_FOUND)
        self.assertEqual(resp.data.get('error'), 'Notification type preference not found')

    def test_permission_denied_for_non_startup_user(self):
        """Non-startup authenticated users are forbidden from accessing preference endpoints."""
        other_user = UserFactory.create()
        client = APIClient()
        authenticate_client(client, other_user)

        list_url = reverse('startup-preferences')
        resp = client.get(list_url)
        self.assertEqual(resp.status_code, status.HTTP_403_FORBIDDEN)

        update_url = reverse('startup-preferences-update-type')
        resp = client.patch(update_url, {}, format='json')
        self.assertEqual(resp.status_code, status.HTTP_403_FORBIDDEN)

    def tearDown(self):
        """Ensure DB cleanup to avoid cross-test contamination when using file-based SQLite."""
        UserNotificationPreference.objects.all().delete()
        NotificationType.objects.all().delete()
        Startup.objects.all().delete()
</file>

<file path="tests/users/test_resend_email.py">
import os
import uuid
import logging
from django.urls import reverse
from django.utils import timezone
from django.conf import settings
from rest_framework.test import APITestCase
from unittest.mock import patch
from users.models import User, UserRole
from utils.authenticate_client import authenticate_client

logger = logging.getLogger(__name__)
DEBUG_LOGS = os.environ.get("DEBUG_TEST_LOGS") == "1"

NON_EXISTENT_USER_ID = 999_999
ALLOWED_THROTTLE_REQUESTS = getattr(settings, "API_THROTTLE_LIMIT", 5)


class ResendEmailTests(APITestCase):

    @classmethod
    def setUpTestData(cls):
        cls.user_role, _ = UserRole.objects.get_or_create(role=UserRole.Role.USER)

    def setUp(self):
        self.user = self._create_test_user()
        if DEBUG_LOGS:
            logger.info("Created test user: %s", self.user.email)

    def _create_test_user(self, email=None, is_active=False, token='oldtoken'):
        return User.objects.create(
            email=email or f"user_{uuid.uuid4().hex[:10]}@example.com",
            first_name='Test',
            last_name='User',
            role=self.user_role,
            is_active=is_active,
            email_verification_token=token,
            email_verification_sent_at=timezone.now()
        )

    def perform_resend_email_test(self, target_user_id, expected_status=202, email=None, user_obj=None):
        url = reverse('resend-email')
        data = {'user_id': target_user_id}
        if email:
            data['email'] = email

        response = self.client.post(url, data, format='json')

        if user_obj:
            user_obj.refresh_from_db()

        self.assertEqual(response.status_code, expected_status)

        if expected_status == 202 and DEBUG_LOGS:
            logger.info("Received 202 response with detail: %s", response.data.get('detail'))

        return response

    @patch('users.views.email_views.ResendEmailView.throttle_classes', new=[])
    @patch('users.views.email_views.send_mail')
    @patch('users.views.email_views.EMAIL_VERIFICATION_TOKEN.make_token', return_value='newtoken')
    def test_resend_email_scenarios(self, mock_make_token, mock_send_mail):
        scenarios = [
            ("happy_path", None, True),
            ("email_override", "newemail@example.com", True),
            ("unknown_user", None, False),
        ]

        for scenario, email, send_mail_expected in scenarios:
            with self.subTest(scenario=scenario, email=email):
                if scenario == "unknown_user":
                    target_user_id = NON_EXISTENT_USER_ID
                    test_user = None
                else:
                    test_user = self._create_test_user(email=email)
                    target_user_id = test_user.user_id

                response = self.perform_resend_email_test(target_user_id, user_obj=test_user, email=email)

                if scenario != "unknown_user":
                    self.assertIn('verification email', response.data.get('detail', ''))

                if test_user:
                    self.assertTrue(test_user.email.endswith('@example.com'))
                    if email:
                        self.assertEqual(test_user.pending_email, email)
                    else:
                        self.assertIsNone(test_user.pending_email)

                if send_mail_expected:
                    self.assertIsNotNone(mock_send_mail.call_args)
                    _, kwargs = mock_send_mail.call_args
                    recipient_list = kwargs.get('recipient_list', [])
                    self.assertIsNotNone(recipient_list)
                    if email:
                        self.assertIn(email, recipient_list)
                else:
                    mock_send_mail.assert_not_called()

                mock_send_mail.reset_mock()

    @patch('users.views.email_views.ResendEmailView.throttle_classes', [])
    def test_bad_input_invalid_emails(self):
        invalid_emails = [
            "plainaddress",
            "@missingusername.com",
            "user@.com",
            "user@domain..com",
            "user@domain,com",
            "user@domain com",
        ]

        url = reverse('resend-email')

        for email in invalid_emails:
            with self.subTest(email=email):
                data = {'user_id': self.user.user_id, 'email': email}
                response = self.client.post(url, data, format='json')
                self.user.refresh_from_db()

                self.assertEqual(response.status_code, 400)
                self.assertIn('email', response.data)
                expected_error = 'Enter a valid email address.'
                errors = response.data['email']
                if isinstance(errors, list):
                    self.assertTrue(any(expected_error in str(e) for e in errors))
                else:
                    self.assertIn(expected_error, str(errors))
                self.assertTrue(self.user.email.startswith('user_'))
                if DEBUG_LOGS:
                    logger.info("Invalid email '%s' correctly rejected", email)

    @patch('users.views.email_views.send_mail')
    @patch('users.views.email_views.EMAIL_VERIFICATION_TOKEN.make_token', return_value='newtoken')
    def test_throttling_with_limit(self, mock_make_token, mock_send_mail):
        url = reverse('resend-email')
        data = {'user_id': self.user.user_id}
        authenticate_client(self.client, self.user)

        for i in range(ALLOWED_THROTTLE_REQUESTS):
            with self.subTest(request_number=i + 1):
                response = self.client.post(url, data, format='json')
                self.assertEqual(response.status_code, 202)
                self.user.refresh_from_db()
                self.assertTrue(self.user.email.startswith('user_'))
                if DEBUG_LOGS:
                    logger.info("Throttling test: request %d successful", i + 1)

        response = self.client.post(url, data, format='json')
        self.assertEqual(response.status_code, 429)
        self.assertEqual(mock_send_mail.call_count, ALLOWED_THROTTLE_REQUESTS)
        if DEBUG_LOGS:
            logger.info("Throttling limit reached as expected after %d requests", ALLOWED_THROTTLE_REQUESTS)

    @patch('users.views.email_views.ResendEmailView.throttle_classes', [])
    @patch('users.views.email_views.send_mail')
    def test_already_verified_user(self, mock_send_mail):
        active_user = self._create_test_user(
            email=f"active_{uuid.uuid4().hex[:10]}@example.com",
            is_active=True,
            token=None
        )
        if DEBUG_LOGS:
            logger.info("Already verified user created: %s", active_user.email)

        self.perform_resend_email_test(active_user.user_id, user_obj=active_user)
        mock_send_mail.assert_called_once()
        if DEBUG_LOGS:
            logger.info("Already verified user test: email send attempted but user already active")
</file>

<file path="tests/factories.py">
import factory
from decimal import Decimal
from django.contrib.auth import get_user_model

from investors.models import Investor
from projects.models import Project, Category
from startups.models import Startup, Industry, Location
from common.enums import Stage
from users.models import UserRole

User = get_user_model()


class UserRoleFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = UserRole
        django_get_or_create = ('role',)

    role = UserRole.Role.USER


class UserFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = User

    role = factory.SubFactory(UserRoleFactory)
    first_name = "John"
    last_name = "Doe"
    email = factory.Sequence(lambda n: f"user{n}@example.com")
    password = factory.PostGenerationMethodCall('set_password', 'password123')
    is_active = True


class IndustryFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = Industry

    name = factory.Sequence(lambda n: f'Industry{n}')


class LocationFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = Location

    country = "US"


class StartupFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = Startup

    user = factory.SubFactory(UserFactory)
    industry = factory.SubFactory(IndustryFactory)
    company_name = factory.Sequence(lambda n: f'Startup{n}')
    description = "Startup Description"
    location = factory.SubFactory(LocationFactory)
    email = factory.Sequence(lambda n: f'startup{n}@example.com')
    founded_year = 2020
    team_size = 10
    stage = Stage.MVP


class InvestorFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = Investor

    user = factory.SubFactory(UserFactory)
    industry = factory.SubFactory(IndustryFactory)
    company_name = factory.Sequence(lambda n: f'Investor{n}')
    description = "Investor Description"
    location = factory.SubFactory(LocationFactory)
    email = factory.Sequence(lambda n: f'investor{n}@example.com')
    founded_year = 2000
    team_size = 50
    stage = Stage.MVP


class CategoryFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = Category

    name = factory.Sequence(lambda n: f'Category{n}')


class ProjectFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = Project

    startup = factory.SubFactory(StartupFactory)
    title = factory.Sequence(lambda n: f'Project {n}')
    funding_goal = Decimal("10000.00")
    current_funding = Decimal("0.00")
    category = factory.SubFactory(CategoryFactory)
    email = factory.Sequence(lambda n: f'project{n}@example.com')
</file>

<file path="users/views/email_views.py">
# Python standard library
import logging
from urllib.parse import urljoin
from datetime import timedelta
from smtplib import SMTPException

# Django imports
from django.conf import settings
from django.core.exceptions import (
    ValidationError as DjangoValidationError,
    ImproperlyConfigured,
)
from django.core.mail import send_mail
from django.db import IntegrityError
from django.template.loader import render_to_string
from django.utils import timezone
from drf_spectacular.utils import extend_schema, OpenApiResponse

# Third-party imports
from rest_framework import status
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from rest_framework.throttling import ScopedRateThrottle
from rest_framework.views import APIView

# Local application imports
from users.constants import (
    ACTIVATION_EMAIL_TEMPLATE,
    SUPPORT_TEXT,
    EMAIL_VERIFICATION_TOKEN,
)
from users.models import User
from users.serializers.resend_email_serializer import ResendEmailSerializer

logger = logging.getLogger(__name__)


@extend_schema(
    tags=["Auth"],
    summary="Verify email address",
    responses={
        200: OpenApiResponse(description="Email verified"),
        400: OpenApiResponse(description="Invalid or expired verification link"),
    },
)
class VerifyEmailView(APIView):
    """Handle email verification."""
    permission_classes = [AllowAny]
    authentication_classes = []

    def get(self, request, user_id, token):
        """Handle email verification link."""
        try:
            user = User.objects.get(
                user_id=user_id,
                is_active=False,
                email_verification_token=token
            )

            # Check if token is expired (24 hours)
            token_expired = (
                    user.email_verification_sent_at is None or
                    (timezone.now() - user.email_verification_sent_at) > timedelta(hours=24)
            )

            if token_expired:
                logger.warning(f"Expired verification token for user {user.email}")
                return Response(
                    {'status': 'error', 'message': 'Verification link has expired.'},
                    status=status.HTTP_400_BAD_REQUEST
                )

            if user.pending_email:
                try:
                    user.confirm_pending_email()
                except DjangoValidationError as e:
                    if getattr(e, "code", None) == "no_pending_email":
                        logger.info(f"No pending email to confirm for {user.email}")
                        return Response(
                            {'status': 'success', 'message': 'Email is already verified.'},
                            status=status.HTTP_200_OK
                        )
                    else:
                        logger.warning(f"Failed to confirm pending email for {user.email}: {e}")
                        return Response(
                            {"status": "error", "message": str(e)},
                            status=status.HTTP_400_BAD_REQUEST
                        )
            else:
                user.is_active = True

            user.email_verification_token = None
            user.email_verification_sent_at = None
            user.save(update_fields=['is_active', 'email', 'email_verification_token', 'email_verification_sent_at'])

            logger.info(f"User {user.email} email verified successfully")
            return Response(
                {'status': 'success', 'message': 'Email verified successfully. You can now log in.'},
                status=status.HTTP_200_OK
            )
        except User.DoesNotExist:
            logger.warning(f"Invalid verification attempt with user_id: {user_id}")
            return Response(
                {'status': 'error', 'message': 'Invalid verification link.'},
                status=status.HTTP_400_BAD_REQUEST
            )

        except Exception as e:
            logger.error(f"Error during email verification: {str(e)}", exc_info=True)
            return Response(
                {'status': 'error', 'message': 'An error occurred during verification.'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


@extend_schema(
    tags=["Auth"],
    summary="Resend verification email",
    request=ResendEmailSerializer,
    responses={
        202: OpenApiResponse(description="If the account exists, a verification email has been sent"),
        400: OpenApiResponse(description="Missing or invalid data"),
    },
)
class ResendEmailView(APIView):
    """
    API view to resend the email verification link.

    This view allows users to request a new verification email to be sent to their
    registered or pending email address. It supports optional updating of the pending email
    and token generation. The response does not disclose whether the user exists
    for security reasons.

    Attributes:
        permission_classes (list): List of permission classes allowing unrestricted access.
        throttle_scope (str): Named scope for rate limiting resend email requests.
        throttle_classes (list): List of throttling classes applied to the view.
    """
    permission_classes = [AllowAny]
    authentication_classes = []
    throttle_scope = "resend_email"
    throttle_classes = [ScopedRateThrottle]
    serializer_class = ResendEmailSerializer

    def post(self, request):
        """
        Resend the email verification link to a user's email address.

        This view validates the input data, retrieves the user by `user_id`,
        updates the `pending_email` if a new one is provided, generates a new
        verification token if not supplied, constructs the verification URL,
        renders HTML and plain text email chat, sends the email, and returns
        a generic success response regardless of whether the user exists.

        The email is sent to `pending_email` if it exists; otherwise, the user's
        primary email is used. The response does not disclose whether the user
        exists for security reasons.

        Args:
            request (rest_framework.request.Request): DRF request object containing:
                - user_id (int): Required ID of the user.
                - email (str, optional): New pending email to update.
                - token (str, optional): Custom verification token to use.

        Returns:
            rest_framework.response.Response: HTTP 202 Accepted with a generic
            message indicating that if the account exists, a verification email
            has been sent.
        """
        serializer = ResendEmailSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        user_id = serializer.validated_data["user_id"]
        new_email = serializer.validated_data.get("email")
        token = serializer.validated_data.get("token")

        try:
            user = User.objects.get(user_id=user_id)
        except User.DoesNotExist:
            return Response(
                {"detail": "If the account exists, a verification email has been sent."},
                status=status.HTTP_202_ACCEPTED,
            )

        if new_email:
            normalized_email = new_email.strip().lower()
            user.pending_email = normalized_email

            try:
                user.save(update_fields=["pending_email"])
            except IntegrityError:
                logger.warning(f"Failed to update pending_email for user {user.user_id}: email already exists")

        email_to_send = user.pending_email or user.email
        if not email_to_send:
            logger.warning(f"User {user.user_id} has no valid email to send verification to.")
            return Response(
                {"detail": "Unable to send verification email due to missing email."},
                status=status.HTTP_400_BAD_REQUEST,
            )

        if not token:
            token = EMAIL_VERIFICATION_TOKEN.make_token(user)

        verification_url = settings.FRONTEND_ROUTES["verify_email"].format(
            user_id=user.user_id,
            token=token,
        )
        verify_url = urljoin(settings.FRONTEND_URL, verification_url)

        context = {
            'user': user,
            'verification_url': verify_url,
            'user_display_name': user.first_name or user.email,
            'support_text': SUPPORT_TEXT,
        }

        subject = "Confirm your email"
        html_message = render_to_string(ACTIVATION_EMAIL_TEMPLATE, context)
        plain_message = (
            f"Hello {context['user_display_name']},\n\n"
            f"Please verify your email by clicking the link below:\n{verify_url}\n\n"
            f"{context['support_text']}"
        )

        try:
            send_mail(
                subject=subject,
                message=plain_message,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[email_to_send],
                html_message=html_message,
                fail_silently=False,
            )
        except (ImproperlyConfigured, SMTPException) as e:
            logger.critical(
                f"Verification email send failed to {email_to_send}",
                exc_info=True
            )
            return Response(
                {"detail": "Internal server configuration error."},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )
        except Exception as e:
            logger.error(
                f"Verification email send failed to {email_to_send}: {e}",
                exc_info=True
            )
            return Response(
                {"detail": "If the account exists, a verification email has been sent."},
                status=status.HTTP_202_ACCEPTED,
            )

        return Response(
            {"detail": "If the account exists, a verification email has been sent."},
            status=status.HTTP_202_ACCEPTED,
        )
</file>

<file path="users/urls.py">
from django.urls import path
from users.views.auth_views import UserRegistrationView, MeView
from users.views.bind_company_view import CompanyBindingView
from users.views.email_views import VerifyEmailView, ResendEmailView
from users.views.oauth_view import OAuthTokenObtainPairView
from users.views.password_views import CustomPasswordResetView, CustomPasswordResetConfirmView
from users.views.token_views import (
    CustomTokenObtainPairView,
    CustomTokenRefreshView,
    LogoutView,
    CSRFTokenView
)

urlpatterns = [
    # Sign up
    path('register/', UserRegistrationView.as_view(), name='user_register'),

    # For CSRF-cookie
    path('csrf/', CSRFTokenView.as_view(), name='csrf_init'),

    # JWT Auth
    path('jwt/create/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('jwt/refresh/', CustomTokenRefreshView.as_view(), name='token_refresh'),
    path('logout/', LogoutView.as_view(), name='logout'),

    # Password reset
    path('password/reset/', CustomPasswordResetView.as_view(), name='custom_reset_password'),
    path('password/reset/confirm/', CustomPasswordResetConfirmView.as_view(), name='custom_reset_password_confirm'),

    # Get current user
    path("me/", MeView.as_view(), name="auth-me"),

    # Email verification
    path('verify-email/<int:user_id>/<str:token>/', VerifyEmailView.as_view(), name='verify-email'),

    # Resend verification email
    path('resend-email/', ResendEmailView.as_view(), name='resend-email'),

    # OAuth
    path('oauth/login/', OAuthTokenObtainPairView.as_view(), name='oauth_login'),

    # Bind company
    path('bind-company/', CompanyBindingView.as_view(), name='bind_company'),
]
</file>

<file path="utils/authenticate_client.py">
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.test import APIClient

from users.models import User


def authenticate_client(client: APIClient, user: User) -> None:
    """
    Authenticate a Django REST Framework test client using a JWT access token.

    This function generates a JWT access token for the given user and sets it
    as a cookie on the provided APIClient instance. It also forcibly authenticates
    the client with the given user.

    Args:
        client (APIClient): The DRF test client instance to authenticate.
        user (User): The Django user instance to authenticate as.

    Side Effects:
        - Sets the "access_token" cookie on the client.
        - Calls client.force_authenticate(user=user) to attach the user to the client.
    """
    token = RefreshToken.for_user(user).access_token
    client.cookies["access_token"] = str(token)
    client.force_authenticate(user=user)
</file>

<file path="validation/validate_token.py">
import jwt
from rest_framework_simplejwt.exceptions import InvalidToken, TokenError
from django.conf import settings


def safe_decode(token: str):
    """
    Safely decode a JWT and verify its signature and expiration.
    Raises InvalidToken or TokenExpired if the token is invalid or expired.
    """
    if not token or len(token.split(".")) != 3:
        raise InvalidToken("Token is malformed.")

    try:
        payload = jwt.decode(
            token,
            key=settings.SECRET_KEY,
            algorithms=["HS256"],
            options={"verify_exp": True}
        )
    except jwt.ExpiredSignatureError:
        raise TokenError("Token has expired.")
    except Exception as e:
        raise InvalidToken(f"Could not decode token: {str(e)}")

    return payload
</file>

<file path="chat/views/chat_views.py">
from asgiref.sync import async_to_sync
from channels.layers import get_channel_layer
from django.shortcuts import get_object_or_404
from rest_framework import generics, status
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from chat.documents import Room, Message
from users.cookie_jwt import CookieJWTAuthentication
from users.views.base_protected_view import CookieJWTProtectedView
from chat.serializers import RoomSerializer, MessageSerializer
from rest_framework.pagination import LimitOffsetPagination


class ConversationCreateView(generics.CreateAPIView):
    """
    Create a new conversation (Room).

    Endpoint:
        POST /api/conversations/

    Request body example:
        {
            "name": "friends_group",
            "is_group": true,
            "participants": ["user1", "user2", "user3"]
        }

    Response example:
        {
            "name": "friends_group",
            "is_group": true,
            "participants": ["user1", "user2", "user3"]
        }
    """
    authentication_classes = [CookieJWTAuthentication]
    permission_classes = [IsAuthenticated]
    serializer_class = RoomSerializer


class SendMessageView(CookieJWTProtectedView):
    """
    Send a new message within a conversation and broadcast it via WebSocket.

    Endpoint:
        POST /api/messages/

    Request body example:
        {
            "room": "friends_group",
            "sender_id": "user1",
            "text": "Hello everyone!"
        }

    Response example:
        {
            "room": "friends_group",
            "sender_id": "user1",
            "receiver_id": null,
            "text": "Hello everyone!",
            "timestamp": "2025-08-25T20:00:00Z",
            "is_read": false
        }
    """

    def post(self, request, *args, **kwargs):
        serializer = MessageSerializer(data=request.data)
        try:
            serializer.is_valid(raise_exception=True)
            message = serializer.save()
        except Exception as e:
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)

        channel_layer = get_channel_layer()
        room_name = message.room.name
        data = MessageSerializer(message).data

        async_to_sync(channel_layer.group_send)(
            f"chat_{room_name}",
            {"type": "chat_message", "message": data}
        )

        return Response(data, status=status.HTTP_201_CREATED)


class ConversationMessagesView(generics.ListAPIView):
    """
    Retrieve the list of messages in a conversation.

    Endpoint:
        GET /api/conversations/{room_name}/messages/

    Path parameter:
        room_name (str): Name of the conversation/room.

    Response example:
        [
            {
                "room": "friends_group",
                "sender_id": "user1",
                "receiver_id": null,
                "text": "Hello everyone!",
                "timestamp": "2025-08-25T20:00:00Z",
                "is_read": false
            },
            {
                "room": "friends_group",
                "sender_id": "user2",
                "receiver_id": "user1",
                "text": "Hi!",
                "timestamp": "2025-08-25T20:01:00Z",
                "is_read": false
            }
        ]
    """
    authentication_classes = [CookieJWTAuthentication]
    permission_classes = [IsAuthenticated]
    serializer_class = MessageSerializer
    pagination_class = LimitOffsetPagination

    def get_queryset(self):
        room_name = self.kwargs["room_name"]
        room = get_object_or_404(Room, name=room_name)
        return Message.objects.filter(room=room).order_by("timestamp")
</file>

<file path="chat/middlewares.py">
import logging
from http.cookies import SimpleCookie
from channels.db import database_sync_to_async
from django.contrib.auth.models import AnonymousUser
from validation.validate_token import safe_decode
from users.models import User

logger = logging.getLogger(__name__)


@database_sync_to_async
def get_user(user_id):
    """
    Retrieve a User instance by ID from the database asynchronously.

    Args:
        user_id (int): The ID of the user to fetch.

    Returns:
        User | AnonymousUser: Returns the User object if found,
                              otherwise returns an AnonymousUser.
    """
    try:
        return User.objects.get(id=user_id, is_active=True)
    except User.DoesNotExist:
        return AnonymousUser()


class WebSocketJWTAuthMiddleware:
    """
    ASGI middleware for authenticating WebSocket connections using JWT
    stored in an HttpOnly cookie.

    The middleware parses the 'access_token' cookie, validates the JWT using
    safe_decode, and sets scope["user"] to the authenticated user. If the
    token is missing or invalid, the WebSocket connection is closed with code 1008.
    """

    def __init__(self, app):
        """
        Initialize the middleware with the downstream ASGI app.

        Args:
            app: The ASGI application to wrap.
        """
        self.app = app

    async def __call__(self, scope, receive, send):
        """
        ASGI middleware entry point for WebSocket connections.

        Authenticates the WebSocket connection using a JWT access token stored
        in an HttpOnly cookie. If valid, attaches the authenticated user to
        `scope["user"]`. If the token is missing or invalid, closes the connection
        with code 1008 (policy violation).

        Args:
            scope (dict): ASGI connection scope containing headers and other metadata.
            receive (Callable): Coroutine to receive ASGI events.
            send (Callable): Coroutine to send ASGI events.

        Returns:
            Awaitable: Forwards the connection to the downstream ASGI app if
            authentication succeeds, otherwise closes the connection.
        """
        cookie_header = dict(scope["headers"]).get(b"cookie", b"").decode()
        cookies = SimpleCookie()
        cookies.load(cookie_header)

        token_cookie = cookies.get("access_token")
        if not token_cookie:
            logger.warning("WS connection rejected: no access_token cookie")
            await send({'type': 'websocket.close', 'code': 1008})
            return
        token = token_cookie.value

        try:
            payload = safe_decode(token)
            user_id = payload.get("user_id")
            if not user_id:
                raise ValueError("Token payload missing user_id")
            scope["user"] = await get_user(user_id)
        except Exception as e:
            logger.warning(f"WS connection rejected: invalid token. Error: {e}")
            await send({'type': 'websocket.close', 'code': 1008})
            return

        await self.app(scope, receive, send)
</file>

<file path="communications/services.py">
import logging
from typing import Optional

from django.contrib.auth import get_user_model
from projects.models import Project

from communications.models import (
    Notification,
    NotificationType,
    UserNotificationPreference,
    UserNotificationTypePreference,
    NotificationFrequency,
    NotificationChannel,
)

logger = logging.getLogger(__name__)
User = get_user_model()


def _get_user_pref(user: User) -> Optional[UserNotificationPreference]:
    try:
        return UserNotificationPreference.objects.get(user=user)
    except UserNotificationPreference.DoesNotExist:
        return None


def get_or_create_user_pref(user: User) -> UserNotificationPreference:
    """Return user's notification preferences, creating and seeding if absent.

    Seeds per-type preferences for active NotificationType objects using
    each type's default_frequency to avoid magic strings.
    """
    pref = _get_user_pref(user)
    if pref:
        return pref
    pref = UserNotificationPreference.objects.create(user=user)
    for ntype in NotificationType.objects.filter(is_active=True):
        UserNotificationTypePreference.objects.create(
            user_preference=pref,
            notification_type=ntype,
            frequency=ntype.default_frequency,
        )
    return pref


def _get_type_pref(pref: UserNotificationPreference, ntype: NotificationType) -> Optional[UserNotificationTypePreference]:
    return pref.type_preferences.filter(notification_type=ntype).first()


def _canonical_channel(channel: str) -> Optional[str]:
    """Normalize a channel string to a canonical value from NotificationChannel.

    Accepts variations like "in_app", "inapp", "in-app", "in app"; "email", "e-mail", "mail"; and
    "push", "push-notification", "push_notification".
    Returns one of NotificationChannel.IN_APP/EMAIL/PUSH or None if unknown.
    """
    s = str(channel or "").strip().lower()
    # unify spaces and hyphens to underscores
    s = s.replace(" ", "_").replace("-", "_")
    if s in {"in_app", "inapp"}:
        return NotificationChannel.IN_APP
    if s in {"email", "e_mail", "mail"}:
        return NotificationChannel.EMAIL
    if s in {"push", "push_notification", "pushnotification"}:
        return NotificationChannel.PUSH
    return None


def is_channel_enabled(user: User, channel: str) -> bool:
    """Return whether a channel ("in_app", "email", "push") is enabled for user.
    Falls back to True if preferences are missing (fail-open) to avoid blocking messages unintentionally.
    """
    pref = _get_user_pref(user)
    if not pref:
        return True
    normalized = _canonical_channel(channel)
    if normalized == NotificationChannel.IN_APP:
        return bool(pref.enable_in_app)
    if normalized == NotificationChannel.EMAIL:
        return bool(pref.enable_email)
    if normalized == NotificationChannel.PUSH:
        return bool(pref.enable_push)
    raise ValueError(f"Unknown notification channel: {channel}")


def is_type_allowed(user: User, ntype: NotificationType) -> bool:
    """True if the specific notification type is not disabled for user."""
    pref = _get_user_pref(user)
    if not pref:
        return True
    type_pref = _get_type_pref(pref, ntype)
    if not type_pref:
        return True
    return type_pref.frequency != NotificationFrequency.DISABLED


def create_in_app_notification(
    *,
    user: User,
    type_code: str,
    title: str,
    message: str,
    priority: Optional[str] = None,
    related_startup_id: Optional[int] = None,
    related_project_id: Optional[int] = None,
    related_message_id: Optional[int] = None,
    triggered_by_user: Optional[User] = None,
    triggered_by_type: Optional[str] = None,
) -> Optional[Notification]:
    """
    Create an in-app Notification only if user's preferences allow it.
    Returns the Notification instance or None if suppressed by preferences.
    """
    try:
        ntype = NotificationType.objects.get(code=type_code)
    except NotificationType.DoesNotExist:
        logger.warning("Unknown notification type code: %s", type_code)
        return None

    if not is_channel_enabled(user, "in_app"):
        logger.info("Suppressing in-app notification for user=%s (channel disabled)", getattr(user, "id", None))
        return None
    if not is_type_allowed(user, ntype):
        logger.info(
            "Suppressing in-app notification for user=%s type=%s (type disabled)",
            getattr(user, "id", None), ntype.code,
        )
        return None
    
    related_project = None
    if related_project_id:
        try:
            related_project = Project.objects.get(id=related_project_id)
        except Project.DoesNotExist:
            logger.warning(f"Related project with ID {related_project_id} not found.")


    return Notification.objects.create(
        user=user,
        notification_type=ntype,
        title=title,
        message=message,
        priority=priority or Notification._meta.get_field("priority").get_default(),
        related_startup_id=related_startup_id,
        project_id=related_project_id,
        related_message_id=related_message_id,
        triggered_by_user=triggered_by_user,
        triggered_by_type=triggered_by_type,
    )
</file>

<file path="core/settings/base_settings.py">
import os
from pathlib import Path
from decouple import config

BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Security
SECRET_KEY = config('SECRET_KEY', default=None)
if not SECRET_KEY:
    raise ValueError("SECRET_KEY is not set. Please define it in environment variables or .env file.")
DEBUG = config('DEBUG', default=False, cast=bool)
DOCS_ENABLED = config('DOCS_ENABLED', default=True, cast=bool)

ALLOWED_HOSTS = config(
    'ALLOWED_HOSTS',
    default='127.0.0.1, localhost, 0.0.0.0',
    cast=lambda v: [s.strip() for s in v.split(',')]
)

# Applications
FRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')

FRONTEND_ROUTES = {
    "verify_email": "/auth/verify-email/{user_id}/{token}/",
    "reset_password": "/password/reset/confirm/{uid}/{token}/",
}

INSTALLED_APPS = [
    'daphne',
    'channels',
    'chat',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'users',
    'investors',
    'projects',
    'startups',
    'communications',
    'dashboard',
    'investments',
    'rest_framework',
    'djoser',
    'django_filters',
    'corsheaders',
    'common',
    'search',

    # API schema / docs
    'drf_spectacular',
    'drf_spectacular_sidecar',

    # Elasticsearch
    'django_elasticsearch_dsl',

    # OAuth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',
]

SITE_ID = 1
AUTH_USER_MODEL = 'users.User'

MIDDLEWARE = [
    "allauth.account.middleware.AccountMiddleware",  # OAuth
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = config('LANGUAGE_CODE', default='en-us')
TIME_ZONE = config('TIME_ZONE', default='UTC')
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Tests
TEST_RUNNER = 'django.test.runner.DiscoverRunner'
</file>

<file path="frontend/src/components/Panel/panel.css">
.panel {
    background-color: var(--secondary-bcg-color);
    border-radius: 6px;
    width: 572px;
    transition: width var(--animation-fast);
}

.panel__margin {
    margin: 40px 40px 24px;
}

.panel__margin-large {
    margin-top: 80px !important;
    margin-bottom: 80px !important;
}

.panel--hr {
    border: 1px solid var(--panel-hr-color);
    background-color: var(--panel-hr-color);
    color: var(--panel-hr-color);
    margin: 0;
    padding: 0;
}

.panel--title {
    font-size: 16px;
    font-weight: 600;
    margin: 16px 24px;
}

.panel--content {
    display: flex;
    flex-direction: column;
    gap: 24px;
    padding: 24px;
}

.content--text {
    font-size: 14px;
    line-height: 22px;
    font-weight: 400;
    color: var(--primary-text-color);
}

.content--subtext {
    font-size: 10px;
    line-height: 100%;
    font-weight: 400;
    color: var(--primary-text-color);
}

.content--text__starred {
    color: var(--danger-text-color);
}

.content--text__margin {
    margin-right: 4px;
}

.content--text-container {
    display: flex;
}

.content--text-container__margin {
    margin-bottom: 4px;
}

.content__link-container {
    display: block;
    margin-top: 8px;
    text-align: right;
    font-size: 14px;
    line-height: 22px;
}

.panel--under-panel {
    margin-bottom: 40px;
}

.panel--under-panel > * {
    font-size: 14px;
    line-height: 22px;
}

.panel--under-panel > *:not(:last-child) {
    margin-right: 8px;
}

.panel--danger-text {
    margin-top: 4px;
    line-height: 22px;
    font-size: 14px;
    color: var(--danger-text-color);
}

.panel--font-size {
    font-size: 14px;
    line-height: 22px;
}

.panel--navigation {
    display: flex;
    gap: 8px;
    margin: 10px 24px;
}

@media screen and (max-width: 646px) {
    .panel {
        width: 100%;
    }
}
</file>

<file path="frontend/src/pages/RegistrationReconfirmation/registrationReconfirmation.jsx">
import { Validator } from '../../utils/validation/validate';
import { useNavigate } from 'react-router-dom';
import Button from '../../components/Button/button';
import Panel, { PanelBody, PanelBodyTitle, PanelNavigation, PanelTitle } from '../../components/Panel/panel';
import TextInput from '../../components/TextInput/textInput';
import { useAuthContext } from '../../provider/AuthProvider/authProvider';
import { useFormWithProtection } from '../../hooks/useFormWithProtection';
import { useFormWithServerErrors } from '../../hooks/useFormWithServerErrors';

/**
 * Component for reconfirming user registration by resending the activation email.
 * It allows users to enter their email address to receive a new activation link.
 * The component validates the input and handles errors from the server.
 * If the email is already registered, it shows an error message.
 * If the email is valid, it sends a request to register the user and navigates to
 * the confirmation page upon success.
 * @returns {JSX.Element}
 */
function RegistrationReconfirmation() {
    const { user, setUser, resendRegisterEmail } = useAuthContext();

    // Hook to navigate programmatically
    const navigate = useNavigate();

    // Form with protection hook
    const form = useFormWithProtection({
        email: "",
        unexpected: "",
    });

    // Function to handle server-side errors
    const extractError = (error) => {
        if (error.response.status === 401) {
            return { email: Validator.serverSideErrorMessages.emailAlreadyExist };
        } else {
            return { unexpected: Validator.serverSideErrorMessages.unexpected };
        }
    };

    // Function to handle form submission with brute force protection
    const doSubmit = ({ form, handleError }) => {
        resendRegisterEmail(form.data.email, user.id)
            .then(() => {
                setUser({
                    email: form.data.email
                });

                navigate('/auth/register/confirm');
            })
            .catch(handleError)
            .finally(() => form.setIsLocked(false));
    };

    // Function to handle cancellation
    const handleCancel = () => {
        navigate("/");
    };

    const { handleSubmit, handleChange } = useFormWithServerErrors({
        form,
        navigate,
        extractError,
        doSubmit,
    });

    return (
        <Panel className={'panel__margin-large'}
               aria-labelledby="registrationReconfirmation-title"
        >
            <PanelTitle id="registrationReconfirmation-title"
                        aria-describedby="registrationReconfirmation-help1 registrationReconfirmation-help2"
            >
                Надіслати лист для активації ще раз
            </PanelTitle>
            <PanelBody>
                <div>
                    <p id="registrationReconfirmation-help1"
                       className={'panel--font-size'}
                    >
                        Введіть електронну адресу вказану при реєстрації для
                        повторного надіслення листа.
                    </p>
                    <p id="registrationReconfirmation-help2"
                       className={'panel--font-size'}
                    >
                        На зазначену Вами електронну пошту буде відправлено
                        листа з посиланням для активації.
                    </p>
                </div>
                <div>
                    <PanelBodyTitle title={'Електронна пошта'} />
                    <TextInput
                        id="email"
                        name="email"
                        autoComplete="off"
                        autoCorrect="off"
                        spellCheck="false"
                        value={form.data.email}
                        onChange={handleChange}
                        placeholder={'Введіть свою електронну пошту'}
                        className={
                            form.errors['email'] && 'input__error-border-color'
                        }
                        aria-labelledby="email-label"
                        aria-describedby={form.errors['email'] ? 'email-error' : undefined}
                        aria-invalid={!!form.errors['email']}
                        aria-required="true"
                    />
                    {form.errors['email'] && (
                        <p id="email-error"
                           className={'panel--danger-text'}
                           role="alert"
                        >
                            {form.errors['email']}
                        </p>
                    )}
                </div>
                {form.errors['unexpected'] && <p className={'panel--danger-text'}>{ form.errors['unexpected'] }</p>}
            </PanelBody>
            <PanelNavigation>
                <Button
                    onClick={handleSubmit}
                    className={'button__padding panel--button'}
                    type="submit"
                >
                    Надіслати
                </Button>
                <Button
                    variant="secondary"
                    onClick={handleCancel}
                    disabled={form.isLocked}
                    className={'button__padding panel--button'}
                >
                    Скасувати
                </Button>
            </PanelNavigation>
        </Panel>
    );
}

export default RegistrationReconfirmation;
</file>

<file path="frontend/src/pages/RegistrationUserRepresent/registrationUserRepresent.jsx">
import { useNavigate } from 'react-router-dom';
import Panel, {
    PanelBody,
    PanelBodyTitle,
    PanelNavigation,
    PanelTitle,
} from '../../components/Panel/panel';
import Button from '../../components/Button/button';
import Checkbox from '../../components/Checkbox/checkbox';
import TextInput from '../../components/TextInput/textInput';
import { Validator } from '../../utils/validation/validate';
import { useAuthContext } from '../../provider/AuthProvider/authProvider';
import { useFormWithProtection } from '../../hooks/useFormWithProtection';
import { useFormWithServerErrors } from '../../hooks/useFormWithServerErrors';

/**
 * Registration page that asks the user to select
 * who they represent: Company or Startup project
 *
 * @component
 *
 * @returns {JSX.Element}
 */
function RegistrationUserRepresent() {
    const { bindCompanyToUser } = useAuthContext();

    // Hook to navigate programmatically
    const navigate = useNavigate();

    // Form with protection hook
    const form = useFormWithProtection({
        companyName: "",
        representation: {
            company: false,
            startup: false
        },
        unexpected: "",
    });

    // Function to handle server-side errors
    const extractError = (error) => {
        // TODO
        if (error.response.status === 401) {
            return { email: Validator.serverSideErrorMessages.companyAlreadyExist };
        } else {
            return { unexpected: Validator.serverSideErrorMessages.unexpected };
        }
    };

    // Function to handle form submission with brute force protection
    const doSubmit = ({ form, handleError }) => {
        // TODO
        bindCompanyToUser(form.data.companyName, form.data.representation.company ? 'investor' : 'startup')
            .then(() => {
                navigate('/auth/register/completed');
            })
            .catch(handleError)
            .finally(() => form.setIsLocked(false));
    };

    const { handleSubmit, handleChange } = useFormWithServerErrors({
        form,
        navigate,
        extractError,
        doSubmit,
    });

    return (
        <Panel aria-labelledby="registrationUserRepresent-title"
               className={"panel__margin-large"}
        >
            <PanelTitle id="registrationUserRepresent-title">Залишилось декілька кроків</PanelTitle>
            <PanelBody>
                <div>
                    <PanelBodyTitle id="companyName-label"
                                    title={'Назва компанії'}
                                    className={'content--text-container__margin'}
                    />
                    <TextInput
                        id="companyName"
                        name="companyName"
                        autoComplete="off"
                        autoCorrect="off"
                        spellCheck="false"
                        value={form.data.companyName}
                        onChange={handleChange}
                        placeholder={'Введіть назву вашої компанії'}
                        className={form.errors['companyName'] && 'input__error-border-color'}
                        aria-labelledby="companyName-label"
                        aria-describedby={form.errors['companyName'] ? 'companyName-error' : undefined}
                        aria-invalid={!!form.errors['companyName']}
                        aria-required="true"
                    />
                    { form.errors['companyName'] && (
                        <p id="companyName-error"
                           className={'panel--danger-text'}
                           role="alert"
                        >
                            {form.errors['companyName']}
                        </p>
                    )}
                </div>
                <div>
                    <PanelBodyTitle
                        id="representation-title"
                        title={'Кого ви представляєте?'}
                        className={'content--text-container__margin'}
                    />
                    <Checkbox
                        groupKey={"representation"}
                        values={form.data.representation}
                        labels={{
                            company: "Зареєстрована компанія",
                            startup: "Стартап проєкт, який шукає інвестиції"
                        }}
                        errors={form.errors}
                        handleChange={handleChange}
                        isGrouped={true}
                        aria-labelledby="representation-label"
                        aria-describedby={form.errors['representation'] ? 'representation-error' : undefined}
                        aria-invalid={!!form.errors['representation']}
                        aria-required="true"
                    />
                    {form.errors['representation'] && (
                        <p id="representation-error"
                           className={'panel--danger-text'}
                           role="alert"
                        >
                            {form.errors['representation']}
                        </p>
                    )}
                </div>
                { form.errors['unexpected'] && (
                    <p id="unexpected-error"
                       className={"panel--danger-text"}
                       role="alert"
                    >
                        { form.errors['unexpected'] }
                    </p>)
                }
            </PanelBody>
            <PanelNavigation>
                <Button
                    onClick={handleSubmit}
                    className={'button__padding panel--button'}
                    disabled={form.isLocked}
                    type="submit"
                >
                    Продовжити
                </Button>
            </PanelNavigation>
        </Panel>
    );
}

export default RegistrationUserRepresent;
</file>

<file path="frontend/src/utils/bruteForce/bruteForce.js">
import PropTypes from 'prop-types';

/**
 * @typedef {Object} BruteForceProps - Represents a bruteForce properties
 * @property {number} attempts - Number of attempts
 * @property {function} setAttempts - Unique identifier for the user
 * @property {function} setIsLocked - First name of the user
 * @property {function} handleError - Last name of the user
 */

/**
 * Brute force
 * @param {Object} error - error message
 * @param {BruteForceProps} props - props
 */
function bruteForce (error, props) {
    props.setAttempts(() => {
        const next = props.attempts + 1;

        if (next >= 5) {
            props.setIsLocked(true);

            setTimeout(() => {
                props.setAttempts(0);
                props.setIsLocked(false);
            }, 30000);
        } else {
            props.handleError(error);
        }

        return next;
    });
}

bruteForce.propTypes = {
    error: PropTypes.object.isRequired,
    props: PropTypes.object.isRequired,
}

export default bruteForce;
</file>

<file path="frontend/src/index.js">
import ReactDOM from 'react-dom/client';
import './css/main.css';
import './index.css';
import reportWebVitals from './reportWebVitals';
import App from './components/App/app';
import React from 'react';
import { initCsrf } from './api/csrfService';

async function bootstrap() {
    // 1. Check CSRF on startup
    await initCsrf();
}

void bootstrap();

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
    <React.StrictMode>
        <App />
    </React.StrictMode>
);

reportWebVitals();
</file>

<file path="frontend/package.json">
{
    "name": "frontend",
    "version": "0.1.0",
    "private": true,
    "dependencies": {
        "@jest/globals": "^30.0.5",
        "@testing-library/dom": "^10.4.1",
        "@testing-library/jest-dom": "^6.6.4",
        "@testing-library/react": "^16.3.0",
        "@testing-library/user-event": "^13.5.0",
        "axios": "^1.11.0",
        "clsx": "^2.1.1",
        "js-cookie": "^3.0.5",
        "jwt-decode": "^4.0.0",
        "prop-types": "^15.8.1",
        "react": "^19.1.1",
        "react-dom": "^19.1.1",
        "react-router-dom": "^7.7.1",
        "react-scripts": "5.0.1",
        "web-vitals": "^2.1.4"
    },
    "scripts": {
        "start": "react-scripts start",
        "build": "react-scripts build",
        "test": "react-scripts test",
        "eject": "react-scripts eject"
    },
    "eslintConfig": {
        "extends": [
            "react-app",
            "react-app/jest"
        ]
    },
    "browserslist": {
        "production": [
            ">0.2%",
            "not dead",
            "not op_mini all"
        ],
        "development": [
            "last 1 chrome version",
            "last 1 firefox version",
            "last 1 safari version"
        ]
    },
    "devDependencies": {
        "@testing-library/jest-dom": "^6.6.4",
        "@testing-library/react": "^16.3.0",
        "@testing-library/user-event": "^14.6.1",
        "jest": "^27.5.1",
        "prettier": "3.6.2"
    }
}
</file>

<file path="search/documents.py">
from django_elasticsearch_dsl import Document, fields
from django_elasticsearch_dsl.registries import registry
from startups.models import Startup
from projects.models import Project


@registry.register_document
class StartupDocument(Document):
    company_name = fields.TextField()
    description = fields.TextField()
    stage = fields.KeywordField()

    class Index:
        name = 'startups'
        settings = {"number_of_shards": 1, "number_of_replicas": 0}

    class Django:
        model = Startup
        fields = ["id"]
        related_models = []

    def get_queryset(self):
        return super().get_queryset().select_related("user")


@registry.register_document
class ProjectDocument(Document):
    title = fields.TextField()
    description = fields.TextField()
    status = fields.KeywordField()
    funding_goal = fields.FloatField()

    class Index:
        name = 'projects'
        settings = {"number_of_shards": 1, "number_of_replicas": 0}

    class Django:
        model = Project
        fields = ["id", "website"]
        related_models = []

    def get_queryset(self):
        return super().get_queryset().select_related("startup")
</file>

<file path="search/serializers.py">
from rest_framework import serializers
from startups.models import Startup
from projects.models import Project


class StartupSearchSerializer(serializers.ModelSerializer):
    class Meta:
        model = Startup
        fields = ["id", "company_name", "stage"]


class ProjectSearchSerializer(serializers.ModelSerializer):
    class Meta:
        model = Project
        fields = ["id", "title", "status", "funding_goal"]
</file>

<file path="search/services.py">
from startups.models import Startup
from django.db.models import Q


def filter_startups(query: str):
    """
    Basic search function for startups.
    Case-insensitive, partial match by company_name or description.
    """
    if not query:
        return Startup.objects.none()

    return Startup.objects.filter(
        Q(company_name__icontains=query) |
        Q(description__icontains=query)
    ).select_related("location", "industry")
</file>

<file path="search/urls.py">
from django.urls import path
from .views import StartupSearchView, ProjectSearchView

urlpatterns = [
    path("startups/", StartupSearchView.as_view(), name="startup-search"),
    path("projects/", ProjectSearchView.as_view(), name="project-search"),
]
</file>

<file path="startups/views/startup_elasticsearch.py">
import logging
from django_elasticsearch_dsl_drf.filter_backends import (
    FilteringFilterBackend,
    OrderingFilterBackend,
    SearchFilterBackend,
)
from django_elasticsearch_dsl_drf.viewsets import DocumentViewSet
from elasticsearch.exceptions import ConnectionError, TransportError
from rest_framework import status
from rest_framework.response import Response
from startups.documents import StartupDocument
from startups.serializers.startup_elasticsearch import StartupDocumentSerializer
from users.cookie_jwt import CookieJWTAuthentication
from users.permissions import IsAuthenticatedOr401

logger = logging.getLogger(__name__)


class StartupDocumentView(DocumentViewSet):
    authentication_classes = [CookieJWTAuthentication]
    permission_classes = [IsAuthenticatedOr401]
    document = StartupDocument
    serializer_class = StartupDocumentSerializer
    lookup_field = 'id'

    filter_backends = [
        FilteringFilterBackend,
        OrderingFilterBackend,
        SearchFilterBackend,
    ]

    filter_fields = {
        'company_name': 'company_name.raw',
        'stage': 'stage',
        'location.country': 'location.country',
        'industries.name': 'industries.name',
    }

    ordering_fields = {
        'company_name': 'company_name.raw',
        'stage': 'stage.raw',
        'location.country': 'location.country.raw',
    }

    ordering = ('-stage',)

    search_fields = (
        'company_name',
        'description',
    )

    def list(self, request, *args, **kwargs):
        try:
            return super().list(request, *args, **kwargs)
        except (ConnectionError, TransportError) as e:
            return Response(
                {"detail": "Search service is temporarily unavailable. Please try again later."},
                status=status.HTTP_503_SERVICE_UNAVAILABLE
            )
</file>

<file path="tests/chat/test_documents.py">
import mongomock
from django.test import TestCase
from mongoengine import connect, disconnect, ValidationError
from chat.documents import Room, Message
from core.settings.constants import FORBIDDEN_WORDS_SET

TEST_USER_EMAIL = "user@example.com"
TEST_USER2_EMAIL = "user2@example.com"
TEST_USER3_EMAIL = "user3@example.com"


class ChatDocumentsTestCase(TestCase):
    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        disconnect()
        connect(
            db='mongoenginetest',
            host='mongodb://localhost',
            mongo_client_class=mongomock.MongoClient
        )

    @classmethod
    def tearDownClass(cls):
        disconnect()
        super().tearDownClass()

    def setUp(self):
        Room.drop_collection()
        Message.drop_collection()
        self.user1 = TEST_USER_EMAIL
        self.user2 = TEST_USER2_EMAIL
        self.user3 = TEST_USER3_EMAIL

    def test_room_creation_and_limits(self):
        """Room creation and participant limits."""
        room = Room(name="RoomTest", participants=[self.user1, self.user2])
        room.save()
        self.assertIsNotNone(room.id)
        self.assertEqual(len(room.participants), 2)
        users = [f"user{i}@example.com" for i in range(51)]
        room = Room(name="BigRoom", participants=users)
        with self.assertRaises(ValidationError):
            room.clean()

    def _create_room(self, is_group=True, participants=None):
        if participants is None:
            participants = [self.user1, self.user2]
        room = Room(name=f"Room_{is_group}", participants=participants, is_group=is_group)
        room.save()
        return room

    def test_private_message_valid(self):
        """Private message with exactly 2 participants and valid receiver."""
        room = self._create_room(is_group=False, participants=[self.user1, self.user2])
        message = Message(room=room, sender_email=self.user1, receiver_email=self.user2, text="Hello!")
        message.clean()
        message.save()
        self.assertIsNotNone(message.id)

    def test_private_message_missing_receiver(self):
        """Private message without receiver raises ValidationError."""
        room = self._create_room(is_group=False, participants=[self.user1, self.user2])
        message = Message(room=room, sender_email=self.user1, text="Hello!")
        with self.assertRaises(ValidationError):
            message.clean()

    def test_private_message_wrong_participant_count(self):
        """Private room must have exactly 2 participants."""
        room = self._create_room(is_group=False, participants=[self.user1, self.user2, self.user3])
        message = Message(room=room, sender_email=self.user1, receiver_email=self.user2, text="Hello!")
        with self.assertRaises(ValidationError):
            message.clean()

    def test_group_message_valid_no_receiver(self):
        """Group message without receiver_email is valid."""
        room = self._create_room(is_group=True)
        message = Message(room=room, sender_email=self.user1, text="Hi everyone!")
        message.clean()
        message.save()
        self.assertIsNotNone(message.id)

    def test_group_message_with_receiver_in_group(self):
        """Group message with receiver_email who is in participants is valid."""
        room = self._create_room(is_group=True)
        message = Message(room=room, sender_email=self.user1, receiver_email=self.user2, text="Hi!")
        message.clean()
        message.save()
        self.assertIsNotNone(message.id)

    def test_group_message_with_receiver_not_in_group(self):
        """Group message with receiver_email not in participants raises ValidationError."""
        room = self._create_room(is_group=True)
        message = Message(room=room, sender_email=self.user1, receiver_email=self.user3, text="Hi!")
        with self.assertRaises(ValidationError):
            message.clean()

    def test_sender_not_in_room(self):
        """Message from non-participant raises ValidationError."""
        room = self._create_room(is_group=True)
        message = Message(room=room, sender_email=self.user3, text="Hi!")
        with self.assertRaises(ValidationError):
            message.clean()

    def test_empty_text_message(self):
        """Message with empty text raises ValidationError."""
        room = self._create_room()
        message = Message(room=room, sender_email=self.user1, text="   ")
        with self.assertRaises(ValidationError):
            message.clean()

    def test_forbidden_words(self):
        """Message with forbidden words raises ValidationError."""
        room = self._create_room()
        forbidden_word = next(iter(FORBIDDEN_WORDS_SET)) if FORBIDDEN_WORDS_SET else "badword"
        message = Message(room=room, sender_email=self.user1, text=f"This is {forbidden_word}")
        with self.assertRaises(ValidationError):
            message.clean()

    def test_spam_repeated_chars(self):
        """Message with repeated characters (spam) raises ValidationError."""
        room = self._create_room()
        message = Message(room=room, sender_email=self.user1, text="bbbbbbbbbbbb")
        with self.assertRaises(ValidationError):
            message.clean()
</file>

<file path="tests/communications/test_notifications_api.py">
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase, APIClient
from django.contrib.auth import get_user_model
from django.utils import timezone

from communications.models import Notification, NotificationPriority
from tests.factories import UserFactory
from tests.communications.factories import NotificationTypeFactory
from utils.authenticate_client import authenticate_client

User = get_user_model()


class NotificationsApiTestCase(APITestCase):
    def setUp(self):
        # Users
        self.user = UserFactory()
        self.other_user = UserFactory()

        # Auth as self.user (same pattern as other tests)
        authenticate_client(self.client, self.user)

        # Notification types
        self.type_message = NotificationTypeFactory(code='message_new')
        self.type_project = NotificationTypeFactory(code='project_update')

        # Some notifications for self.user
        self.n1 = Notification.objects.create(
            user=self.user,
            notification_type=self.type_message,
            title='Msg 1',
            message='You have a new message',
            is_read=False,
            priority=NotificationPriority.MEDIUM,
            related_message_id=99,
        )
        self.n2 = Notification.objects.create(
            user=self.user,
            notification_type=self.type_project,
            title='Project Update',
            message='Project status changed',
            is_read=True,
            priority=NotificationPriority.LOW,
        )
        # Another user's notification (should not be visible)
        Notification.objects.create(
            user=self.other_user,
            notification_type=self.type_message,
            title='Other user',
            message='Hidden',
            is_read=False,
        )

    def test_list_only_current_user(self):
        url = reverse('communications:notification-list')
        resp = self.client.get(url)
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        # Paginated response
        self.assertIn('results', resp.data)
        ids = {item['notification_id'] for item in resp.data['results']}
        self.assertIn(str(self.n1.notification_id), ids)
        self.assertIn(str(self.n2.notification_id), ids)
        self.assertEqual(len(resp.data['results']), 2)

    def test_filters_status_and_type_and_priority(self):
        url = reverse('communications:notification-list')
        # is_read=false (unread)
        resp = self.client.get(url, {'is_read': 'false'})
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        self.assertTrue(all(not item['is_read'] for item in resp.data['results']))
        # type code filter
        resp = self.client.get(url, {'type': 'project_update'})
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        self.assertTrue(all(item['notification_type']['code'] == 'project_update' for item in resp.data['results']))
        # priority filter
        resp = self.client.get(url, {'priority': 'low'})
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        self.assertTrue(all(item['priority'] == 'low' for item in resp.data['results']))

    def test_filters_date_range(self):
        url = reverse('communications:notification-list')
        now = timezone.now()
        # created_after in the past -> should include our notifications
        resp = self.client.get(url, {'created_after': (now - timezone.timedelta(minutes=5)).isoformat()})
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        self.assertGreaterEqual(len(resp.data['results']), 2)
        # created_before far future -> include
        resp = self.client.get(url, {'created_before': (now + timezone.timedelta(days=1)).isoformat()})
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        self.assertGreaterEqual(len(resp.data['results']), 2)

    def test_retrieve_notification(self):
        url = reverse('communications:notification-detail', kwargs={'notification_id': str(self.n1.notification_id)})
        resp = self.client.get(url)
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        self.assertEqual(resp.data['notification_id'], str(self.n1.notification_id))

    def test_mark_as_read_and_unread(self):
        # mark_as_read
        url_read = reverse('communications:notification-mark-as-read',
                           kwargs={'notification_id': str(self.n1.notification_id)})
        resp = self.client.post(url_read)
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        self.assertIn('status', resp.data)
        self.n1.refresh_from_db()
        self.assertTrue(self.n1.is_read)
        # mark_as_unread
        url_unread = reverse('communications:notification-mark-as-unread',
                             kwargs={'notification_id': str(self.n1.notification_id)})
        resp = self.client.post(url_unread)
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        self.n1.refresh_from_db()
        self.assertFalse(self.n1.is_read)

    def test_mark_all_as_read_and_unread(self):
        url_all_read = reverse('communications:notification-mark-all-as-read')
        resp = self.client.post(url_all_read)
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        self.n1.refresh_from_db();
        self.n2.refresh_from_db()
        self.assertTrue(self.n1.is_read and self.n2.is_read)
        url_all_unread = reverse('communications:notification-mark-all-as-unread')
        resp = self.client.post(url_all_unread)
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        self.n1.refresh_from_db();
        self.n2.refresh_from_db()
        self.assertFalse(self.n1.is_read or self.n2.is_read)

    def test_unread_count(self):
        # ensure one unread
        self.n1.is_read = False
        self.n1.save(update_fields=['is_read'])
        self.n2.is_read = True
        self.n2.save(update_fields=['is_read'])
        url = reverse('communications:notification-unread-count')
        resp = self.client.get(url)
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        self.assertEqual(resp.data.get('unread_count'), 1)

    def test_resolve_returns_redirect_payload(self):
        url = reverse('communications:notification-resolve', kwargs={'notification_id': str(self.n1.notification_id)})
        resp = self.client.get(url)
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        self.assertIn('redirect', resp.data)
        redirect = resp.data['redirect']
        self.assertEqual(redirect.get('kind'), 'message')
        self.assertEqual(redirect.get('id'), 99)

    def test_delete_notification(self):
        url = reverse('communications:notification-detail', kwargs={'notification_id': str(self.n2.notification_id)})
        resp = self.client.delete(url)
        self.assertEqual(resp.status_code, status.HTTP_204_NO_CONTENT)
        self.assertFalse(Notification.objects.filter(notification_id=self.n2.notification_id).exists())

    def test_create_disallowed(self):
        url = reverse('communications:notification-list')
        resp = self.client.options(url)
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        allow_header = resp.headers.get('Allow') or resp.get('Allow')
        self.assertIsNotNone(allow_header)
        self.assertNotIn('POST', allow_header)

    def test_unauthorized_access(self):
        client = APIClient()

        list_url = reverse('communications:notification-list')
        resp = client.get(list_url)
        self.assertEqual(resp.status_code, status.HTTP_403_FORBIDDEN)

        detail_url = reverse('communications:notification-detail',
                             kwargs={'notification_id': str(self.n1.notification_id)})
        resp = client.get(detail_url)
        self.assertEqual(resp.status_code, status.HTTP_403_FORBIDDEN)

        mark_url = reverse('communications:notification-mark-as-read',
                           kwargs={'notification_id': str(self.n1.notification_id)})
        resp = client.post(mark_url)
        self.assertEqual(resp.status_code, status.HTTP_403_FORBIDDEN)
</file>

<file path="tests/investments/test_api_subscription_create.py">
from decimal import Decimal
from django.test import TestCase
from django.urls import reverse
from rest_framework.test import APIClient
from rest_framework import status
from common.enums import Stage
from users.models import User, UserRole
from startups.models import Industry, Location, Startup
from investors.models import Investor
from projects.models import Project, Category
from investments.models import Subscription
from utils.authenticate_client import authenticate_client


class TestSubscriptionCreateAPI(TestCase):
    """Integration tests for the subscription creation endpoint."""

    @classmethod
    def setUpTestData(cls):
        """Set up initial data for all tests."""
        cls.role_user, _ = UserRole.objects.get_or_create(role=UserRole.Role.USER)
        cls.investor_user = User.objects.create_user(
            email="investor@example.com",
            password="testpassword123",
            first_name="Test",
            last_name="Investor",
            role=cls.role_user,
        )

        cls.startup_user = User.objects.create_user(
            email="startup_owner@example.com",
            password="testpassword123",
            first_name="Startup",
            last_name="Owner",
            role=cls.role_user,
        )

        cls.industry = Industry.objects.create(name="Technology")
        cls.location = Location.objects.create(country="US", city="Test City")

        cls.startup = Startup.objects.create(
            user=cls.startup_user,
            industry=cls.industry,
            company_name="Startup Inc",
            location=cls.location,
            email="startup@example.com",
            founded_year=2020,
            team_size=5,
            stage=Stage.MVP,
        )
        cls.investor = Investor.objects.create(
            user=cls.investor_user,
            industry=cls.industry,
            company_name="Investor Inc",
            location=cls.location,
            email="investorbit@example.com",
            founded_year=2015,
            team_size=1500,
            stage=Stage.MVP,
            fund_size=Decimal("1000.00")
        )
        cls.category = Category.objects.create(name="Fintech")
        cls.project = Project.objects.create(
            startup=cls.startup,
            title="Funding Project",
            funding_goal=Decimal("1000.00"),
            current_funding=Decimal("0.00"),
            category=cls.category,
            email="project@example.com",
        )

    def setUp(self):
        self.client = APIClient()

    def test_create_subscription_success(self):
        """Test successful creation of a subscription by an investor."""
        authenticate_client(self.client, self.investor_user)
        url = reverse("project-subscribe", kwargs={"project_id": self.project.id})
        payload = {"amount": 200}
        response = self.client.post(url, payload, format="json")

        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.project.refresh_from_db()
        self.assertEqual(self.project.current_funding, Decimal("200.00"))
        self.assertEqual(response.data["remaining_funding"], Decimal("800.00"))
        self.assertEqual(response.data["project_status"], "Partially funded")
        self.assertEqual(Subscription.objects.count(), 1)

    def test_create_subscription_fully_funded(self):
        """Test that the project gets 'Fully funded' status upon reaching its goal."""
        self.project.current_funding = Decimal("900.00")
        self.project.save()
        authenticate_client(self.client, self.investor_user)
        url = reverse("project-subscribe", kwargs={"project_id": self.project.id})
        payload = {"amount": 100}
        response = self.client.post(url, payload, format="json")

        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.project.refresh_from_db()
        self.assertEqual(self.project.current_funding, Decimal("1000.00"))
        self.assertEqual(response.data["project_status"], "Fully funded")

    def test_create_subscription_exceeds_goal_fails(self):
        """Test that an investment exceeding the goal is blocked."""
        authenticate_client(self.client, self.investor_user)
        url = reverse("project-subscribe", kwargs={"project_id": self.project.id})
        payload = {"amount": 1500}
        response = self.client.post(url, payload, format="json")

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn("exceeds funding goal", str(response.data))
        self.assertEqual(Subscription.objects.count(), 0)

    def test_unauthenticated_user_cannot_subscribe(self):
        """Ensure unauthenticated user cannot subscribe -> 401."""
        client = APIClient()
        url = reverse("project-subscribe", kwargs={"project_id": self.project.id})
        payload = {"amount": 200}
        response = client.post(url, payload, format="json")

        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        self.assertEqual(Subscription.objects.count(), 0)

    def test_non_investor_cannot_subscribe(self):
        """Test that a non-investor user cannot create a subscription."""
        authenticate_client(self.client, self.startup_user)
        url = reverse("project-subscribe", kwargs={"project_id": self.project.id})
        payload = {"amount": 100}
        response = self.client.post(url, payload, format="json")

        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        self.assertEqual(Subscription.objects.count(), 0)

    def test_startup_owner_cannot_invest_in_own_project(self):
        """Test that a startup owner cannot invest in their own project."""
        owner_investor_user = User.objects.create_user(
            email="owner_investor@example.com",
            password="testpassword123",
            first_name="Owner",
            last_name="Investor",
            role=self.role_user,
        )
        owner_investor = Investor.objects.create(
            user=owner_investor_user,
            industry=self.project.startup.industry,
            company_name="Owner As Investor",
            location=self.project.startup.location,
            email="owner_as_investor@example.com",
            founded_year=2021,
        )
        self.project.startup.user = owner_investor_user
        self.project.startup.save()
        authenticate_client(self.client, owner_investor_user)

        url = reverse("project-subscribe", kwargs={"project_id": self.project.id})
        payload = {"amount": 100}
        response = self.client.post(url, payload, format="json")

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn("invest in their own", str(response.data.get('non_field_errors')))
        self.assertEqual(Subscription.objects.count(), 0)

    def test_invest_in_already_fully_funded_project_fails(self):
        """Test that investing in a fully funded project is blocked."""
        self.project.current_funding = self.project.funding_goal
        self.project.save()
        authenticate_client(self.client, self.investor_user)
        url = reverse("project-subscribe", kwargs={"project_id": self.project.id})
        payload = {"amount": 50}
        response = self.client.post(url, payload, format="json")

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn("fully funded", str(response.data))
        self.assertEqual(Subscription.objects.count(), 0)

    def test_invest_with_invalid_amount_fails(self):
        """Test that zero or negative investment amounts are blocked."""
        authenticate_client(self.client, self.investor_user)
        url = reverse("project-subscribe", kwargs={"project_id": self.project.id})

        payload_zero = {"amount": 0}
        response_zero = self.client.post(url, payload_zero, format="json")
        self.assertEqual(response_zero.status_code, status.HTTP_400_BAD_REQUEST)

        payload_negative = {"amount": -100}
        response_negative = self.client.post(url, payload_negative, format="json")
        self.assertEqual(response_negative.status_code, status.HTTP_400_BAD_REQUEST)

        self.assertEqual(Subscription.objects.count(), 0)

    def test_invest_in_nonexistent_project_fails(self):
        """Test that investing in a non-existent project returns a 404 error."""
        authenticate_client(self.client, self.investor_user)
        url = reverse("project-subscribe", kwargs={"project_id": 9999})
        payload = {"amount": 100}
        response = self.client.post(url, payload, format="json")

        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)
        self.assertIn("Project does not exist", str(response.data.get('project')))
</file>

<file path="tests/investments/test_serializer_create_concurrency.py">
import threading
import time
from decimal import Decimal

from django.db import transaction, connections
from django.test import TransactionTestCase
from rest_framework import serializers
from django.db import close_old_connections
from common.enums import Stage
from investments.serializers.subscription_create import SubscriptionCreateSerializer
from investments.services.subscriptions import get_total_subscribed
from investors.models import Investor
from tests.factories import UserFactory, IndustryFactory, LocationFactory, StartupFactory, ProjectFactory, \
    CategoryFactory


class SubscriptionSerializerConcurrencyTests(TransactionTestCase):
    reset_sequences = True

    @classmethod
    def tearDownClass(cls):
        super().tearDownClass()
        close_old_connections()
        for conn in connections.all():
            conn.close()

    def setUp(self):
        self.user1 = UserFactory.create()
        self.user2 = UserFactory.create()

        self.industry1 = IndustryFactory.create(name="Fintech")
        self.industry2 = IndustryFactory.create(name="E-commerce")
        self.location1 = LocationFactory.create(country="US")
        self.location2 = LocationFactory.create(country="DE")

        self.startup1 = StartupFactory.create(
            user=self.user1,
            industry=self.industry1,
            location=self.location1,
            company_name="Fintech Solutions",
            stage=Stage.IDEA,
        )
        self.investor1 = Investor.objects.create(
            user=self.user1,
            industry=self.industry1,
            company_name="Investor One",
            location=self.location1,
            email="investor1great@example.com",
            founded_year=2000,
            stage=Stage.MVP,
            fund_size=Decimal("1000000.00")
        )

        self.investor2 = Investor.objects.create(
            user=self.user2,
            industry=self.industry2,
            company_name="Investor Two",
            location=self.location2,
            email="investor2great@example.com",
            founded_year=2005,
            stage=Stage.MVP,
            fund_size=Decimal("2000000.00")
        )

        self.user3 = UserFactory.create()
        self.investor3 = Investor.objects.create(
            user=self.user3,
            industry=self.industry1,
            company_name="Investor Three",
            location=self.location1,
            email="investor3@example.com",
            founded_year=2010
        )

        self.category1 = CategoryFactory.create(name="Tech")

        self.project1 = ProjectFactory.create(
            startup=self.startup1,
            category=self.category1,
            title="First Test Project",
            funding_goal=Decimal("1000.00")
        )

    def get_subscription_data(self, investor, project, amount):
        """
        Return subscription data for the serializer.
        Only 'amount' is passed in data; project and investor are provided via context.
        """
        return {
            "amount": amount
        }

    def test_concurrent_subscriptions(self):
        """
        Test that concurrent subscription attempts do not exceed the project's funding goal.
        One of the subscriptions should fail with a "funding goal exceeded" error.
        """
        amount1 = Decimal("600.00")
        amount2 = Decimal("500.00")

        errors = []

        def subscribe(investor, amount, delay=0):
            close_old_connections()
            time.sleep(delay)
            data = self.get_subscription_data(investor, self.project1, amount)
            class DummyRequest:
                def __init__(self, user):
                    self.user = user
    
            serializer = SubscriptionCreateSerializer(
                data=data,
                context={'request': DummyRequest(investor.user), 'project': self.project1}
            )
    
            try:
                serializer.is_valid(raise_exception=True)
                with transaction.atomic():
                    serializer.save() 
            except serializers.ValidationError as e:
                errors.append(e.detail)

        t1 = threading.Thread(target=subscribe, args=(self.investor2, amount1, 0))
        t2 = threading.Thread(target=subscribe, args=(self.investor3, amount2, 0.05))

        t1.start()
        t2.start()
        t1.join()
        t2.join()

        for conn in connections.all():
            conn.close()

        total = get_total_subscribed(project=self.project1)
        self.assertLessEqual(total, self.project1.funding_goal)

        error_messages = [
            str(e).lower()
            for err in errors
            for e in (err.values() if isinstance(err, dict) else [err])
        ]
        self.assertTrue(
            any("exceeds funding goal" in msg for msg in error_messages),
            f"Expected funding goal exceeded error, got: {error_messages}"
        )
</file>

<file path="tests/investors/test_api_create.py">
from django.urls import reverse
from rest_framework import status
from tests.test_base_case import BaseCompanyCreateAPITestCase
from investors.models import Investor
from startups.models import Industry, Location
from utils.authenticate_client import authenticate_client


class InvestorCreateAPITests(BaseCompanyCreateAPITestCase):
    """
    Tests for the investor creation API endpoint (POST /api/v1/investors/).
    """

    def setUp(self):
        """Override default setup to create a fresh user for each test."""
        super().setUp()
        self.user_for_creation = self.get_or_create_user(
            email="investor-creator@example.com", first_name="Creator", last_name="User"
        )
        authenticate_client(self.client, self.user_for_creation)
        self.url = reverse('investor-list')
        self.industry, _ = Industry.objects.get_or_create(name="Testable Industry")
        self.location, _ = Location.objects.get_or_create(country="US")

    def get_valid_payload(self):
        """Returns a dictionary with valid data for creating an investor."""
        return {
            "company_name": "Capital Ventures",
            "description": "Investing in the future of technology.",
            "email": "contact@capitalventures.com",
            "founded_year": 2020,
            "industry": self.industry.pk,
            "location": self.location.pk,
            "stage": "scale",
            "team_size": 20,
            "fund_size": "50000000.00",
            "website": "https://capitalventures.com"
        }

    def test_successful_investor_creation(self):
        """
        Ensure an authenticated user can create a new investor with valid data.
        """
        payload = self.get_valid_payload()
        self.assertEqual(Investor.objects.count(), 0)

        response = self.client.post(self.url, payload, format='json')

        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Investor.objects.count(), 1)

        investor = Investor.objects.first()
        self.assertEqual(investor.company_name, payload["company_name"])
        self.assertEqual(investor.user, self.user_for_creation)
        self.assertIn("id", response.data)

        self.assertEqual(Investor.objects.filter(user=self.user_for_creation).count(), 1)

    def test_unauthorized_creation_fails(self):
        """
        Ensure an unauthenticated user receives a 401 Unauthorized error.
        """
        self.client.logout()
        payload = self.get_valid_payload()
        response = self.client.post(self.url, payload, format='json')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    def test_create_with_duplicate_name_fails(self):
        """
        Ensure creating an investor with an already existing name fails.
        """
        payload = self.get_valid_payload()
        response1 = self.client.post(self.url, payload, format='json')
        self.assertEqual(response1.status_code, status.HTTP_201_CREATED, "First investor creation failed")

        second_user = self.get_or_create_user(
            email="second-investor-creator@example.com", first_name="Second", last_name="Creator"
        )
        authenticate_client(self.client, second_user)

        payload["email"] = "another-contact@capitalventures.com"
        response2 = self.client.post(self.url, payload, format='json')

        self.assertEqual(response2.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn("company_name", response2.data)
        self.assertIn("already exists", str(response2.data['company_name']))

    def test_user_cannot_create_more_than_one_investor(self):
        """
        Ensure a user who already owns an investor profile cannot create another one.
        """
        payload = self.get_valid_payload()
        response = self.client.post(self.url, payload, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

        payload["company_name"] = "Another Investor Firm"
        payload["email"] = "another-email@capitalventures.com"
        response = self.client.post(self.url, payload, format='json')

        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        self.assertIn("You have already created a company profile", response.data['detail'])

    def test_creation_with_invalid_fund_size_fails(self):
        """
        Ensure creating an investor with a negative fund size fails validation.
        """
        payload = self.get_valid_payload()
        payload["fund_size"] = "-1000.00"
        response = self.client.post(self.url, payload, format='json')

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn("fund_size", response.data)

        self.assertIn("Ensure this value is greater than or equal to 0.", str(response.data["fund_size"]))
</file>

<file path="tests/investors/test_api.py">
from django.urls import reverse
from rest_framework import status
from common.enums import Stage
from investors.models import Investor
from tests.test_base_case import BaseAPITestCase
from rest_framework.test import APIClient


class InvestorAPITests(BaseAPITestCase):
    """
    API tests for Investor model: list, update, delete,
    including validation and permission checks.
    """

    def test_get_investor_list(self):
        """
        Test retrieval of investor list includes expected entries.
        """
        self.get_or_create_investor(
            user=self.user,
            company_name='ListInvestor',
            stage=Stage.SCALE,
            fund_size=250000.00
        )
        url = reverse('investor-list')
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertGreaterEqual(len(response.data), 1)
        company_names = [investor['company_name'] for investor in response.data]
        self.assertIn('ListInvestor', company_names)

    def test_update_investor(self):
        """
        Test updating an investor's company_name via PATCH.
        """
        investor = self.get_or_create_investor(
            user=self.user,
            company_name='OldName',
            stage=Stage.LAUNCH,
            fund_size=300000.00
        )
        url = reverse('investor-detail', args=[investor.pk])
        data = {'company_name': 'UpdatedName'}
        response = self.client.patch(url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['company_name'], 'UpdatedName')
        investor.refresh_from_db()
        self.assertEqual(investor.company_name, 'UpdatedName')

    def test_update_investor_invalid_data(self):
        """
        Updating with invalid data should return validation errors.
        """
        investor = self.get_or_create_investor(
            user=self.user,
            company_name='ValidName',
            stage=Stage.SCALE,
            fund_size=500000.00
        )
        url = reverse('investor-detail', args=[investor.pk])
        data = {'founded_year': 'invalid_year'}
        response = self.client.patch(url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('founded_year', response.data)

    def test_delete_investor(self):
        """
        Test successful deletion of an investor.
        """
        investor = self.get_or_create_investor(
            user=self.user,
            company_name='ToDelete',
            stage=Stage.MVP,
            fund_size=100000.00
        )
        url = reverse('investor-detail', args=[investor.pk])
        response = self.client.delete(url)
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertFalse(Investor.objects.filter(id=investor.pk).exists())

    def test_unauthorized_create_investor(self):
        """Unauthenticated user should get 401 when creating investor."""
        client = APIClient()
        url = reverse('investor-list')
        data = {
            'company_name': 'UnauthorizedInvestor',
            'email': 'unauth@api.com',
            'industry': self.industry.pk,
            'location': self.location.pk,
            'founded_year': 2020,
            'team_size': 5,
            'stage': Stage.MVP,
            'fund_size': '1000000.00',
        }
        response = client.post(url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    def test_unauthorized_update_investor(self):
        """Unauthenticated user should get 401 when updating investor."""
        investor = self.get_or_create_investor(
            user=self.user,
            company_name='AuthInvestor',
            stage=Stage.MVP,
            fund_size=100000.00
        )
        client = APIClient()
        url = reverse('investor-detail', args=[investor.pk])
        data = {'company_name': 'ShouldNotUpdate'}
        response = client.patch(url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    def test_unauthorized_delete_investor(self):
        """Unauthenticated user should get 401 when deleting investor."""
        investor = self.get_or_create_investor(
            user=self.user,
            company_name='GoodInvestor',
            stage=Stage.MVP,
            fund_size=100000.00
        )
        client = APIClient()
        url = reverse('investor-detail', args=[investor.pk])
        response = client.delete(url)
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
</file>

<file path="tests/users/test_company_bind.py">
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from django.contrib.auth import get_user_model
from unittest.mock import patch
from tests.factories import (
    UserFactory,
    IndustryFactory,
    LocationFactory,
    StartupFactory,
    InvestorFactory
)
from users.models import User
from startups.models import Startup, Industry, Location, Stage
from investors.models import Investor
from utils.authenticate_client import authenticate_client

User = get_user_model()


class CompanyBindingViewTests(APITestCase):
    def setUp(self):
        """Set up test data"""
        self.url = reverse('bind_company')

        self.user = UserFactory.create()
        self.user1 = UserFactory.create(email='user1@example.com')
        self.user2 = UserFactory.create(email='user2@example.com')
        self.other_user = UserFactory.create(email='other@example.com')

        self.industry = IndustryFactory.create(name="Fintech")
        self.location = LocationFactory.create(country="US")

        self.startup = StartupFactory.create(
            user=self.user1,
            industry=self.industry,
            location=self.location,
            company_name="Existing Startup",
            stage=Stage.MVP,
        )
        self.investor = InvestorFactory.create(
            user=self.user2,
            industry=self.industry,
            location=self.location,
            company_name="Existing Investor",
            stage=Stage.LAUNCH,
        )

        self.client = APIClient(enforce_csrf_checks=False)
        self.csrf_url = reverse("csrf_init")

    def startup_payload(self, name="New Startup"):
        return {"company_name": name, "company_type": "startup"}

    def investor_payload(self, name="New Investor"):
        return {"company_name": name, "company_type": "investor"}

    def test_bind_to_new_startup_success(self):
        """Test successful creation and binding to new startup"""
        authenticate_client(self.client, self.user)

        response = self.client.post(self.url, self.startup_payload(), format="json")

        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(response.data['company_type'], 'startup')
        self.assertIn('company_id', response.data)
        self.assertIn('Successfully created and bound to new startup', response.data['message'])

        new_startup = Startup.objects.get(company_name='New Startup')
        self.assertEqual(new_startup.user, self.user)
        self.assertEqual(new_startup.email, self.user.email)
        self.assertEqual(new_startup.stage, Stage.IDEA)
        self.assertEqual(new_startup.industry.name, "Unknown")
        self.assertEqual(new_startup.location.city, "Unknown")

    def test_bind_to_new_investor_success(self):
        """Test successful creation and binding to new investor"""
        authenticate_client(self.client, self.user)

        response = self.client.post(self.url, self.investor_payload(), format="json")

        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(response.data['company_type'], 'investor')
        self.assertIn('company_id', response.data)
        self.assertIn('Successfully created and bound to new investor', response.data['message'])

        new_investor = Investor.objects.get(company_name='New Investor')
        self.assertEqual(new_investor.user, self.user)
        self.assertEqual(new_investor.email, self.user.email)
        self.assertEqual(new_investor.stage, Stage.MVP)
        self.assertEqual(new_investor.fund_size, 0)
        self.assertEqual(new_investor.industry.name, "Unknown")
        self.assertEqual(new_investor.location.city, "Unknown")

    def test_bind_to_existing_company_with_different_user(self):
        """Test binding to existing company that has a different user"""
        authenticate_client(self.client, self.user)

        response = self.client.post(
            self.url,
            self.startup_payload(name='Existing Startup'),
            format="json"
        )
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('error', response.data)
        self.assertIn('company_name', response.data['error'])
        self.assertIn('already exists', str(response.data['error']['company_name'][0]))

    def test_user_already_bound_to_startup(self):
        """Test binding when user is already bound to a startup"""
        Startup.objects.create(
            user=self.user,
            company_name='My Startup',
            industry=self.industry,
            location=self.location,
            email=f"{self.user.email}.startup",
            founded_year=2020,
            team_size=5,
            stage=Stage.IDEA
        )

        authenticate_client(self.client, self.user)

        response = self.client.post(
            self.url,
            self.startup_payload(name='Another Company'),
            format="json"
        )
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('already bound', response.data['error'])

    def test_user_already_bound_to_investor(self):
        """Test binding when user is already bound to an investor"""
        Investor.objects.create(
            user=self.user,
            company_name='My Investor',
            industry=self.industry,
            location=self.location,
            email=f"{self.user.email}.investor",
            founded_year=2015,
            team_size=3,
            stage=Stage.MVP,
            fund_size=500000
        )

        authenticate_client(self.client, self.user)

        response = self.client.post(
            self.url,
            self.investor_payload(name='Another Company'),
            format="json"
        )
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('already bound', response.data['error'])

    def test_invalid_company_type(self):
        """Test binding with invalid company type"""
        data = {
            'company_name': 'Test Company',
            'company_type': 'invalid_type'
        }

        authenticate_client(self.client, self.user)

        response = self.client.post(self.url, data, format='json')

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('company_type', response.data['error'])

    def test_missing_company_name(self):
        """Test binding with missing company name"""
        data = {
            'company_type': 'startup'
        }

        authenticate_client(self.client, self.user)

        response = self.client.post(self.url, data, format='json')

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('company_name', response.data['error'])

    def test_unauthenticated_access(self):
        """Test that unauthenticated users cannot access the endpoint"""
        client = APIClient(enforce_csrf_checks=False)

        data = {
            'company_name': 'Test Company',
            'company_type': 'startup'
        }
        response = client.post(self.url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    @patch('startups.models.Startup.objects.create')
    def test_startup_creation_failure(self, mock_create):
        """Test handling of startup creation failure"""
        mock_create.side_effect = Exception("Creation failed")

        authenticate_client(self.client, self.user)

        response = self.client.post(
            self.url,
            self.startup_payload(name='New Startup'),
            format="json"
        )

        self.assertEqual(response.status_code, status.HTTP_500_INTERNAL_SERVER_ERROR)
        self.assertIn('unexpected error', response.data['error'])

    @patch('investors.models.Investor.objects.create')
    def test_investor_creation_failure(self, mock_create):
        """Test handling of investor creation failure"""
        mock_create.side_effect = Exception("Creation failed")

        authenticate_client(self.client, self.user)

        response = self.client.post(self.url, self.investor_payload(), format="json")

        self.assertEqual(response.status_code, status.HTTP_500_INTERNAL_SERVER_ERROR)
        self.assertIn('unexpected error', response.data['error'])

    def test_default_industry_and_location_creation(self):
        """Test that default industry and location are created for new companies"""
        Industry.objects.filter(name="Unknown").delete()
        Location.objects.filter(city="Unknown").delete()

        authenticate_client(self.client, self.user)

        response = self.client.post(
            self.url,
            self.startup_payload(name='New Test Company'),
            format="json"
        )

        if response.status_code != status.HTTP_201_CREATED:
            print(f"Response status: {response.status_code}")
            print(f"Response data: {response.data}")
            self.fail(f"Failed to create company: {response.data}")

        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

        self.assertTrue(Industry.objects.filter(name="Unknown").exists())

        default_location = Location.objects.get(city="Unknown")
        self.assertIsNotNone(default_location.country)
        self.assertEqual(str(default_location.country), "US")

        default_industry = Industry.objects.get(name="Unknown")
        new_startup = Startup.objects.get(company_name='New Test Company')

        self.assertEqual(new_startup.industry, default_industry)
        self.assertEqual(new_startup.location, default_location)

    def test_transaction_atomicity_on_creation_failure(self):
        """Test that the transaction is atomic (rolls back on error)"""
        original_startup_count = Startup.objects.count()

        with patch('startups.models.Startup.objects.create') as mock_create:
            mock_create.side_effect = Exception("Creation failed")

            authenticate_client(self.client, self.user)

            response = self.client.post(
                self.url,
                self.startup_payload(name='Should Not Exist'),
                format="json"
            )

            self.assertEqual(Startup.objects.count(), original_startup_count)
            self.assertEqual(response.status_code, status.HTTP_500_INTERNAL_SERVER_ERROR)

    def test_company_name_uniqueness_enforcement(self):
        """Test that company name uniqueness is enforced"""
        authenticate_client(self.client, self.user)
        response1 = self.client.post(self.url, self.startup_payload(name='Unique Company'), format="json")
        self.assertEqual(response1.status_code, status.HTTP_201_CREATED)
        another_user = User.objects.create_user(
            email='another_unique@example.com',
            password='anotherpass123',
            first_name='Another',
            last_name='User'
        )

        another_client = APIClient(enforce_csrf_checks=False)
        authenticate_client(another_client, another_user)
        response2 = another_client.post(self.url, self.startup_payload(name='Unique Company'), format="json")
        self.assertEqual(
            response2.status_code,
            status.HTTP_400_BAD_REQUEST,
            msg=f"Expected 400, got {response2.status_code}, data={getattr(response2, 'data', None)}"
        )

        self.assertIn('company_name', response2.data.get('error', {}))
        error_text = str(response2.data['error'])
        self.assertTrue(any(keyword in error_text for keyword in ['company', 'name', 'exists', 'unique']),
                        f"Error should be about company name uniqueness: {error_text}")

    def test_email_uniqueness_enforcement(self):
        """Test that a user cannot bind a second company with the same email"""
        authenticate_client(self.client, self.user)

        data1 = {
            'company_name': 'First Company',
            'company_type': 'startup'
        }
        response1 = self.client.post(self.url, data1, format='json')
        self.assertEqual(response1.status_code, status.HTTP_201_CREATED)

        data2 = {
            'company_name': 'Second Company',
            'company_type': 'startup'
        }
        response2 = self.client.post(self.url, data2, format='json')

        self.assertEqual(
            response2.status_code,
            status.HTTP_400_BAD_REQUEST,
            msg=f"Expected 400, got {response2.status_code}, data={getattr(response2, 'data', None)}"
        )
        error_text = str(response2.data.get('error', ''))
        self.assertIn('already bound', error_text.lower(), f"Unexpected error message: {error_text}")

    def test_bind_to_company_with_same_name_different_case(self):
        """Test binding to company with same name but different case"""
        Startup.objects.create(
            user=self.other_user,
            company_name='Test Company',
            industry=self.industry,
            location=self.location,
            email='test@example.com',
            founded_year=2020,
            team_size=5,
            stage=Stage.IDEA
        )

        authenticate_client(self.client, self.user)

        response = self.client.post(
            self.url,
            self.startup_payload(name='test company'),
            format="json"
        )
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)

    def test_user_cannot_have_both_startup_and_investor(self):
        """Test that user cannot be bound to both startup and investor"""
        authenticate_client(self.client, self.user)

        response1 = self.client.post(
            self.url,
            self.startup_payload(name='TechNova'),
            format="json"
        )
        self.assertEqual(response1.status_code, status.HTTP_201_CREATED)

        response2 = self.client.post(
            self.url,
            self.investor_payload(name='ShortDesc'),
            format="json"
        )

        self.assertEqual(response2.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('error', response2.data)
        self.assertEqual('User is already bound to a company.', str(response2.data['error']))
</file>

<file path="tests/users/test_login.py">
from django.test import TestCase
from rest_framework.test import APIClient
from users.models import UserRole, User


class AuthLoginTestCase(TestCase):
    """
    TestCase to verify JWT login functionality.

    Covers:
    - Successful login with valid credentials
    - Login with wrong password
    - Login for nonexistent users
    - Login requests with missing required fields
    """

    def setUp(self):
        """Setup test environment by creating a user role and a test user."""
        self.client = APIClient()
        self.role, _ = UserRole.objects.get_or_create(role="user")
        self.user = User.objects.create_user(
            email="testuser@example.com",
            password="testpass",
            first_name="Test",
            last_name="User",
            role=self.role,
            is_active=True,
        )

    def test_successful_login(self):
        """User can successfully log in with valid credentials."""
        response = self.client.post("/api/v1/auth/jwt/create/", {
            "email": "testuser@example.com",
            "password": "testpass"
        }, format="json")
        self.assertEqual(response.status_code, 200)
        data = response.json()
        self.assertIn("detail", data)
        self.assertEqual(data["detail"], "Login successful")
        self.assertEqual(data["user_id"], self.user.id)
        self.assertEqual(data["email"], self.user.email)
        self.assertIn("access_token", response.cookies)
        self.assertIn("refresh_token", response.cookies)

    def test_login_wrong_password(self):
        """Login attempt with wrong password returns 401 Unauthorized."""
        response = self.client.post("/api/v1/auth/jwt/create/", {
            "email": "testuser@example.com",
            "password": "wrongpass"
        }, format="json")

        self.assertEqual(response.status_code, 401)

    def test_login_nonexistent_user(self):
        """Login attempt with an unregistered email returns 401 Unauthorized."""
        response = self.client.post("/api/v1/auth/jwt/create/", {
            "email": "ghost@example.com",
            "password": "nopass"
        }, format="json")

        self.assertEqual(response.status_code, 401)

    def test_login_missing_fields(self):
        """Login request missing required fields returns 400 Bad Request."""
        response = self.client.post("/api/v1/auth/jwt/create/", {
            "email": "testuser@example.com"
        }, format="json")

        self.assertEqual(response.status_code, 400)
</file>

<file path="tests/users/test_me_endpoint.py">
from django.contrib.auth import get_user_model
from users.models import User, UserRole
from django.urls import reverse
from rest_framework.test import APITestCase
from rest_framework import status
from rest_framework_simplejwt.tokens import AccessToken
from rest_framework.test import APIClient

User = get_user_model()


class MeEndpointTests(APITestCase):
    """
    Test suite for the /api/v1/auth/me/ endpoint.

    Covers:
    - Successful response with authenticated user details.
    - Rejection of unauthenticated requests.
    - Handling of inactive users.
    - Handling of users without a role.
    """

    @classmethod
    def setUpTestData(cls):
        """
        Set up test data for the entire TestCase.
        Creates a user role and a test user assigned to that role.
        """
        role, _ = UserRole.objects.get_or_create(role=UserRole.Role.USER)
        cls.user = User.objects.create_user(
            email="post@example.com",
            password="Test1234!",
            first_name="Paul",
            last_name="Bein",
            user_phone="+123456789",
            title="Developer",
            role=role,
            is_active=True
        )
        cls.url = reverse("auth-me")

    def get_token_for_user(self, user):
        """
        Generate a JWT access token for the given user.

        Args:
            user (User): The user instance to generate a token for.

        Returns:
            str: JWT access token.
        """
        return str(AccessToken.for_user(user))

    def test_me_returns_current_user(self):
        """
        Ensure that the 'me' endpoint returns the current authenticated user's details
        and does not expose the password.
        """
        token = self.get_token_for_user(self.user)
        self.client.cookies['access_token'] = token
        resp = self.client.get(self.url)

        self.assertEqual(resp.status_code, status.HTTP_200_OK)
        body = resp.json()
        self.assertEqual(body["email"], self.user.email)
        self.assertEqual(body["first_name"], self.user.first_name)
        self.assertEqual(body["last_name"], self.user.last_name)
        self.assertEqual(body["user_phone"], self.user.user_phone)
        self.assertEqual(body["title"], self.user.title)
        self.assertEqual(body["role"], getattr(self.user.role, 'role', None))
        self.assertNotIn("password", body)

    def test_me_requires_auth(self):
        """Ensure 'me' endpoint requires authentication -> 401."""
        client = APIClient(enforce_csrf_checks=False)
        resp = client.get(self.url)
        self.assertEqual(resp.status_code, status.HTTP_403_FORBIDDEN)

    def test_me_inactive_user(self):
        """Inactive users cannot access 'me' endpoint."""
        self.user.is_active = False
        self.user.save()

        token = self.get_token_for_user(self.user)
        client = APIClient(enforce_csrf_checks=False)

        client.cookies['access_token'] = token
        resp = client.get(self.url)
        self.assertEqual(resp.status_code, status.HTTP_403_FORBIDDEN)
</file>

<file path="tests/users/test_oauth_login.py">
from unittest.mock import patch, MagicMock
from django.contrib.auth import get_user_model
from django.urls import reverse
from django.test import TestCase
from rest_framework.test import APIClient
from rest_framework import status
from core.settings import third_party_settings
from users.models import UserRole
from django.core.cache import cache
from users.tasks import send_welcome_oauth_email_task
from tests.factories import UserFactory
from uuid import uuid4

User = get_user_model()


@patch('users.views.oauth_view.OAuthTokenObtainPairView.throttle_classes', [])
class OAuthTokenObtainPairViewTests(TestCase):
    """
    Test suite for OAuthTokenObtainPairView handling password and OAuth (Google/GitHub) authentication.
    """
    GOOGLE_PROVIDER = "google"
    GITHUB_PROVIDER = "github"

    def setUp(self):
        """Initialize test data and client"""
        cache.clear()
        self.auth_url = reverse('oauth_login')
        self.role, _ = UserRole.objects.get_or_create(role="user")

        self.oauth_user = User.objects.create_user(
            email=f"testuser_{str(uuid4())[:4]}@example.com",
            first_name='OAuth',
            last_name='User',
            role=self.role,
            is_active = True
        )
        self.oauth_user.set_unusable_password()
        self.oauth_user.save()

    def tearDown(self):
        self.oauth_user.delete()
        
    def test_invalid_payloads(self):
        """Test failure for malformed/incomplete payloads"""
        invalid_cases = [
            {}, {"provider": self.GOOGLE_PROVIDER}, {"access_token": "abc123"},
            {"provider": "", "access_token": "abc123"},
            {"provider": self.GOOGLE_PROVIDER, "access_token": ""},
            {"provider": 123, "access_token": True},
        ]
        for payload in invalid_cases:
            with self.subTest(payload=payload):
                res = self.client.post(self.auth_url, payload, format='json')
                self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)
                self.assertIn("error", res.data)

    def test_unsupported_provider(self):
        """Test failure for unsupported OAuth provider"""
        res = self.client.post(self.auth_url, {'provider': 'twitter', 'access_token': 'token'}, format='json')
        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertEqual(res.data['error'], "Unsupported OAuth provider")

    @patch('users.views.oauth_view.load_backend')
    def test_google_oauth_sets_user_active_based_on_email_verified(self, mock_load_backend):
        """Test Google OAuth login sets is_active correctly based on email_verified"""
        mock_backend = MagicMock()

        active_user = User.objects.get(pk=self.oauth_user.pk)
        active_user.first_name = "Updated"
        active_user.last_name = "Name"
        mock_backend.do_auth.return_value = active_user

        mock_load_backend.return_value = mock_backend

        res = self.client.post(self.auth_url, {'provider': self.GOOGLE_PROVIDER, 'access_token': 'token'}, format='json')

        self.assertEqual(res.status_code, status.HTTP_200_OK)
        user = User.objects.get(email=active_user.email)
        self.assertEqual(user.first_name, 'Updated')
        self.assertEqual(user.last_name, 'Name')
        self.assertTrue(user.is_active)
        
        access_token = res.cookies.get("access_token").value
        print(access_token)
        client = APIClient()
        client.cookies['access_token'] = access_token
        protected_response = client.get('/api/v1/auth/me/')
        self.assertEqual(protected_response.status_code, 200)

    @patch('users.views.oauth_view.load_backend')
    def test_github_oauth_sets_user_inactive(self, mock_load_backend):
        """Test GitHub OAuth login sets is_active correctly based on email_verified and ensures that access token is not issued"""
        inactive_user = UserFactory(is_active=False)

        mock_backend = MagicMock()
        mock_backend.do_auth.return_value = inactive_user
        mock_load_backend.return_value = mock_backend

        res = self.client.post(self.auth_url, {'provider': self.GITHUB_PROVIDER, 'access_token': 'token'}, format='json')

        mock_backend.do_auth.assert_called_with('token')
        self.assertEqual(res.status_code, status.HTTP_403_FORBIDDEN)
        self.assertIn('Account is not active', res.data['detail'])
        user = User.objects.get(email=inactive_user.email)
        self.assertFalse(user.is_active)
        
    # --- Google OAuth ---
    @patch('users.views.oauth_view.load_backend')
    def test_google_oauth_new_user(self, mock_load_backend):
        """Test Google OAuth login for a new user"""
        mock_backend = MagicMock()
        new_user = UserFactory(is_active=True)
        mock_backend.do_auth.return_value = new_user
        mock_load_backend.return_value = mock_backend

        res = self.client.post(self.auth_url, {'provider': self.GOOGLE_PROVIDER, 'access_token': 'token'}, format='json')
        self.assertEqual(res.status_code, status.HTTP_200_OK)
        self.assertEqual(res.data['user']['email'], new_user.email)

    @patch('users.views.oauth_view.load_backend')
    def test_google_oauth_existing_user(self, mock_load_backend):
        """Test Google OAuth login for existing user and profile update"""
        mock_backend = MagicMock()
        updated_user = User.objects.get(pk=self.oauth_user.pk)
        updated_user.first_name = "Updated"
        updated_user.last_name = "Name"
        mock_backend.do_auth.return_value = updated_user
        mock_load_backend.return_value = mock_backend

        res = self.client.post(self.auth_url, {'provider': self.GOOGLE_PROVIDER, 'access_token': 'token'}, format='json')
        self.assertEqual(res.status_code, status.HTTP_200_OK)
        user = User.objects.get(email=updated_user.email)
        self.assertEqual(user.first_name, 'Updated')
        self.assertEqual(user.last_name, 'Name')

    @patch('users.views.oauth_view.load_backend')
    def test_google_oauth_invalid_token(self, mock_load_backend):
        """Test authentication failure with invalid Google token"""
        mock_backend = MagicMock()
        mock_backend.do_auth.return_value = None
        mock_load_backend.return_value = mock_backend

        res = self.client.post(self.auth_url, {'provider': self.GOOGLE_PROVIDER, 'access_token': 'invalid'}, format='json')
        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('OAuth authentication failed', res.data['error'])

    # --- GitHub OAuth ---
    @patch('users.views.oauth_view.load_backend')
    def test_github_oauth_new_user(self, mock_load_backend):
        """Test GitHub OAuth login for a new user"""
        mock_backend = MagicMock()
        new_user = UserFactory(is_active=True)
        mock_backend.do_auth.return_value = new_user
        mock_load_backend.return_value = mock_backend

        res = self.client.post(self.auth_url, {'provider': self.GITHUB_PROVIDER, 'access_token': 'token'}, format='json')
        self.assertEqual(res.status_code, status.HTTP_200_OK)
        self.assertEqual(res.data['user']['email'], new_user.email)

    @patch('users.views.oauth_view.load_backend')
    def test_github_oauth_existing_user(self, mock_load_backend):
        """Test GitHub OAuth login for existing user and profile update"""
        mock_backend = MagicMock()
        updated_user = User.objects.get(pk=self.oauth_user.pk)
        updated_user.first_name = "Updated"
        updated_user.last_name = "Full Name"
        mock_backend.do_auth.return_value = updated_user
        mock_load_backend.return_value = mock_backend

        res = self.client.post(self.auth_url, {'provider': self.GITHUB_PROVIDER, 'access_token': 'token'}, format='json')
        self.assertEqual(res.status_code, status.HTTP_200_OK)
        user = User.objects.get(email=updated_user.email)
        self.assertEqual(user.first_name, 'Updated')
        self.assertEqual(user.last_name, 'Full Name')

    @patch('users.views.oauth_view.load_backend')
    def test_oauth_missing_email(self, mock_load_backend):
        """
        Test authentication failure when OAuth provider (Google/GitHub) does not provide a verified email.
        """
        mock_backend = MagicMock()
        mock_backend.do_auth.side_effect = lambda token: User()
        mock_load_backend.return_value = mock_backend

        for provider, expected_status in [(self.GOOGLE_PROVIDER, status.HTTP_400_BAD_REQUEST),
                                          (self.GITHUB_PROVIDER, status.HTTP_400_BAD_REQUEST)]:
            with self.subTest(provider=provider):
                with patch('users.views.oauth_view.OAuthTokenObtainPairView.authenticate_with_provider') as mock_auth:
                    mock_auth.side_effect = ValueError("Email not provided by provider")
                    res = self.client.post(
                        self.auth_url,
                        {'provider': provider, 'access_token': 'fake_token'},
                        format='json'
                    )
                    self.assertEqual(res.status_code, expected_status)
                    self.assertIn('Email not provided', res.data['detail'])

    @patch('users.views.oauth_view.load_backend')
    def test_oauth_expired_token(self, mock_load_backend):
        """
        Ensure that expired or invalid OAuth tokens are rejected with 400 error.
        """
        mock_backend = MagicMock()
        mock_backend.do_auth.return_value = None  # Simulate expired/invalid token
        mock_load_backend.return_value = mock_backend

        for provider in [self.GOOGLE_PROVIDER, self.GITHUB_PROVIDER]:
            with self.subTest(provider=provider):
                res = self.client.post(
                    self.auth_url,
                    {'provider': provider, 'access_token': 'expired_token'},
                    format='json'
                )
                self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)
                self.assertIn("OAuth authentication failed", res.data['error'])

    # --- Edge & safety ---
    @patch("users.views.oauth_view.requests.get")
    def test_no_real_http_calls(self, mock_get):
        """Ensure no real HTTP request is made"""
        fake_response = MagicMock()
        fake_response.status_code = status.HTTP_200_OK
        fake_response.json.return_value = {"email": "fake@example.com", "given_name": "Fake", "family_name": "User"}
        mock_get.return_value = fake_response

        res = self.client.post(self.auth_url, {'provider': self.GOOGLE_PROVIDER, 'access_token': 'fake'}, format='json')
        self.assertNotEqual(res.status_code, status.HTTP_500_INTERNAL_SERVER_ERROR)

    @patch('users.views.oauth_view.load_backend')
    def test_jwt_response_sets_cookie(self, mock_load_backend):
        """Test that JWT response properly sets refresh token cookie"""
        mock_backend = MagicMock()
        
        active_user = self.oauth_user
        mock_backend.do_auth.return_value = active_user
        mock_load_backend.return_value = mock_backend

        res = self.client.post(self.auth_url, {'provider': self.GOOGLE_PROVIDER, 'access_token': 'token'}, format='json')

        self.assertEqual(res.status_code, status.HTTP_200_OK)
        self.assertNotIn("access", res.data)
        self.assertNotIn("refresh", res.data)
        for key in ["access_token", "refresh_token"]:
            self.assertIn(key, res.cookies)
            cookie = res.cookies[key]
            self.assertTrue(cookie["httponly"])
            self.assertTrue(cookie["secure"])

class TestSendWelcomeEmail(TestCase):
    def setUp(self):
        """Enable Celery eager mode for synchronous task execution during tests."""
        self._orig_always_eager = third_party_settings.CELERY_TASK_ALWAYS_EAGER
        self._orig_eager_propagates = third_party_settings.CELERY_TASK_EAGER_PROPAGATES

        third_party_settings.CELERY_TASK_ALWAYS_EAGER = True
        third_party_settings.CELERY_TASK_EAGER_PROPAGATES = True

    def tearDown(self):
        """Restore original Celery settings."""
        third_party_settings.CELERY_TASK_ALWAYS_EAGER = self._orig_always_eager
        third_party_settings.CELERY_TASK_EAGER_PROPAGATES = self._orig_eager_propagates

    @patch("users.tasks.send_mail")
    def test_send_email_task_success(self, mock_send_mail):
        """
        Test that the send_welcome_oauth_email_task sends an email successfully
        when valid parameters are provided.
        """
        test_recipient_list = ["you@example.com"]
        result = send_welcome_oauth_email_task.delay("Subject", "Hello", test_recipient_list)

        self.assertEqual(result.status, "SUCCESS")
        self.assertEqual(result.result, f"Email sent to {test_recipient_list}")
        mock_send_mail.assert_called_once_with(
            "Subject",
            "Hello",
            third_party_settings.DEFAULT_FROM_EMAIL,
            test_recipient_list,
            fail_silently=False
        )

    @patch("users.tasks.send_mail")
    def test_send_email_task_missing_params(self, mock_send_mail):
        """
        Test that the task handles missing parameters gracefully without sending an email.
        """
        result = send_welcome_oauth_email_task.delay("", "", [])

        self.assertEqual(result.status, "SUCCESS")
        self.assertEqual(result.result, "Invalid email parameters")
        mock_send_mail.assert_not_called()

    @patch("users.tasks.send_mail", side_effect=Exception("SMTP error"))
    def test_send_email_failure(self, mock_send_mail):
        """
        Test that exceptions during sending are logged and do not fail the task.
        """
        recipients = ["valid@example.com"]
        with self.assertLogs("users.tasks", level="ERROR") as cm:
            result = send_welcome_oauth_email_task.delay("Subject", "Hello", recipients)

        self.assertEqual(result.status, "SUCCESS")
        self.assertIn("Email was not sent", "\n".join(cm.output))
        mock_send_mail.assert_called_once()
</file>

<file path="users/management/commands/create_default_user.py">
import logging
from django.core.management.base import BaseCommand
from django.conf import settings
from django.contrib.auth import get_user_model
from users.models import UserRole

logger = logging.getLogger(__name__)
User = get_user_model()


class Command(BaseCommand):
    help = "Create a default user with full fields (idempotent)."

    def handle(self, *args, **options):
        email = getattr(settings, "DEFAULT_USER_EMAIL", "first_user@example.com")
        password = getattr(settings, "DEFAULT_USER_PASSWORD", "firstuser12345")
        first_name = getattr(settings, "DEFAULT_USER_FIRST_NAME", "First")
        last_name = getattr(settings, "DEFAULT_USER_LAST_NAME", "User")

        user = User.objects.filter(email=email).first()
        if user:
            self.stdout.write(self.style.WARNING(f"User {email} already exists."))
            return

        role_user, _ = UserRole.objects.get_or_create(role=UserRole.Role.USER)

        user = User.objects.create_user(
            email=email,
            password=password,
            first_name=first_name,
            last_name=last_name,
            role=role_user,
            is_active=True
        )
        user.is_staff = True
        user.is_superuser = True
        user.save()

        self.stdout.write(self.style.SUCCESS(f"Default user {email} created successfully."))
        logger.info(f"Default user {email} created")
</file>

<file path="users/views/base_protected_view.py">
from rest_framework.views import APIView
from users.cookie_jwt import CookieJWTAuthentication
from users.permissions import IsAuthenticatedOr401


class CookieJWTProtectedView(APIView):
    """
    Base view that enforces authentication via access_token cookie
    and ensures the user is authenticated.
    """
    authentication_classes = [CookieJWTAuthentication]
    permission_classes = [IsAuthenticatedOr401]
</file>

<file path="users/views/oauth_view.py">
# Python standard library
import logging

# Third-party imports
import requests

# Django imports
from django.template.loader import render_to_string
from drf_spectacular.utils import extend_schema, OpenApiResponse
from rest_framework import status
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from rest_framework.throttling import AnonRateThrottle
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework_simplejwt.views import TokenObtainPairView

# Local application imports
from users.models import User
from social_django.utils import load_strategy, load_backend
from users.serializers.token_serializer import CustomTokenObtainPairSerializer
from users.serializers.user_serializers import UserSerializer
from users.tasks import send_welcome_oauth_email_task
from utils.get_default_user_role import get_default_user_role
from utils.cookies import set_auth_cookies

logger = logging.getLogger(__name__)


@extend_schema(
    tags=["Auth"],
    summary="Login with OAuth provider to obtain JWT",
    responses={
        200: CustomTokenObtainPairSerializer,
        400: OpenApiResponse(description="Invalid request or provider token"),
        403: OpenApiResponse(description="Email not provided/verified by provider"),
    },
)
class OAuthTokenObtainPairView(TokenObtainPairView):
    """
    Extended token authentication endpoint that supports both traditional email/password
    and OAuth provider authentication (Google/GitHub).
    
    Inherits from Djoser's TokenObtainPairView to maintain all standard functionality
    while adding OAuth support through a unified authentication endpoint.
    
    Endpoint: api/v1/auth/oauth/login/
    Methods: POST
    
    Request Formats:
        - OAuth: {"provider": "google|github", "access_token": "oauth_token"}
    """
    permission_classes = [AllowAny]
    authentication_classes = []
    throttle_classes = [AnonRateThrottle]

    def post(self, request, *args, **kwargs):
        """
        Handle authentication requests, routing to appropriate method based on input.

        Args:
            request: DRF request object containing authentication credentials
            *args: Additional positional arguments
            **kwargs: Additional keyword arguments

        Returns:
            Response: JSON containing either:
                - JWT tokens and user data (success)
                - Error message (failure)

        Status Codes:
            - 200 OK: Successful authentication
            - 400 Bad Request: Missing/invalid parameters
            - 401 Unauthorized: Invalid credentials
        """
        provider = request.data.get("provider")
        access_token = request.data.get("access_token")

        if not isinstance(provider, str) or not provider.strip():
            return Response(
                {"error": "Invalid provider"},
                status=status.HTTP_400_BAD_REQUEST
            )

        if not access_token:
            return Response(
                {"error": "access_token is missing"},
                status=status.HTTP_400_BAD_REQUEST
            )

        provider = provider.lower().strip()
        if provider not in ["google", "github"]:
            return Response(
                {"error": "Unsupported OAuth provider"},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            user = self.authenticate_with_provider(provider, access_token)
        except Exception as e:
            logger.error("OAuth authentication failed", exc_info=True)
            return Response(
                {"error": "OAuth authentication failed", "detail": str(e)},
                status=status.HTTP_400_BAD_REQUEST
            )

        return self.generate_jwt_response(user)

    def authenticate_with_provider(self, provider, access_token):
        """
        Authenticate user using social-auth-app-django backend.
        Raises ValueError if token is invalid or expired.
        """
        PROVIDER_BACKEND_MAP = {
            "google": "google-oauth2",
            "github": "github",
        }
        provider_name = PROVIDER_BACKEND_MAP.get(provider)
        strategy = load_strategy()
        backend = load_backend(strategy=strategy, name=provider_name, redirect_uri=None)

        try:
            user = backend.do_auth(access_token)
        except Exception as e:
            logger.error("Backend authentication error", exc_info=True)
            raise ValueError("Invalid or expired token") from e

        if not user:
            raise ValueError("Invalid or expired token")

        existing = User.objects.filter(email=user.email).first()
        if existing:
            updated = False
            if user.first_name and user.first_name != existing.first_name:
                existing.first_name = user.first_name
                updated = True
            if user.last_name and user.last_name != existing.last_name:
                existing.last_name = user.last_name
                updated = True
            if updated:
                existing.save()
            user = existing

        if provider == "github" and not getattr(user, "email", None):
            try:
                emails = requests.get(
                    "https://api.github.com/user/emails",
                    headers={"Authorization": f"token {access_token}"}
                ).json()
            except Exception as e:
                logger.error("Failed to fetch GitHub emails", exc_info=True)
                raise ValueError("Cannot retrieve email from GitHub") from e

            primary_email = next(
                (e["email"] for e in emails if e.get("primary") and e.get("verified")),
                None
            )
            if not primary_email:
                raise ValueError("Email not provided by GitHub")
            user.email = primary_email
            user.save()

        if not hasattr(user, "role") or user.role is None:
            user.role = get_default_user_role()
            user.save()

        self.send_welcome_email(user, provider)
        return user

    def send_welcome_email(self, user, provider):
        """
        Send welcome email after OAuth login/registration.
        """
        PROVIDER_MAP = {"google": "Google", "github": "GitHub"}
        provider_name = PROVIDER_MAP.get(provider, provider)
        action = "registered" if not user.last_login else "logged in"

        subject = "Welcome to Forum — your space for innovation!"
        message = render_to_string(
            "email/welcome_oauth_email.txt",
            {"action": action, "provider_name": provider_name},
        )
        send_welcome_oauth_email_task.delay(
            subject=subject,
            message=message,
            recipient_list=[user.email],
        )

    def generate_jwt_response(self, user):
        """
        Generate standardized JWT token response with user data.

        Args:
            user: Authenticated user instance

        Returns:
            Response: DRF Response object containing:
                - refresh: JWT refresh token
                - access: JWT access token
                - user: Serialized user data
        """
        if not user.is_active:
            return Response(
                {"detail": "Account is not active. Please verify your email."},
                status=403
            )

        refresh = RefreshToken.for_user(user)
        refresh_token = str(refresh)
        access = str(refresh.access_token)
        response = Response({
            "user": UserSerializer(user).data
        })
        set_auth_cookies(response, access, refresh_token)
        return response
</file>

<file path="utils/cookies.py">
from django.conf import settings
from core.settings.third_party_settings import SIMPLE_JWT


def set_auth_cookies(response, access_token: str, refresh_token: str = None):
    """
    Set access and refresh tokens as HttpOnly cookies
    using parameters from settings.SIMPLE_JWT.
    """

    cookie_settings = {
        "httponly": SIMPLE_JWT.get("AUTH_COOKIE_HTTP_ONLY", True),
        "secure": SIMPLE_JWT.get("AUTH_COOKIE_SECURE", True),
        "samesite": SIMPLE_JWT.get("AUTH_COOKIE_SAMESITE", "Lax"),
        "path": SIMPLE_JWT.get("AUTH_COOKIE_PATH", "/"),
        "domain": SIMPLE_JWT.get("AUTH_COOKIE_DOMAIN", None),
    }

    access_lifetime = settings.SIMPLE_JWT["ACCESS_TOKEN_LIFETIME"]
    response.set_cookie(
        key="access_token",
        value=access_token,
        max_age=int(access_lifetime.total_seconds()),
        **cookie_settings,
    )

    if refresh_token:
        refresh_lifetime = settings.SIMPLE_JWT["REFRESH_TOKEN_LIFETIME"]
        response.set_cookie(
            key="refresh_token",
            value=refresh_token,
            max_age=int(refresh_lifetime.total_seconds()),
            **cookie_settings,
        )

    return response


def clear_auth_cookies(response):
    """
    Remove authentication cookies (access_token and refresh_token).

    Args:
        response: Django/DRF Response object.

    Returns:
        response: The same Response object with cookies deleted.
    """
    response.delete_cookie("access_token")
    response.delete_cookie("refresh_token")
    return response
</file>

<file path=".env.example">
DEBUG=False
SECRET_KEY=your-secret-key-here
# python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
DB_NAME=your_db_name
DB_USER=your_db_user
DB_PASSWORD=your_db_password
DB_HOST=db
DB_PORT=5432

PGADMIN_DEFAULT_PASSWORD=your_pgadmin_password
PGADMIN_DEFAULT_EMAIL=your_email

POSTGRES_USER=your_postgres_user

MAX_RETRIES=30
SLEEP_DURATION=2

# Elasticsearch
ELASTICSEARCH_HOST=http://elasticsearch:9200

# Google OAuth
GOOGLE_CLIENT_ID=google-client-id
GOOGLE_CLIENT_SECRET=google-client-secret

# GitHub OAuth
GITHUB_CLIENT_ID=github-client-id
GITHUB_CLIENT_SECRET=github-client-secret

# Redis for chat
REDIS_HOST=127.0.0.1
REDIS_PORT=6379

EMAIL_HOST_PASSWORD=email-host-password
EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
EMAIL_HOST=smtp.sendgrid.net
EMAIL_PORT=587
EMAIL_HOST_USER=apikey
EMAIL_USE_TLS=True
DEFAULT_FROM_EMAIL=pbeinner@gmail.com

TEST_USER_PASSWORD=testpassword123

DEFAULT_USER_EMAIL=first_user@example.com
DEFAULT_USER_PASSWORD=firstuser12345
DEFAULT_USER_FIRST_NAME=First
DEFAULT_USER_LAST_NAME=User

MAX_MESSAGE_LENGTH=1000
MIN_MESSAGE_LENGTH=1
MESSAGE_RATE_LIMIT=5
RATE_LIMIT_WINDOW=10

MONGO_DB=chat
MONGO_HOST=127.0.0.1
MONGO_PORT=27017

# API docs toggle (Swagger/ReDoc)
DOCS_ENABLED=true
</file>

<file path="chat/consumers.py">
import json
import logging
import os
import re
import time
from collections import defaultdict
from channels.generic.websocket import AsyncWebsocketConsumer
from channels.db import database_sync_to_async
from mongoengine import ValidationError, DoesNotExist
from typing import Optional, Tuple
from chat.documents import Room, Message
from core.settings.constants import FORBIDDEN_WORDS_SET
from users.models import User

logger = logging.getLogger(__name__)

MAX_MESSAGE_LENGTH = int(os.getenv("MAX_MESSAGE_LENGTH", 1000))
MIN_MESSAGE_LENGTH = int(os.getenv("MIN_MESSAGE_LENGTH", 1))
MESSAGE_RATE_LIMIT = int(os.getenv("MESSAGE_RATE_LIMIT", 5))
RATE_LIMIT_WINDOW = int(os.getenv("RATE_LIMIT_WINDOW", 10))

user_message_times = defaultdict(list)


class InvestorStartupMessageConsumer(AsyncWebsocketConsumer):
    """
    WebSocket consumer for real-time messaging between investors and startups.

    Features:
        - Authenticates users and validates roles (Investor/Startup).
        - Creates or retrieves a chat room based on participants.
        - Broadcasts messages in a room group.
        - Validates messages for length, forbidden words, spam, and rate limits.
        - Persists messages in MongoDB using MongoEngine.

    Attributes:
        user (Optional[User]): Current WebSocket user.
        other_user (Optional[User]): The other participant in the chat.
        room (Optional[Room]): MongoDB Room object for the chat.
        room_group_name (Optional[str]): Channels group name for broadcasting messages.
    """
    user: Optional[User]
    other_user: Optional[User]
    room: Optional[Room]
    room_group_name: Optional[str]

    async def connect(self):
        """
        Handles WebSocket connection.

        Workflow:
            1. Checks user authentication.
            2. Retrieves the other user by email.
            3. Creates or fetches a chat room (investor-startup).
            4. Joins the Channels group and accepts the connection.
        """
        self.user = self.scope.get('user', None)
        other_user_email = self.scope["url_route"]["kwargs"].get("other_user_email")

        if not self.user or not self.user.is_authenticated:
            logger.warning("[CONNECT] Unauthenticated user")
            await self.close(code=4401)
            return

        self.other_user = await self.get_user_by_email(other_user_email)
        if not self.other_user:
            logger.warning("[CONNECT] Other user not found: %s", other_user_email)
            await self.close(code=4404)
            return

        try:
            self.room, created = await self.get_or_create_chat_room(self.user, self.other_user)
            logger.info("[CONNECT] Room %s, created=%s", self.room.name, created)
        except ValidationError as ve:
            logger.error("[CONNECT] Failed to create/get room: %s", ve)
            await self.close(code=1011)
            return

        self.room_group_name = f"chat_{self.room.id}"

        try:
            await self.channel_layer.group_add(self.room_group_name, self.channel_name)
            await self.accept()
            logger.info("[CONNECT] Connected to room group: %s", self.room_group_name)
        except Exception as e:
            logger.error("[CONNECT] Failed to add channel: %s", e)
            await self.close(code=1011)

    async def disconnect(self, close_code):
        """
        Handles WebSocket disconnection.

        Removes the channel from the room group.
        """
        try:
            await self.channel_layer.group_discard(self.room_group_name, self.channel_name)
            logger.info("[DISCONNECT] Left room: %s", self.room_group_name)
        except Exception as e:
            logger.error("[DISCONNECT] Failed to discard channel: %s", e)

    async def receive(self, text_data=None, bytes_data=None):
        """
        Handles incoming WebSocket messages.

        Validates message length, forbidden words, spam patterns, and rate limits.
        Persists the message and broadcasts it to the room group.

        Args:
            text_data (str): JSON-formatted message data.
            bytes_data (bytes): Not used.
        """
        try:
            data = json.loads(text_data)
            message = data.get("message", "").strip()
            if not message:
                return
            if len(message) < MIN_MESSAGE_LENGTH or len(message) > MAX_MESSAGE_LENGTH:
                await self.send(
                    json.dumps({"error": f"Message length must be {MIN_MESSAGE_LENGTH}-{MAX_MESSAGE_LENGTH} chars"}))
                return
            if any(word in message.lower() for word in FORBIDDEN_WORDS_SET):
                await self.send(json.dumps({"error": "Message contains forbidden content"}))
                return
            if re.match(r"(.)\1{10,}", message):
                await self.send(json.dumps({"error": "Message looks like spam"}))
                return

            now = time.time()
            times = user_message_times[self.channel_name]
            times = [t for t in times if now - t < RATE_LIMIT_WINDOW]
            times.append(now)
            user_message_times[self.channel_name] = times
            if len(times) > MESSAGE_RATE_LIMIT:
                await self.send(json.dumps({"error": "Rate limit exceeded"}))
                return

            try:
                msg = await self.save_message(message)
                logger.info("[RECEIVE] Message saved from %s: %s", self.user.email, msg.text[:50])
            except ValidationError as ve:
                logger.error("[RECEIVE] Failed to save message: %s", ve)
                await self.send(json.dumps({"error": "Failed to save message"}))
                return

            await self.channel_layer.group_send(
                self.room_group_name,
                {
                    "type": "receive_chat_message",
                    "message": message,
                    "sender": self.user.email
                }
            )

        except json.JSONDecodeError as e:
            logger.error("Invalid JSON: %s | %s", text_data, e)
        except Exception as e:
            logger.error("Error in receive: %s", e)

    async def receive_chat_message(self, event):
        """
        Handles messages received from the room group and sends them to the WebSocket client.

        This method is called by Channels when a message is broadcasted to the group.
        Logs sending activity for monitoring real-time communication.

        Args:
            event (dict): Contains 'message' (str) and 'sender' (str) keys.
        """
        message = event.get("message", "")
        sender = event.get("sender", "")

        try:
            await self.send(json.dumps({
                "message": message,
                "sender": sender
            }))
            logger.info("[SEND_MESSAGE] Sent message to %s in room %s: %s",
                        self.user.email if self.user else "UNKNOWN",
                        self.room_group_name,
                        message[:50] + ("..." if len(message) > 50 else ""))
        except Exception as e:
            logger.error("[receive_chat_message] Failed to send message: %s", e)

    @database_sync_to_async
    def get_user_by_email(self, email: str) -> Optional[User]:
        """
        Retrieves a User object by email.

        Args:
            email (str): Email of the user.

        Returns:
            Optional[User]: User instance or None if not found.
        """
        try:
            return User.objects.get(email=email)
        except User.DoesNotExist:
            return None

    @database_sync_to_async
    def get_or_create_chat_room(self, user1, user2) -> Tuple[Room, bool]:
        """
        Creates or retrieves a chat room between an investor and a startup.

        Args:
            user1 (User): One participant.
            user2 (User): Another participant.

        Returns:
            Tuple[Room, bool]: The Room instance and a boolean indicating if it was created.
        """
        investor = user1 if hasattr(user1, 'roles') and user1.roles.filter(name='Investor').exists() else user2
        startup = user2 if hasattr(user2, 'roles') and user2.roles.filter(name='Startup').exists() else user1

        room_name = f"{investor.email}_{startup.email}"

        try:
            room = Room.objects.get(name=room_name)
            created = False
        except DoesNotExist:
            room = Room(name=room_name, participants=[investor.email, startup.email])
            try:
                room.save()
                created = True
            except ValidationError as ve:
                logger.error("[get_or_create_chat_room] Failed to save room: %s", ve)
                raise ve

        return room, created

    @database_sync_to_async
    def save_message(self, message_text: str) -> Message:
        """
        Saves a message to the Room in MongoDB.

        Adds missing participants to the room if necessary.

        Args:
            message_text (str): The text of the message.

        Returns:
            Message: The saved Message instance.
        """
        sender_email = self.user.email
        receiver_email = self.other_user.email if self.other_user else None

        updated = False
        for email in [sender_email, receiver_email]:
            if email and email not in self.room.participants:
                self.room.participants.append(email)
                updated = True
        if updated:
            try:
                self.room.save()
                logger.info("[SAVE_MESSAGE] Updated participants for room: %s", self.room.name)
            except ValidationError as ve:
                logger.error("[SAVE_MESSAGE] Failed to update room participants: %s", ve)
                raise ve

        msg = Message(room=self.room, sender_email=sender_email, receiver_email=receiver_email, text=message_text)
        try:
            msg.save()
            logger.info("[SAVE_MESSAGE] Saved message in room '%s'", self.room.name)
        except ValidationError as ve:
            logger.error("[SAVE_MESSAGE] Failed to save message: %s", ve)
            raise ve

        return msg
</file>

<file path="chat/documents.py">
import os
from mongoengine import CASCADE
from mongoengine import (
    Document, StringField, ListField, ReferenceField,
    DateTimeField, BooleanField, ValidationError
)
from datetime import datetime, timezone
import re
from core.settings.constants import FORBIDDEN_WORDS_SET

MAX_PARTICIPANTS = int(os.getenv("MAX_PARTICIPANTS", 50))
MIN_MESSAGE_LENGTH = int(os.getenv("MIN_MESSAGE_LENGTH", 1))
MAX_MESSAGE_LENGTH = int(os.getenv("MAX_MESSAGE_LENGTH", 1000))


class Room(Document):
    """
    Represents a chat room in MongoDB storing user emails as participants
    (bridge key to PostgreSQL users).
    """

    NAME_REGEX = r'^[a-zA-Z0-9_-]+$'

    name = StringField(
        required=True,
        min_length=3,
        max_length=50,
        regex=NAME_REGEX,
        unique=True
    )
    is_group = BooleanField(default=False)
    participants = ListField(StringField())  # <-- emails
    created_at = DateTimeField(default=lambda: datetime.now(timezone.utc))
    updated_at = DateTimeField(default=lambda: datetime.now(timezone.utc))

    meta = {"collection": "rooms"}

    def clean(self):
        """
        Validate room data before saving:
        - Remove duplicate emails.
        - Limit participants to MAX_PARTICIPANTS.
        """
        self.participants = list(dict.fromkeys(self.participants))

        if len(self.participants) > MAX_PARTICIPANTS:
            raise ValidationError(f"Room cannot have more than {MAX_PARTICIPANTS} participants")

    def save(self, *args, **kwargs):
        """ Update the 'updated_at' timestamp before saving. """
        self.updated_at = datetime.now(timezone.utc)
        self.clean()
        return super().save(*args, **kwargs)


class Message(Document):
    """
    Represents a chat message stored in MongoDB using sender and receiver emails.

    Validation rules:
        - Room must exist and be persisted.
        - Sender must be a participant of the room.
        - Private messages: must have exactly 2 participants and a receiver.
        - Group messages: receiver can be None; if specified, must be a participant.
        - Message text cannot be empty.
        - Forbidden words are not allowed.
        - Messages with repeated characters (spam) are rejected.
    """

    room = ReferenceField(Room, required=True, reverse_delete_rule=CASCADE)
    sender_email = StringField(required=True)
    receiver_email = StringField(required=False)
    text = StringField(required=True, min_length=MIN_MESSAGE_LENGTH, max_length=MAX_MESSAGE_LENGTH)
    timestamp = DateTimeField(default=lambda: datetime.now(timezone.utc))
    is_read = BooleanField(default=False)

    def clean(self):
        """ Validate message before saving. """
        if not self.room or not self.room.id:
            raise ValidationError("Message must belong to a persisted room.")

        if self.sender_email not in self.room.participants:
            raise ValidationError("Sender must be a participant of the room.")

        if self.room.is_group:
            if self.receiver_email is not None and self.receiver_email not in self.room.participants:
                raise ValidationError("Receiver must be a participant of the group.")
        else:
            if len(self.room.participants) != 2:
                raise ValidationError("Private room must have exactly 2 participants.")
            if not self.receiver_email:
                raise ValidationError("Receiver is required in private messages.")

        if not self.text.strip():
            raise ValidationError("Message text cannot be empty.")

        lowered = self.text.lower()
        if FORBIDDEN_WORDS_SET:
            forbidden_pattern = r'\b(?:' + '|'.join(re.escape(word) for word in FORBIDDEN_WORDS_SET) + r')\b'
            if re.search(forbidden_pattern, lowered):
                raise ValidationError("Message contains forbidden content.")

        if re.search(r"([^aeiou\s])\1{10,}", self.text, re.IGNORECASE):
            raise ValidationError("Message looks like spam.")

    def save(self, *args, **kwargs):
        """ Update timestamp and clean before saving. """
        self.timestamp = datetime.now(timezone.utc)
        self.clean()
        return super().save(*args, **kwargs)
</file>

<file path="communications/views.py">
import logging

from django.utils import timezone
from django.utils.dateparse import parse_datetime
from rest_framework import viewsets, status, mixins
from rest_framework.decorators import action
from rest_framework.pagination import PageNumberPagination
from rest_framework.response import Response

from users.cookie_jwt import CookieJWTAuthentication
from users.permissions import IsAuthenticatedOr401
from .models import (
    Notification,
    UserNotificationPreference,
    NotificationType,
    UserNotificationTypePreference
)
from .serializers import (
    NotificationSerializer,
    UserNotificationPreferenceSerializer,
    NotificationTypeSerializer,
    UserNotificationTypePreferenceSerializer
)


class DefaultPageNumberPagination(PageNumberPagination):
    page_size = 10

logger = logging.getLogger(__name__)


class NotificationViewSet(
    mixins.ListModelMixin,
    mixins.RetrieveModelMixin,
    mixins.DestroyModelMixin,
    viewsets.GenericViewSet,
):
    """
    ViewSet for managing user notifications.
    """
    serializer_class = NotificationSerializer
    authentication_classes = [CookieJWTAuthentication]
    permission_classes = [IsAuthenticatedOr401]
    lookup_field = 'notification_id'
    http_method_names = ['get', 'post', 'delete', 'head', 'options']
    pagination_class = DefaultPageNumberPagination

    def get_queryset(self):
        """Return only the authenticated user's notifications with helpful joins and filters.

        Supported query params:
        - is_read: 'true' | 'false'
        - type: notification type code (slug)
        - priority: 'low' | 'medium' | 'high'
        - created_after, created_before: ISO datetime strings
        """
        qs = (
            Notification.objects
            .filter(user=self.request.user)
            .select_related('notification_type', 'triggered_by_user')
        )

        params = self.request.query_params

        def _parse_bool(val):
            if isinstance(val, bool):
                return val
            if val is None:
                return None
            s = str(val).strip().lower()
            if s in {'1', 'true', 'yes'}:
                return True
            if s in {'0', 'false', 'no'}:
                return False
            return None

        is_read_param = _parse_bool(params.get('is_read'))
        if is_read_param is not None:
            qs = qs.filter(is_read=is_read_param)

        ntype_code = params.get('type')
        if ntype_code:
            qs = qs.filter(notification_type__code=ntype_code)


        priority = params.get('priority')
        if priority in {'low', 'medium', 'high'}:
            qs = qs.filter(priority=priority)

        created_after = params.get('created_after')
        if created_after:
            dt = parse_datetime(created_after)
            if dt:
                qs = qs.filter(created_at__gte=dt)

        created_before = params.get('created_before')
        if created_before:
            dt = parse_datetime(created_before)
            if dt:
                qs = qs.filter(created_at__lte=dt)

        return qs
    
    
    
    @action(detail=False, methods=['get'], url_path='unread_count')
    def unread_count(self, request):
        """Get the count of unread notifications for the current user."""
        count = self.get_queryset().filter(is_read=False).count()
        return Response({'unread_count': count})
    
    @action(detail=True, methods=['post'], url_path='mark_as_read')
    def mark_as_read(self, request, notification_id=None):
        """
        Mark a notification as read.

        Response: {"status": "notification marked as read"}
        """
        notification = self.get_object()
        if not notification.is_read:
            notification.is_read = True
            notification.save(update_fields=['is_read', 'updated_at'])
        
        logger.info(
            "notifications.mark_as_read user=%s notification_id=%s",
            getattr(request.user, 'user_id', getattr(request.user, 'id', None)),
            str(notification.notification_id),
        )
        return Response({'status': 'notification marked as read'})

    @action(detail=True, methods=['post'], url_path='mark_as_unread')
    def mark_as_unread(self, request, notification_id=None):
        """
        Mark a notification as unread.

        Response: {"status": "notification marked as unread"}
        """
        notification = self.get_object()
        if notification.is_read:
            notification.is_read = False
            notification.save(update_fields=['is_read', 'updated_at'])
        logger.info(
            "notifications.mark_as_unread user=%s notification_id=%s",
            getattr(request.user, 'user_id', getattr(request.user, 'id', None)),
            str(notification.notification_id),
        )
        return Response({'status': 'notification marked as unread'})
    
    @action(detail=False, methods=['post'], url_path='mark_all_as_read')
    def mark_all_as_read(self, request):
        """
        Mark all notifications as read for the current user.

        Response: {"status": "marked <n> notifications as read"}
        """
        now = timezone.now()
        updated = self.get_queryset().filter(is_read=False).update(is_read=True, updated_at=now)
        # Audit log
        logger.info(
            "notifications.mark_all_as_read user=%s updated=%d",
            getattr(request.user, 'user_id', getattr(request.user, 'id', None)),
            updated,
        )
        return Response({'status': f'marked {updated} notifications as read'})

    @action(detail=False, methods=['post'], url_path='mark_all_as_unread')
    def mark_all_as_unread(self, request):
        """
        Mark all notifications as unread for the current user.

        Response: {"status": "marked <n> notifications as unread"}
        """
        now = timezone.now()
        updated = self.get_queryset().filter(is_read=True).update(is_read=False, updated_at=now)
        logger.info(
            "notifications.mark_all_as_unread user=%s updated=%d",
            getattr(request.user, 'user_id', getattr(request.user, 'id', None)),
            updated,
        )
        return Response({'status': f'marked {updated} notifications as unread'})

    @action(detail=True, methods=['get'], url_path='resolve')
    def resolve(self, request, notification_id=None):
        """
        Return just the redirect payload for the notification to help lightweight clients.

        Response: {"redirect": {...}}
        """
        notification = self.get_object()
        serializer = self.get_serializer(notification)
        data = serializer.data.get('redirect')
        return Response({'redirect': data})


class NotificationTypeViewSet(viewsets.ReadOnlyModelViewSet):
    """
    API endpoint that allows notification types to be viewed.
    Requires authentication.
    """
    queryset = NotificationType.objects.filter(is_active=True)
    serializer_class = NotificationTypeSerializer
    authentication_classes = [CookieJWTAuthentication]
    permission_classes = [IsAuthenticatedOr401]
    pagination_class = None


class UserNotificationPreferenceViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows users to view and update their notification preferences.
    """
    serializer_class = UserNotificationPreferenceSerializer
    authentication_classes = [CookieJWTAuthentication]
    permission_classes = [IsAuthenticatedOr401]
    http_method_names = ['get', 'patch', 'head', 'options']

    def get_queryset(self):
        """Return only the current user's preferences."""
        return UserNotificationPreference.objects.filter(user=self.request.user)

    def get_object(self):
        """
        Return the current user's preferences, creating them if they don't exist.
        """
        queryset = self.filter_queryset(self.get_queryset())
        obj = queryset.first()
        
        if obj is None:
            obj = UserNotificationPreference.objects.create(user=self.request.user)
            
            notification_types = NotificationType.objects.filter(is_active=True)
            for notification_type in notification_types:
                UserNotificationTypePreference.objects.create(
                    user_preference=obj,
                    notification_type=notification_type,
                    frequency='immediate'
                )
        
        return obj

    @action(detail=True, methods=['patch'])
    def update_type_preference(self, request, pk=None):
        """
        Update a specific notification type preference.
        Expected payload: {"notification_type_id": 1, "frequency": "immediate"}
        Errors: 400 (validation), 404 (preference not found)
        """
        preference = self.get_object()
        notification_type_id = request.data.get('notification_type_id')
        frequency = request.data.get('frequency')

        if notification_type_id is None or frequency is None:
            return Response(
                {'error': 'notification_type_id and frequency are required'},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            nt_id = int(notification_type_id)
        except (TypeError, ValueError):
            return Response(
                {'error': 'notification_type_id must be an integer'},
                status=status.HTTP_400_BAD_REQUEST
            )

        type_pref = preference.type_preferences.filter(notification_type_id=nt_id).first()
        if not type_pref:
            return Response(
                {'error': 'Notification type preference not found'},
                status=status.HTTP_404_NOT_FOUND
            )

        old_frequency = type_pref.frequency
        serializer = UserNotificationTypePreferenceSerializer(
            type_pref,
            data={'frequency': frequency},
            partial=True,
            context={'request': request},
        )
        if not serializer.is_valid():
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        serializer.save()
        # Audit log
        logger.info(
            "notifications.update_type_preference user=%s notification_type_id=%s %s->%s",
            getattr(request.user, 'user_id', getattr(request.user, 'id', None)),
            nt_id,
            old_frequency,
            serializer.instance.frequency,
        )
        return Response(serializer.data)

    @action(detail=False, methods=['get'], url_path='options', url_name='preference-options')
    def preference_options(self, request):
        """
        Return business-level options for notification preferences (not HTTP OPTIONS).

        Currently returns available frequency choices.
        """
        from .models import NotificationFrequency

        return Response({
            'frequencies': [
                {'value': choice[0], 'display': str(choice[1])}
                for choice in NotificationFrequency.choices
            ]
        })
</file>

<file path="frontend/src/components/App/app.jsx">
import { BrowserRouter, Route, Routes } from 'react-router-dom';
import React from 'react';
import AuthProvider from '../../provider/AuthProvider/authProvider';
import Layout from '../Layout/layout';
import ProfileEditing from '../../pages/ProfileEditing/profileEditing';
import NotFound from '../../pages/NotFound/notFound';
import HomePage from '../../pages/Home/home';
import CompanyList from '../../pages/CompanyList/companyList';
import FeedbackForm from '../../pages/FeedbackForm/feedbackForm';
import ForgotPassword from '../../pages/ForgotPassword/forgotPassword';
import RestorePassword from '../../pages/RestorePassword/restorePassword';
import ProfilePage from '../../pages/ProfilePage/profilePage';
import Policy from '../../pages/Policy/policy';
import WhoWeAre from '../../pages/WhoWeAre/whoWeAre';
import LogInPage from '../../pages/LogIn/logIn';
import RegistrationPage from '../../pages/Registration/registration';
import AuthorizationWrapper from '../../pages/AuthorizationWrapper/authorizationWrapper';
import RegistrationConfirmation from '../../pages/RegistrationConfirmation/registrationConfirmation';
import RegistrationReconfirmation from '../../pages/RegistrationReconfirmation/registrationReconfirmation';
import RegistrationError from '../../pages/RegistrationError/registrationError';
import RegistrationUserConfirmed from '../../pages/RegistrationUserConfirmed/registrationUserConfirmed';
import EmailConfirmationHandler from '../../pages/EmailConfirmationHandler/emailConfirmationHandler';
import RestorePasswordDone from '../../pages/RestorePasswordDone/restorePasswordDone';
import RegistrationUserRepresent from '../../pages/RegistrationUserRepresent/registrationUserRepresent';
import RegistrationCompleted from '../../pages/RegistrationCompleted/registrationCompleted';
import ForgotPasswordDone from '../../pages/ForgotPasswordDone/forgotPasswordDone';

/**
 * Main application component that sets up routing and provider providers.
 * It wraps the application in an AuthProvider for authentication provider
 * and uses React Router for navigation.
 * The main layout is defined in the Layout component, which includes
 * the header, sidebar, and footer.
 * The Routes define the various pages of the application, including:
 *
 * @component
 *
 * @returns {JSX.Element} The main application component.
 */
function App() {
    return (
        <AuthProvider>
            <BrowserRouter>
                <Routes>

                    {/* Main layout */}
                    <Route path="/" element={<Layout />}>

                        {/* Home page */}
                        <Route index element={<HomePage />} />

                        {/* Company list */}
                        <Route path="companies" element={<CompanyList />} />

                        {/* Feedback form */}
                        <Route path="feedback" element={<FeedbackForm />} />

                        {/* Policy */}
                        <Route path="policy" element={<Policy />} />

                        {/* Who we are */}
                        <Route path="who-we-are" element={<WhoWeAre />} />

                        <Route path={"auth"} element={<AuthorizationWrapper />}>

                            {/* Log in */}
                            <Route path="login" element={<LogInPage />} />

                            {/* Registration */}
                            <Route path="register" element={<RegistrationPage />} />

                            <Route path="register/confirm" element={<RegistrationConfirmation />} />
                            <Route path="register/re-confirm" element={<RegistrationReconfirmation />} />
                            <Route path="register/error" element={<RegistrationError />} />
                            <Route path="register/user-confirmed" element={<RegistrationUserConfirmed />} />
                            <Route path="register/user-represent" element={<RegistrationUserRepresent />} />
                            <Route path="register/completed" element={<RegistrationCompleted />} />

                            {/* Email verificator */}
                            <Route path="verify-email/:user_id/:token" element={<EmailConfirmationHandler />} />

                            {/* Forgot password */}
                            <Route path="forgot" element={<ForgotPassword />} />
                            <Route path="forgot/done" element={<ForgotPasswordDone />} />

                            {/* Restore password */}
                            <Route path="restore-password" element={<RestorePassword />} />
                            <Route path="restore-password/done" element={<RestorePasswordDone />} />
                        </Route>

                        {/* Profile */}
                        <Route path="profile">

                            {/* Company profile */}
                            <Route path="company/:uid" element={<ProfilePage />}>

                                {/* Profile editing */}
                                <Route path="edit" element={<ProfileEditing />} />
                            </Route>
                        </Route>

                        {/* Page not found */}
                        <Route path="*" element={<NotFound />} />
                    </Route>
                </Routes>
            </BrowserRouter>
        </AuthProvider>
    );
}

export default App;
</file>

<file path="frontend/src/components/Panel/panel.jsx">
import "./panel.css";
import PropTypes from 'prop-types';
import clsx from 'clsx';
import { Link } from 'react-router-dom';
import React from 'react';

/**
 * Panel component to wrap content with a styled container.
 * It can be used to create sections with titles, bodies, and navigation.
 * @param children - The content to be displayed inside the panel.
 * @returns {JSX.Element}
 */
function PanelTitle({ children }) {
    return <h2 className={'panel--title'}>{ children }</h2>;
}

PanelTitle.propTypes = {
    children: PropTypes.node.isRequired
}

/**
 * PanelBody component to wrap the main content of the panel.
 * It includes horizontal rules before and after the content for visual separation.
 * It is typically used to display the main body of the panel.
 * @param children - The content to be displayed inside the panel body.
 * @returns {JSX.Element}
 */
function PanelBody({ children }) {
    return (
        <>
            <hr className={'panel--hr'} />
            <div className={'panel--content'}>
                { children }
            </div>
            <hr className={'panel--hr'} />
        </>
    );
}

PanelBody.propTypes = {
    children: PropTypes.node.isRequired
}

/**
 * PanelBodyTitle component to display a title with a star indicator and additional text.
 * It is typically used to highlight important titles within the panel body.
 * The star indicates that the title is required or important.
 * It accepts a title and children for additional text.
 * @param title - The title text to be displayed, typically indicating a required field.
 * @param children - Additional text to be displayed below the title, providing more context or instructions.
 * @param className - Additional CSS class names to apply to the title container.
 * @param required - A boolean indicating if the title is required (typically used to show a star).
 * @returns {JSX.Element}
 */
function PanelBodyTitle({ title, children, className = '', required = true }) {
    return (
        <div className={clsx('content--text-container', className)}>
            {required && <span className={'content--text content--text__starred content--text__margin'}>*</span>}
            <div>
                {title && <span className={'content--text'}>{ title }</span>}
                {children && <p className={'content--subtext'}>{ children }</p>}
            </div>
        </div>
    );
}

PanelBodyTitle.propTypes = {
    required: PropTypes.bool,
    title: PropTypes.string,
    children: PropTypes.node,
    className: PropTypes.string
}

/**
 * PanelBodyBottomLink is used in pair with input field.
 *
 * @example
 * <Input>Password</Input>
 * <PanelBodyBottomLink
 *     linkText="Забули пароль?"
 *     to="/auth/forgot"
 * />
 *
 * @component
 *
 * @param linkText - Text that will be displayed
 * @param to - Link URL
 * @param className - Additional style settings
 * @returns {JSX.Element}
 */
const PanelBodyBottomLink = React.memo(function PanelBodyBottomLink({ linkText, to, className }) {
    return (
        <Link to={to} className={clsx('text-underline', 'text-bold', 'content__link-container', className)}>
            { linkText }
        </Link>
    );
});

PanelBodyBottomLink.propTypes = {
    linkText: PropTypes.string.isRequired,
    to: PropTypes.string.isRequired,
    className: PropTypes.string
}

/**
 * PanelNavigation component to wrap navigation elements within the panel.
 * It is typically used to display navigation links or buttons related to the panel's content.
 * @param children - The navigation elements to be displayed inside the panel navigation.
 * @returns {JSX.Element}
 */
function PanelNavigation({ children }) {
    return <div className={"panel--navigation"}>{ children }</div>;
}

PanelNavigation.propTypes = {
    children: PropTypes.node.isRequired
}

/**
 * Panel component to create a styled container for the panel.
 * It accepts a className prop for additional styling and wraps the children content.
 * This component is typically used to create a consistent layout for panels.
 * @param className - Additional CSS class names to apply to the panel.
 * @param children - The content to be displayed inside the panel.
 * @returns {JSX.Element}
 */
function Panel({ className, children }) {
    return <div className={clsx('panel', 'panel__margin', className)}>{children}</div>;
}

export { PanelTitle, PanelBody, PanelBodyTitle, PanelBodyBottomLink, PanelNavigation };
export default Panel;
</file>

<file path="frontend/src/pages/ForgotPassword/forgotPassword.jsx">
import './forgotPassword.css';
import Panel, { PanelBody, PanelBodyTitle, PanelNavigation, PanelTitle } from '../../components/Panel/panel';
import Button from '../../components/Button/button';
import { Link, useNavigate } from 'react-router-dom';
import TextInput from '../../components/TextInput/textInput';
import { Validator } from '../../utils/validation/validate';
import { useAuthContext } from '../../provider/AuthProvider/authProvider';
import bruteForce from '../../utils/bruteForce/bruteForce';
import { useFormWithProtection } from '../../hooks/useFormWithProtection';
import { useFormWithServerErrors } from '../../hooks/useFormWithServerErrors';

/**
 * ForgotPassword component
 * @returns {JSX.Element}
 */
function ForgotPassword() {
    const { requestReset } = useAuthContext();

    // Hook to navigate programmatically
    const navigate = useNavigate();

    // Brute force max attempts constant
    const MAX_ATTEMPTS = 5;

    // Form with protection hook
    const form = useFormWithProtection({
        email: "",
        unexpected: "",
    });

    // Override message for email error
    const errorValidationMessages = {
        email: 'Введіть адресу електронної пошти у форматі name@example.com'
    };

    // Function to handle server-side errors
    const extractError = (error) => {
        if (error?.response?.data?.email) {
            return { email: Validator.serverSideErrorMessages.emailNotExists };
        } else {
            return { unexpected: Validator.serverSideErrorMessages.unexpected };
        }
    };

    // Function to handle form submission with brute force protection
    const doSubmit = ({ form, handleError }) => {
        requestReset(form.data.email)
            .then(() => navigate('/auth/forgot/done'))
            .catch((error) => bruteForce(error, {
                attempts: form.attempts,
                setAttempts: form.setAttempts,
                setIsLocked: form.setIsLocked,
                handleError
            }))
            .finally(() => form.setIsLocked(false));
    };

    const { handleSubmit, handleChange } = useFormWithServerErrors({
        form,
        navigate,
        extractError,
        doSubmit,
        handleChangeCustom: (e, form) => {
            Validator.handleChange(
                e,
                form.data,
                form.setData,
                form.setErrors,
                Validator.errorZeroLengthMessages,
                errorValidationMessages,
            );
        }
    });

    return (
        <>
            <Panel aria-labelledby="forgot-password-form-title">
                <PanelTitle id="forgot-password-form-title"
                            aria-describedby="forgot-password-help1 forgot-password-help2"
                >
                    Забули пароль?
                </PanelTitle>
                <PanelBody>
                    <div>
                        <p id="forgot-password-help1"
                           className={'panel--font-size'}
                        >
                            Введіть електронну адресу вказану при реєстрації для відновлення паролю.
                        </p>
                        <p id="forgot-password-help2"
                           className={'panel--font-size'}
                        >
                            На зазначену вами електронну пошту буде відправлено листа з посиланням для відновлення паролю.
                        </p>
                    </div>
                    <div>
                        <PanelBodyTitle title={'Електронна пошта'} required={false} />
                        <TextInput
                            name="email"
                            autoComplete="off"
                            autoCorrect="off"
                            spellCheck="false"
                            value={form.data.email}
                            onChange={handleChange}
                            placeholder={'Введіть свою електронну пошту'}
                            className={form.errors['email'] && 'input__error-border-color'}
                            aria-labelledby="email-label"
                            aria-describedby={form.errors['email'] ? 'email-error' : undefined}
                            aria-invalid={!!form.errors['email']}
                            aria-required="true"
                        />
                        {form.errors['email'] && (
                            <p id="email-error"
                               className={'panel--danger-text'}
                               role="alert"
                            >
                                {form.errors['email']}
                            </p>
                        )}
                    </div>
                    {!form.isLocked && form.attempts >= (MAX_ATTEMPTS - 2 - 1) && (
                        <p className={'content--text'}
                           role="alert"
                        >
                            Залишилося спроб: {MAX_ATTEMPTS - form.attempts}
                        </p>
                    )}
                    {form.isLocked && form.attempts >= (MAX_ATTEMPTS + 1 - 1) && (
                        <p className={'panel--danger-text'}
                           role="alert"
                        >
                            Повторіть спробу через 30 секунд
                        </p>
                    )}
                    {form.errors['unexpected'] && (
                        <p className={'panel--danger-text'}>
                            {form.errors['unexpected']}
                        </p>
                    )}
                </PanelBody>
                <PanelNavigation>
                    <Button
                        onClick={handleSubmit}
                        className={'button__padding panel--button'}
                        disabled={form.isDisabled || form.isLocked}
                        type="submit"
                    >
                        Відновити пароль
                    </Button>
                </PanelNavigation>
            </Panel>
            <div className={"panel--under-panel"}>
                <span>Я згадав свій пароль.</span>
                <Link className={'text-underline text-bold'} to={'/auth/login'}>
                    Повернутися до входу
                </Link>
            </div>
        </>
    );
}

export default ForgotPassword;
</file>

<file path="investments/serializers/subscription_create.py">
from decimal import Decimal
from django.db import transaction
from django.db.models import Sum
from rest_framework import serializers
from investments.models import Subscription
from projects.models import Project
from ..services.investment_share_service import calculate_investment_share


class SubscriptionCreateSerializer(serializers.ModelSerializer):
    """
    Serializer for creating a new investment subscription.

    Fields:
        investor (Investor): The investor making the subscription.
        project (Project): The project to invest in.
        amount (Decimal): Investment amount, required and must be >= 0.01.

    Validation:
        - Ensures project exists and is a valid instance.
        - Ensures the requesting user is an investor.
        - Prevents self-investment (investor cannot fund their own startup project).
        - Prevents investments into fully funded projects.
        - Prevents investment amounts that exceed remaining funding.
        - Ensures amount is greater than or equal to 0.01.

    Creation:
        - Uses database transactions with row-level locking to prevent race conditions.
        - Recalculates effective funding using both DB aggregate and project's current_funding to avoid drift.
        - Updates the project's current_funding field after saving the subscription.
    """
    amount = serializers.DecimalField(max_digits=12, decimal_places=2, min_value=Decimal("0.01"))
    class Meta:
        model = Subscription
        fields = ["id", "investor", "project", "amount"]
        read_only_fields = ["id", "investor", "project"]

    def validate(self, data):
        project = self.context.get("project")
        if not project:
            raise serializers.ValidationError({"project": "Project is required."})
        request = self.context.get("request")
        if not request or not hasattr(request, "user") or not hasattr(request.user, "investor"):
            raise serializers.ValidationError({"investor": "Authenticated investor required."})
        investor = request.user.investor
        amount = data.get("amount")

        startup = getattr(project, 'startup', None)
        if startup and getattr(investor, 'user', None) and getattr(startup, 'user', None) and investor.user.pk == startup.user.pk:
            raise serializers.ValidationError(
                {"non_field_errors": ["Startup owners cannot invest in their own project."]}
            )

        aggregated = project.subscriptions.aggregate(total=Sum("amount"))["total"] or Decimal("0.00")
        effective_current = max(project.current_funding or Decimal("0.00"), aggregated)
        remaining = project.funding_goal - effective_current

        if effective_current >= project.funding_goal:
            raise serializers.ValidationError(
                {"project": "Project is fully funded."}
            )

        remaining = project.funding_goal - effective_current
        if amount is not None and amount > remaining:
            raise serializers.ValidationError(
                {"amount": f"Amount exceeds funding goal — exceeds the remaining funding. Max allowed: {remaining:.2f}"}
            )

        return data

    def create(self, validated_data):
        project = self.context.get("project")
        if not project:
            raise serializers.ValidationError({"project": "Project is required."})

        request = self.context.get("request")
        if not request or not hasattr(request, "user") or not hasattr(request.user, "investor"):
            raise serializers.ValidationError({"investor": "Authenticated investor required."})

        investor = request.user.investor
        amount = validated_data["amount"]

        with transaction.atomic():
            project_locked = Project.objects.select_for_update().get(pk=project.pk)

            aggregated = project_locked.subscriptions.aggregate(total=Sum("amount"))["total"] or Decimal("0.00")
            effective_current = max(project_locked.current_funding or Decimal("0.00"), aggregated)
            remaining = project_locked.funding_goal - effective_current

            if amount > remaining or remaining <= 0:
                raise serializers.ValidationError(
                    {"amount": "Amount exceeds funding goal — exceeds the remaining funding."}
                )
            
            subscription = Subscription.objects.create(
                investor=investor,
                project=project_locked,
                amount=amount,
                investment_share=calculate_investment_share(amount, project_locked.funding_goal),
            )
            project_locked.current_funding = effective_current + amount
            project_locked.save(update_fields=["current_funding"])

        return subscription
</file>

<file path="tests/chat/test_consumer.py">
import asyncio
from unittest.mock import patch, MagicMock
from channels.testing import WebsocketCommunicator
from django.test import TransactionTestCase
from chat.consumers import InvestorStartupMessageConsumer
from users.models import User
from django.contrib.auth.models import AnonymousUser
from chat.consumers import MAX_MESSAGE_LENGTH, MIN_MESSAGE_LENGTH, MESSAGE_RATE_LIMIT


class InvestorStartupMessageConsumerTest(TransactionTestCase):
    """
    Unit tests for InvestorStartupMessageConsumer using Django's TransactionTestCase
    and Channels WebSocket testing utilities.

    Tests cover:
        - WebSocket connection handling for authenticated and unauthenticated users
        - Handling user not found cases
        - Sending and receiving messages with proper validations
        - Rate limiting enforcement
        - Room creation and message persistence
    """

    reset_sequences = True

    def setUp(self):
        """
        Create mock users for testing purposes and initialize a shared asyncio event loop.
        """
        self.investor = User.objects.create_user(email="investor@example.com", password="pass")
        self.startup = User.objects.create_user(email="startup@example.com", password="pass")

        self.investor.roles = MagicMock()
        self.startup.roles = MagicMock()
        self.investor.roles.filter.return_value.exists.side_effect = lambda name=None: name == "Investor"
        self.startup.roles.filter.return_value.exists.side_effect = lambda name=None: name == "Startup"

        self.loop = asyncio.get_event_loop()

    @patch("chat.consumers.InvestorStartupMessageConsumer.get_or_create_chat_room")
    @patch("chat.consumers.InvestorStartupMessageConsumer.get_user_by_email")
    @patch("chat.consumers.InvestorStartupMessageConsumer.save_message")
    def test_connect_and_send_message(self, save_mock, get_user_mock, get_or_create_mock):
        """
        Test full flow of connecting to a chat, sending a valid message,
        and receiving it via WebSocket.

        Mocks:
            - User retrieval
            - Room creation
            - Message persistence
        """
        get_user_mock.return_value = self.startup
        room_mock = MagicMock(id="roomid", name="roomname", participants=[self.investor.email, self.startup.email])
        get_or_create_mock.return_value = (room_mock, True)
        save_mock.return_value = MagicMock(text="Hello")

        communicator = WebsocketCommunicator(
            InvestorStartupMessageConsumer.as_asgi(),
            f"/ws/chat/{self.startup.email}/"
        )
        communicator.scope["user"] = self.investor
        communicator.scope["url_route"] = {"kwargs": {"other_user_email": self.startup.email}}

        connected, _ = self.loop.run_until_complete(communicator.connect())
        self.assertTrue(connected)

        self.loop.run_until_complete(communicator.send_json_to({"message": "Hello"}))
        response = self.loop.run_until_complete(communicator.receive_json_from())
        self.assertEqual(response["message"], "Hello")
        self.assertEqual(response["sender"], self.investor.email)

        save_mock.assert_awaited_once()
        self.loop.run_until_complete(communicator.disconnect())

    @patch("chat.consumers.InvestorStartupMessageConsumer.get_user_by_email")
    def test_connect_user_not_found(self, get_user_mock):
        """
        Test WebSocket connection is rejected when the other user does not exist.
        """
        get_user_mock.return_value = None
        communicator = WebsocketCommunicator(
            InvestorStartupMessageConsumer.as_asgi(),
            f"/ws/chat/{self.startup.email}/"
        )
        communicator.scope["user"] = self.investor
        communicator.scope["url_route"] = {"kwargs": {"other_user_email": self.startup.email}}

        connected, _ = self.loop.run_until_complete(communicator.connect())
        self.assertFalse(connected)

    @patch("chat.consumers.InvestorStartupMessageConsumer.get_or_create_chat_room")
    def test_connect_unauthenticated(self, get_or_create_mock):
        """
        Test WebSocket connection is rejected for unauthenticated users.
        """
        get_or_create_mock.side_effect = Exception("Should not be called")

        communicator = WebsocketCommunicator(
            InvestorStartupMessageConsumer.as_asgi(),
            f"/ws/chat/{self.startup.email}/"
        )
        communicator.scope["user"] = AnonymousUser()
        communicator.scope["url_route"] = {"kwargs": {"other_user_email": self.startup.email}}

        connected, _ = self.loop.run_until_complete(communicator.connect())
        self.assertFalse(connected)

    async def try_receive(self, communicator, timeout=0.1):
        """
        Securely receive message. Returns None if timeout.
        """
        try:
            return await communicator.receive_json_from(timeout=timeout)
        except asyncio.TimeoutError:
            return None

    @patch("chat.consumers.InvestorStartupMessageConsumer.get_or_create_chat_room")
    @patch("chat.consumers.InvestorStartupMessageConsumer.get_user_by_email")
    @patch("chat.consumers.InvestorStartupMessageConsumer.save_message")
    def test_message_validations(self, save_mock, get_user_mock, get_or_create_mock):
        """
        Tests all message validation rules in InvestorStartupMessageConsumer:
        - Forbidden words
        - Empty messages
        - Messages exceeding max length
        - Spam detection
        - Rate limiting
        """
        get_user_mock.return_value = self.startup
        room_mock = MagicMock(
            id="roomid",
            name="roomname",
            participants=[self.investor.email, self.startup.email]
        )
        get_or_create_mock.return_value = (room_mock, True)

        async def async_save_message(message_text):
            msg = MagicMock()
            msg.text = message_text
            return msg

        save_mock.side_effect = async_save_message

        communicator = WebsocketCommunicator(
            InvestorStartupMessageConsumer.as_asgi(),
            f"/ws/chat/{self.startup.email}/"
        )
        communicator.scope["user"] = self.investor
        communicator.scope["url_route"] = {"kwargs": {"other_user_email": self.startup.email}}

        connected, _ = self.loop.run_until_complete(communicator.connect())
        self.assertTrue(connected)

        with patch("chat.consumers.FORBIDDEN_WORDS_SET", {"forbiddenword"}):
            self.loop.run_until_complete(
                communicator.send_json_to({"message": "This contains forbiddenword"})
            )
            response = self.loop.run_until_complete(communicator.receive_json_from())
            self.assertIsNotNone(response)
            self.assertIn("error", response)
            self.assertEqual(response["error"], "Message contains forbidden content")

        self.loop.run_until_complete(communicator.send_json_to({"message": ""}))
        response = self.loop.run_until_complete(communicator.receive_nothing())
        self.assertTrue(response)

        self.loop.run_until_complete(
            communicator.send_json_to({"message": "x" * (MAX_MESSAGE_LENGTH + 1)})
        )
        response = self.loop.run_until_complete(communicator.receive_json_from())
        self.assertIsNotNone(response)
        self.assertIn("error", response)
        self.assertEqual(
            response["error"],
            f"Message length must be {MIN_MESSAGE_LENGTH}-{MAX_MESSAGE_LENGTH} chars"
        )

        self.loop.run_until_complete(
            communicator.send_json_to({"message": "bbbbbbbbbbbb"})
        )
        response = self.loop.run_until_complete(communicator.receive_json_from())
        self.assertIsNotNone(response)
        self.assertIn("error", response)
        self.assertEqual(response["error"], "Message looks like spam")

        for i in range(MESSAGE_RATE_LIMIT):
            self.loop.run_until_complete(
                communicator.send_json_to({"message": f"Hello {i}"})
            )
            response = self.loop.run_until_complete(communicator.receive_json_from())
            self.assertIsNotNone(response)
            self.assertIn("message", response)
            self.assertEqual(response["message"], f"Hello {i}")
            self.assertEqual(response["sender"], self.investor.email)

        self.loop.run_until_complete(
            communicator.send_json_to({"message": "Hello rate limit"})
        )
        response = self.loop.run_until_complete(communicator.receive_json_from())
        self.assertIsNotNone(response)
        self.assertIn("error", response)
        self.assertIn("Rate limit exceeded", response["error"])

        self.loop.run_until_complete(
            communicator.send_json_to({"message": "Hello after limit"})
        )
        response = self.loop.run_until_complete(self.try_receive(communicator))
        self.assertIsNotNone(response)
        self.assertIn("error", response)
        self.assertIn("Rate limit exceeded", response["error"])
</file>

<file path="tests/communications/test_notification_preferences.py">
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase
from django.contrib.auth import get_user_model
from communications.models import NotificationType, UserNotificationPreference
import ddt
from tests.factories import UserFactory
from tests.communications.factories import NotificationTypeFactory
from rest_framework.test import APIClient
import logging

from utils.authenticate_client import authenticate_client

User = get_user_model()


@ddt.ddt
class NotificationPreferencesTestCase(APITestCase):
    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        # Silence logs produced by this test class only
        logging.disable(logging.CRITICAL)

    @classmethod
    def tearDownClass(cls):
        # Re-enable logging for the rest of the test suite
        logging.disable(logging.NOTSET)
        super().tearDownClass()
    def setUp(self):
        """Common setup using factories for user and notification types."""
        self.notification_type1 = NotificationTypeFactory(default_frequency='immediate')
        self.notification_type2 = NotificationTypeFactory(default_frequency='daily_digest')

        self.user = UserFactory()
        authenticate_client(self.client, self.user)

    def test_get_notification_types(self):
        """Test retrieving notification types."""
        url = reverse('communications:notification-type-list')
        response = self.client.get(url)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertIsInstance(response.data, list)
        codes = [item['code'] for item in response.data]
        self.assertIn(self.notification_type1.code, codes)
        self.assertIn(self.notification_type2.code, codes)

    def test_get_user_preferences(self):
        """Test retrieving user notification preferences."""
        url = reverse('communications:user-notification-preference-list')
        response = self.client.get(url)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertIsInstance(response.data, list)
        self.assertTrue(len(response.data) > 0)

        user_prefs = response.data[0]
        self.assertTrue('user_id' in user_prefs)
        self.assertEqual(user_prefs['user_id'], self.user.pk)
        self.assertTrue('enable_in_app' in user_prefs)
        self.assertTrue('enable_email' in user_prefs)
        self.assertTrue('enable_push' in user_prefs)

        self.assertIn('type_preferences', user_prefs)
        self.assertIsInstance(user_prefs['type_preferences'], list)

    def test_update_user_preferences(self):
        """Test updating user notification preferences."""
        pref = UserNotificationPreference.objects.get(user=self.user)
        url = reverse('communications:user-notification-preference-detail',
                     kwargs={'pk': self.user.pk})

        data = {
            'enable_in_app': True,
            'enable_email': False,
            'enable_push': True
        }
        response = self.client.patch(url, data, format='json')

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertTrue(response.data['enable_in_app'])
        self.assertFalse(response.data['enable_email'])
        self.assertTrue(response.data['enable_push'])

        pref.refresh_from_db()
        self.assertTrue(pref.enable_in_app)
        self.assertFalse(pref.enable_email)
        self.assertTrue(pref.enable_push)

    @ddt.data('immediate', 'daily_digest', 'weekly_summary')
    def test_update_notification_type_preference(self, frequency):
        """
        Test updating a specific notification type preference (parameterized over valid frequencies).
        """
        pref = UserNotificationPreference.objects.get(user=self.user)
        type_pref = pref.type_preferences.first()

        url = reverse(
            'communications:user-notification-preference-update-type-preference',
            kwargs={'pk': self.user.pk}
        )

        data = {
            'notification_type_id': type_pref.notification_type.id,
            'frequency': frequency,
        }
        response = self.client.patch(url, data, format='json')

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['frequency'], frequency)

        type_pref.refresh_from_db()
        self.assertEqual(type_pref.frequency, frequency)

    def test_update_type_preference_invalid_frequency(self):
        """Test that an invalid frequency value returns 400 with serializer errors."""
        pref = UserNotificationPreference.objects.get(user=self.user)
        type_pref = pref.type_preferences.first()

        url = reverse(
            'communications:user-notification-preference-update-type-preference',
            kwargs={'pk': self.user.pk}
        )
        response = self.client.patch(
            url,
            {'notification_type_id': type_pref.notification_type.id, 'frequency': 'invalid_freq'},
            format='json',
        )
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('frequency', response.data)

    def test_update_type_preference_invalid_notification_type_id_non_integer(self):
        """Test that a non-integer notification_type_id returns 400."""
        url = reverse(
            'communications:user-notification-preference-update-type-preference',
            kwargs={'pk': self.user.pk}
        )
        response = self.client.patch(
            url,
            {'notification_type_id': 'abc', 'frequency': 'immediate'},
            format='json',
        )
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertEqual(response.data.get('error'), 'notification_type_id must be an integer')

    def test_update_type_preference_not_found(self):
        """Test that updating a non-existent user preference returns 404."""
        another_type = NotificationTypeFactory()
        url = reverse(
            'communications:user-notification-preference-update-type-preference',
            kwargs={'pk': self.user.pk}
        )
        response = self.client.patch(
            url,
            {'notification_type_id': another_type.id, 'frequency': 'immediate'},
            format='json',
        )
        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)
        self.assertEqual(response.data.get('error'), 'Notification type preference not found')

    def test_unauthorized_access(self):
        """Test that unauthorized users can't access preferences."""
        client = APIClient()

        list_url = reverse('communications:user-notification-preference-list')
        response = client.get(list_url)
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

        detail_url = reverse('communications:user-notification-preference-detail', kwargs={'pk': self.user.pk})
        response = client.get(detail_url)
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

        response = client.patch(detail_url, {}, format='json')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

        type_pref_url = reverse('communications:user-notification-preference-update-type-preference',
                                kwargs={'pk': self.user.pk})
        response = client.patch(type_pref_url, {}, format='json')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    def test_initial_preferences_created(self):
        """Test that initial preferences are created for new users."""
        new_user = User.objects.create_user(
            email='new@example.com',
            password='testpass123',
            first_name='New',
            last_name='User'
        )

        self.assertTrue(hasattr(new_user, 'notification_preferences'))
        self.assertEqual(
            new_user.notification_preferences.type_preferences.count(),
            NotificationType.objects.count()
        )
</file>

<file path="tests/startups/test_api_create.py">
from django.urls import reverse
from rest_framework import status
from tests.test_base_case import BaseCompanyCreateAPITestCase
from startups.models import Startup, Industry, Location
from utils.authenticate_client import authenticate_client
from rest_framework.test import APIClient


class StartupCreateAPITests(BaseCompanyCreateAPITestCase):
    """
    Tests for the startup creation API endpoint (POST /api/v1/startups/).
    """

    def setUp(self):
        """Override default setup to create a fresh user for each test."""
        super().setUp()
        self.user_for_creation = self.get_or_create_user(
            email="creator@example.com", first_name="Creator", last_name="User"
        )
        self.client = APIClient(enforce_csrf_checks=False)
        authenticate_client(self.client, self.user_for_creation)
        self.url = reverse('startup-list')
        self.industry, _ = Industry.objects.get_or_create(name="Testable Industry")
        self.location, _ = Location.objects.get_or_create(country="US")

    def get_valid_payload(self):
        """Returns a dictionary with valid data for creating a startup."""
        return {
            "company_name": "Innovative Tech Inc.",
            "description": "A new startup solving big problems.",
            "email": "contact@innovative-tech.com",
            "founded_year": 2024,
            "industry": self.industry.pk,
            "location": self.location.pk,
            "stage": "idea",
            "team_size": 5,
            "website": "https://innovative-tech.com"
        }

    def test_successful_startup_creation(self):
        """
        Ensure an authenticated user can create a new startup with valid data.
        """
        payload = self.get_valid_payload()
        self.assertEqual(Startup.objects.count(), 0)

        response = self.client.post(self.url, payload, format='json')

        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Startup.objects.count(), 1)
        
        startup = Startup.objects.first()
        self.assertEqual(startup.company_name, payload["company_name"])
        self.assertEqual(startup.user, self.user_for_creation)
        self.assertIn("id", response.data)

        self.assertEqual(Startup.objects.filter(user=self.user_for_creation).count(), 1)

    def test_unauthorized_creation_fails(self):
        """
        Ensure an unauthenticated user receives a 401 Unauthorized error.
        """
        client = self.client.__class__()
        payload = self.get_valid_payload()
        response = client.post(self.url, payload, format='json')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    def test_create_with_duplicate_name_fails(self):
        """
        Ensure creating a startup with an already existing name fails with a
        400 Bad Request, even if attempted by a different, valid user.
        """
        payload = self.get_valid_payload()
        response1 = self.client.post(self.url, payload, format='json')
        self.assertEqual(response1.status_code, status.HTTP_201_CREATED, "First startup creation failed")

        second_user = self.get_or_create_user(
            email="secondcreator@example.com", first_name="Second", last_name="Creator"
        )
        authenticate_client(self.client, second_user)

        payload["email"] = "another-contact@innovative-tech.com" 
        response2 = self.client.post(self.url, payload, format='json')

        self.assertEqual(response2.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn("company_name", response2.data)
        self.assertIn("already exists", str(response2.data['company_name']))

    def test_user_cannot_create_more_than_one_startup(self):
        """
        Ensure a user who already owns a startup cannot create another one.
        """
        payload = self.get_valid_payload()

        response = self.client.post(self.url, payload, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

        payload["company_name"] = "Another Company"
        payload["email"] = "another-email@innovative-tech.com"
        response = self.client.post(self.url, payload, format='json')

        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        self.assertIn("You have already created a company profile", response.data['detail'])

    def test_creation_with_invalid_stage_fails(self):
        """
        Ensure creating a startup with an invalid 'stage' value fails validation.
        """
        payload = self.get_valid_payload()
        invalid_stage_value = "invalid_stage_value"
        payload["stage"] = invalid_stage_value
        response = self.client.post(self.url, payload, format='json')

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn("stage", response.data)
        
        expected_error_message = f'"{invalid_stage_value}" is not a valid choice.'
        error_messages = [str(e) for e in response.data['stage']]
        self.assertIn(expected_error_message, error_messages)

    def test_creation_missing_required_fields_fails(self):
        """
        Ensure creating a startup without required fields like 'company_name' fails.
        """
        payload = self.get_valid_payload()
        del payload["company_name"]
        del payload["email"]

        response = self.client.post(self.url, payload, format='json')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn("company_name", response.data)
        self.assertIn("email", response.data)
</file>

<file path="tests/users/test_auth_cookie.py">
from django.urls import reverse
from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from users.models import User, UserRole
import os
from dotenv import load_dotenv
import jwt
from django.conf import settings

load_dotenv()
TEST_USER_PASSWORD = os.getenv("TEST_USER_PASSWORD", "default_test_password")


class AuthCookieTests(APITestCase):
    """
    Test suite for JWT authentication using HTTPOnly cookies and CSRF protection.

    This suite tests:
        - CSRF token retrieval
        - Login and setting of secure HTTPOnly cookies for access and refresh tokens
        - Refreshing access token using refresh cookie
        - Logout and clearing cookies
        - Accessing protected endpoints with valid/invalid tokens
        - Correct JWT signing algorithm
    """

    def setUp(self):
        """
        Create a test user and configure the APIClient with CSRF checks enabled.
        """
        role_user, _ = UserRole.objects.get_or_create(role=UserRole.Role.USER)
        self.user = User.objects.create_user(
            email="test@example.com",
            password=TEST_USER_PASSWORD,
            first_name="Test",
            last_name="User",
            role=role_user,
            is_active=True
        )
        self.client = APIClient(enforce_csrf_checks=True)
        self.csrf_url = reverse("csrf_init")
        self.login_url = reverse("token_obtain_pair")
        self.refresh_url = reverse("token_refresh")
        self.logout_url = reverse("logout")
        self.protected_url = reverse("auth-me")

    def _get_csrf_token(self):
        """
        Retrieve a valid CSRF token from the server.

        Returns:
            str: The CSRF token value.
        """
        response = self.client.get(self.csrf_url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        return response.cookies["csrftoken"].value

    def test_login_sets_http_only_cookie(self):
        """
        Ensure that logging in sets access_token and refresh_token
        as HTTPOnly and secure cookies. Tokens should not appear in response body.
        """
        csrf_token = self._get_csrf_token()
        response = self.client.post(
            self.login_url,
            {"email": self.user.email, "password": TEST_USER_PASSWORD},
            HTTP_X_CSRFTOKEN=csrf_token
        )
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertNotIn("access", response.data)
        self.assertNotIn("refresh", response.data)
        for key in ["access_token", "refresh_token"]:
            self.assertIn(key, response.cookies)
            cookie = response.cookies[key]
            self.assertTrue(cookie["httponly"])
            self.assertTrue(cookie["secure"])

    def test_refresh_works_with_cookie(self):
        """
        Test that the refresh endpoint issues a new access_token cookie
        when a valid refresh_token cookie is present.
        """
        csrf_token = self._get_csrf_token()
        self.client.post(
            self.login_url,
            {"email": self.user.email, "password": TEST_USER_PASSWORD},
            HTTP_X_CSRFTOKEN=csrf_token
        )
        response = self.client.post(
            self.refresh_url,
            {},
            HTTP_X_CSRFTOKEN=csrf_token
        )
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertIn("access_token", response.cookies)

    def test_refresh_fails_without_cookie(self):
        """
        Test that refresh endpoint returns 404 if refresh_token cookie is missing.
        """
        csrf_token = self._get_csrf_token()
        response = self.client.post(
            self.refresh_url,
            {},
            HTTP_X_CSRFTOKEN=csrf_token
        )
        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)

    def test_refresh_fails_with_invalid_cookie(self):
        """
        Test that refresh endpoint returns 205 RESET CONTENT if refresh_token is invalid.
        """
        csrf_token = self._get_csrf_token()
        self.client.cookies["refresh_token"] = "invalidtoken123"
        response = self.client.post(
            self.refresh_url,
            {},
            HTTP_X_CSRFTOKEN=csrf_token
        )
        self.assertEqual(response.status_code, status.HTTP_205_RESET_CONTENT)

    def test_logout_clears_cookies(self):
        """
        Test that logout clears both access_token and refresh_token cookies
        and returns HTTP 200 OK.
        """
        csrf_token = self._get_csrf_token()
        login_response = self.client.post(
            self.login_url,
            {"email": self.user.email, "password": TEST_USER_PASSWORD},
            HTTP_X_CSRFTOKEN=csrf_token
        )
        access_token = login_response.cookies["access_token"].value
        response = self.client.post(
            self.logout_url,
            {},
            HTTP_X_CSRFTOKEN=csrf_token,
            HTTP_AUTHORIZATION=f"Bearer {access_token}"
        )
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        for key in ["access_token", "refresh_token"]:
            cookie = response.cookies[key]
            self.assertEqual(cookie.value, "")
            self.assertEqual(cookie["max-age"], 0)

    def test_access_token_allows_protected_endpoint(self):
        """
        Ensure that an access_token obtained from login
        allows access to a protected endpoint.
        """
        csrf_token = self._get_csrf_token()
        login_resp = self.client.post(
            self.login_url,
            {"email": self.user.email, "password": TEST_USER_PASSWORD},
            HTTP_X_CSRFTOKEN=csrf_token
        )
        access_token = login_resp.cookies["access_token"].value

        self.client.cookies["access_token"] = access_token
        response = self.client.get(self.protected_url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_access_protected_endpoint_without_token(self):
        """Accessing protected endpoint without any token should return 401"""
        client = APIClient(enforce_csrf_checks=False)
        response = client.get(self.protected_url)
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    def test_access_protected_endpoint_with_invalid_token(self):
        """Accessing protected endpoint with invalid token returns 401"""
        client = APIClient(enforce_csrf_checks=False)
        client.cookies["access_token"] = "invalidtoken123"
        response = client.get(self.protected_url)
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    def test_jwt_algorithm(self):
        """
        Verify that the JWT access_token is signed with the correct algorithm
        defined in SIMPLE_JWT settings.
        """
        csrf_token = self._get_csrf_token()
        login_resp = self.client.post(
            self.login_url,
            {"email": self.user.email, "password": TEST_USER_PASSWORD},
            HTTP_X_CSRFTOKEN=csrf_token
        )
        access_token = login_resp.cookies["access_token"].value
        header = jwt.get_unverified_header(access_token)
        expected_alg = settings.SIMPLE_JWT.get("ALGORITHM", "HS256")
        self.assertEqual(header["alg"], expected_alg)
</file>

<file path="tests/test_base_case.py">
from rest_framework.test import APIClient, APITestCase, APIRequestFactory
from investments.serializers.subscription_create import SubscriptionCreateSerializer

from tests.test_disable_signal_mixin import DisableSignalMixin
from tests.setup_tests_data import TestDataMixin


class BaseAPITestCase(TestDataMixin, DisableSignalMixin, APITestCase):
    """Generic base users case with automatic signal disabling."""

    @classmethod
    def setUpTestData(cls):
        cls.setup_all()

    def setUp(self):
        self.client = APIClient()
        self.client.force_authenticate(user=self.user)
    
    def serializer_with_user(self, data, user, **extra_context):
        factory = APIRequestFactory()
        request = factory.get('/')
        request.user = user
        project = extra_context.get('project', getattr(self, "project", None))
        if not project:
            class DummyProject:
                id = None
                name = "Default Project"
            project = DummyProject()
        context = {'request': request, 'project': project, **extra_context}
        return SubscriptionCreateSerializer(data=data, context=context)

    @classmethod
    def tearDownClass(cls):
        super().tearDownClass()

class BaseCompanyCreateAPITestCase(TestDataMixin, DisableSignalMixin, APITestCase):
    """
    Base test case for company creation tests.
    Sets up users and basic dependencies but does NOT create default startups/investors,
    ensuring a clean slate for creation tests.
    """
    @classmethod
    def setUpTestData(cls):
        """Setup only the necessary prerequisite data."""
        cls.setup_users()
        cls.setup_industries()
        cls.setup_locations()

    def setUp(self):
        self.client = APIClient()

    @classmethod
    def tearDownClass(cls):
        super().tearDownClass()
</file>

<file path="users/views/password_views.py">
# Python standard library
import logging

# Django imports
from django.contrib.auth.password_validation import validate_password
from django.core.exceptions import (
    ValidationError as DjangoValidationError,
)
from django.utils.http import urlsafe_base64_encode
from django.utils.encoding import force_bytes
from django.contrib.auth.tokens import default_token_generator
# Third-party imports
from djoser.email import PasswordResetEmail
from drf_spectacular.utils import extend_schema, OpenApiResponse
from rest_framework import status
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.permissions import AllowAny

# Local application imports
from core.settings import base_settings
from users.models import User
from users.serializers.password_reset_serializers import (
    PasswordResetSerializer,
    PasswordResetConfirmSerializer,
)
from utils.error_response import error_response
from django.conf import settings
from urllib.parse import urljoin
from django.core.mail import send_mail
from django.template.loader import render_to_string

logger = logging.getLogger(__name__)


@extend_schema(
    tags=["Auth"],
    summary="Request password reset",
    request=PasswordResetSerializer,
    responses={
        200: OpenApiResponse(description="Password reset email sent"),
        400: OpenApiResponse(description="Validation error"),
        404: OpenApiResponse(description="User not found"),
    },
)
class CustomPasswordResetView(APIView):
    """
    Handle password reset requests by sending reset instructions via email.

    Methods:
        post: Accepts an email and sends password reset instructions if the user exists.

    Args in post:
        request (Request): The HTTP request object containing POST data.

    Returns:
        Response: DRF Response with success message or error details.
    """
    permission_classes = [AllowAny]
    authentication_classes = []
    serializer_class = PasswordResetSerializer

    def post(self, request, *args, **kwargs):
        """
        Process password reset request.

        Args:
            request (Request): HTTP request with 'email' in data.

        Returns:
            Response: 
                - 200 OK with success detail if email sent.
                - 400 Bad Request if email is missing.
                - 404 Not Found if user with email doesn't exist.
        """
        serializer = PasswordResetSerializer(data=request.data)
        if not serializer.is_valid():
            return error_response(serializer.errors, status.HTTP_400_BAD_REQUEST)

        email = serializer.validated_data['email']

        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            return error_response({"email": "User with this email was not found."}, status.HTTP_404_NOT_FOUND)

        uid = urlsafe_base64_encode(force_bytes(user.pk))
        token = default_token_generator.make_token(user)
        reset_relative_url = base_settings.FRONTEND_ROUTES["reset_password"].format(
            uid=uid,
            token=token,
        )
        reset_url = urljoin(settings.FRONTEND_URL, reset_relative_url)

        subject = "Reset your password"
        context = {
            "user": user,
            "reset_url": reset_url,
        }
        html_message = render_to_string("email/password_reset.html", context)
        plain_message = f"Use this link to reset your password: {reset_url}"

        send_mail(
            subject,
            plain_message,
            settings.DEFAULT_FROM_EMAIL,
            [user.email],
            html_message=html_message,
        )

        return Response({"detail": "Password reset instructions have been sent to the provided email."}, status=status.HTTP_200_OK)


@extend_schema(
    tags=["Auth"],
    summary="Confirm password reset",
    request=PasswordResetConfirmSerializer,
    responses={
        200: OpenApiResponse(description="Password changed successfully"),
        400: OpenApiResponse(description="Invalid token, UID, or password"),
    },
)
class CustomPasswordResetConfirmView(APIView):
    """
    Handle confirmation of password reset using UID and token.

    Methods:
        post: Validates token and new password, updates the user password.

    Args in post:
        request (Request): The HTTP request object containing 'uid', 'token', and 'new_password'.

    Returns:
        Response:
            - 200 OK if password changed successfully.
            - 400 Bad Request for missing fields, invalid token, invalid UID, or invalid password.
    """
    permission_classes = [AllowAny]
    authentication_classes = []
    serializer_class = PasswordResetConfirmSerializer

    def post(self, request, *args, **kwargs):
        """
        Process password reset confirmation.

        Args:
            request (Request): HTTP request with 'uid', 'token', 'new_password' in data.

        Returns:
            Response:
                - 200 OK with success detail if password updated.
                - 400 Bad Request if any validation fails.
        """
        serializer = PasswordResetConfirmSerializer(data=request.data)
        if not serializer.is_valid():
            return error_response(serializer.errors, status.HTTP_400_BAD_REQUEST)

        user = serializer.context['user']
        new_password = serializer.validated_data['new_password']

        try:
            validate_password(new_password, user)
        except DjangoValidationError as e:
            return error_response({"new_password": list(e.messages)}, status.HTTP_400_BAD_REQUEST)

        user.set_password(new_password)
        user.save()

        return Response({"detail": "Password has been successfully changed."}, status=status.HTTP_200_OK)
</file>

<file path="users/cookie_jwt.py">
from rest_framework.authentication import BaseAuthentication
from rest_framework import exceptions
from users.models import User
import logging
from validation.validate_token import safe_decode

logger = logging.getLogger(__name__)

class CookieJWTAuthentication(BaseAuthentication):
    """
    Custom DRF authentication class that reads the JWT access token from an HttpOnly cookie.

    Always returns 401 Unauthorized if the token is missing, invalid, or the user is inactive.
    """

    def authenticate(self, request):
        """
        Authenticate the request using JWT from 'access_token' cookie.
        Raises AuthenticationFailed (401) if token is missing or invalid.

        Args:
            request (HttpRequest): DRF request object.

        Returns:
            tuple: (User instance, token string) if authentication succeeds.

        Raises:
            NotAuthenticated: If token is missing, invalid, or user inactive.
        """
        token = request.COOKIES.get("access_token")

        if not token:
            raise exceptions.NotAuthenticated("Authentication credentials were not provided.")

        try:
            payload = safe_decode(token)
            user_id = payload.get("user_id")
            if not user_id:
                raise exceptions.NotAuthenticated("Token payload missing user_id")

            try:
                user = User.objects.get(user_id=user_id, is_active=True)
            except User.DoesNotExist:
                raise exceptions.NotAuthenticated("User not found or inactive")

            return (user, token)

        except Exception as e:
            logger.warning(f"Invalid access token: {str(e)}")
            raise exceptions.NotAuthenticated("Invalid or expired access token")
</file>

<file path="users/permissions.py">
import logging
from rest_framework import permissions
from startups.models import Startup
from investors.models import Investor
from rest_framework.permissions import BasePermission
from rest_framework import exceptions

logger = logging.getLogger(__name__)


class IsInvestor(permissions.BasePermission):
    """
    Allows access only to authenticated users who are registered as investors.
    """

    def has_permission(self, request, view):
        """
        Checks if the request.user is authenticated and linked to an Investor profile.
        Logs a warning if the user is not an investor.
        """
        if not request.user or not request.user.is_authenticated:
            return False

        is_investor = Investor.objects.filter(user=request.user).exists()

        if is_investor:
            logger.debug(
                "Permission granted for user %s as investor for view %s.",
                request.user.pk,
                view.__class__.__name__
            )
            return True
        else:
            logger.warning(
                "Permission denied for user %s: Not an investor for view %s.",
                request.user.pk,
                view.__class__.__name__,
                extra={"user_id": request.user.pk, "view": view.__class__.__name__}
            )
            return False


class IsStartupUser(permissions.BasePermission):
    """
    Allows access only to authenticated users linked to a startup.
    """

    def has_permission(self, request, view):
        user = request.user

        if not getattr(user, 'is_authenticated', False):
            logger.warning(f"Permission denied: Unauthenticated user tried to access {view.__class__.__name__}.")
            return False

        try:
            startup = getattr(user, 'startup', None)
            _ = startup.id
        except Startup.DoesNotExist:
            startup = None
        except Exception:
            startup = None
        if startup is not None:
            logger.debug(f"Permission granted: User {user.id} linked to startup {getattr(startup, 'id', None)}.")
            return True

        if Startup.objects.filter(user_id=getattr(user, 'id', None)).exists():
            logger.debug(f"Permission granted: User {user.id} linked to a startup via DB check.")
            return True

        logger.warning(f"Permission denied: User {user.id} has no valid startup linked.")
        return False

    def has_object_permission(self, request, view, obj):
        obj_user = getattr(obj, 'user', None)
        if obj_user == request.user:
            logger.debug(f"Object-level permission granted for user {request.user.id} on object {obj.pk}.")
            return True

        logger.warning(f"Object-level permission denied for user {request.user.id} on object {obj.pk}.")
        return False


class CanCreateCompanyPermission(permissions.BasePermission):
    """
    Permission to check if a user can create a new Startup or Investor profile.
    Denies permission if the user already owns a Startup or an Investor profile.
    """
    message = "You have already created a company profile (Startup or Investor) and cannot create another."

    def has_permission(self, request, view):
        """
        Check if the user is authenticated and does not already have a company.
        """
        if not request.user or not request.user.is_authenticated:
            return False

        has_startup = Startup.objects.filter(user=request.user).exists()
        has_investor = Investor.objects.filter(user=request.user).exists()

        if has_startup or has_investor:
            return False

        return True


class IsAuthenticatedOr401(BasePermission):
    """
    Like IsAuthenticated, but returns 401 instead of 403 when the user is not authenticated.
    """

    def has_permission(self, request, view):
        if request.user and request.user.is_authenticated:
            return True
        raise exceptions.NotAuthenticated("Authentication credentials were not provided.")

    def authenticate_header(self, request):
        return 'Bearer'
</file>

<file path="docs/API.md">
# Forum Project Stage CC WebAPI Documentation

This document describes the available endpoints, request formats, response structures, and validation rules for the *
*Forum Project Stage CC WebAPI**.  
It is organized by module to allow each developer to maintain and extend their respective sections.

---

## Authentication

All endpoints require JWT authentication.  
Include the token in the `Authorization` header using the following format:

Authorization: Bearer <your_access_token>

---

## Auth API

### Endpoints

#### 1. CSRF Init

- `GET /api/v1/auth/csrf/`
  Returns a CSRF token in JSON and sets the CSRF cookie.  
  This must be called by the frontend before sending any POST/PUT/PATCH/DELETE requests that require CSRF protection.

### Example Response

```json
{
  "csrfToken": "<csrf_token>"
}
```

#### 2. JWT Create (Login)

- `POST /api/v1/auth/jwt/create/`
  Authenticates a user and issues JWT tokens.
  - Sets both access_token and refresh_token in secure HttpOnly cookies.
  - Returns only minimal user info in response body (no tokens).

### Request Example

- POST /api/v1/auth/jwt/create/
    Headers:
    - Content-Type: application/json
    - X-CSRFToken: <csrf_token>

```json
{
  "email": "user@example.com",
  "password": "strong_password"
}
```

### Example Response

```json
{
  "detail": "Login successful",
  "email": "user@example.com",
  "user_id": 42
}
```
The access_token and refresh_token are stored in HttpOnly cookies and are not returned in the response body.

#### 3. JWT Refresh

- `POST /api/v1/auth/jwt/refresh/`
  Issues a new access token using the refresh token stored in the secure HttpOnly cookie.
  If the refresh token is invalid or expired, the cookie will be cleared.

### Request Example

- POST /api/v1/auth/jwt/refresh/
    Headers:    
    - Content-Type: application/json    
    - X-CSRFToken: <csrf_token>

### Example Response

```json
{
  "detail": "Token refreshed"
}
```
The new access token is available only in the HttpOnly cookie.

#### 4. JWT Logout

- `POST /api/v1/auth/logout/`
  Blacklists the refresh token (if blacklisting is enabled) and clears both access_token and refresh_token cookies.

### Request Example

- POST /api/v1/auth/logout/
    Headers:
    - Content-Type: application/json
    - X-CSRFToken: <csrf_token>

### Example Response

```json
{
  "detail": "Logged out successfully"
}
```

### Authentication Flow

```mermaid
sequenceDiagram
    participant Browser
    participant Backend
    participant Cookie as "HttpOnly Cookie"

    Browser->>Backend: GET /csrf/
    Backend-->>Browser: { csrfToken } + Set CSRF cookie

    Browser->>Backend: POST /jwt/create/ (email, password, CSRF token)
    Backend-->>Browser: { detail, email, user_id }
    Backend-->>Cookie: access_token (HttpOnly, Secure, SameSite=None)
    Backend-->>Cookie: refresh_token (HttpOnly, Secure, SameSite=None)

    Browser->>Backend: POST /jwt/refresh/ (CSRF token + refresh_token in cookie)
    Backend-->>Browser: { detail: "Token refreshed" }
    Backend-->>Cookie: new access_token (HttpOnly)

    Browser->>Backend: POST /jwt/logout/ (CSRF token)
    Backend-->>Cookie: Delete access_token + refresh_token
    Backend-->>Browser: { detail: "Logged out successfully" }
```

## Startup API

### Endpoints

- `GET /api/profiles/startups/` — Retrieve a list of all startup profiles
- `POST /api/profiles/startups/` — Create a new startup profile
- `GET /api/profiles/startups/{id}/` — Retrieve details of a specific startup profile
- `PATCH /api/profiles/startups/{id}/` — Update an existing startup profile
- `DELETE /api/profiles/startups/{id}/` — Delete a startup profile

## Investor API

### Endpoints

- `GET /api/profiles/investors/` — Retrieve a list of all investors
- `POST /api/profiles/investors/` — Create a new investor  
  ...

### Request Example: Create Startup Profile

```json
{
  "company_name": "GreenTech",
  "description": "Eco-friendly solutions",
  "website": "https://greentech.ua",
  "startup_logo": null
}
```

### Response Example: Created Startup Profile (201 Created)

```json
{
  "id": 1,
  "company_name": "GreenTech",
  "description": "Eco-friendly solutions",
  "website": "https://greentech.ua",
  "startup_logo": null,
  "projects": [],
  "created_at": "2025-08-05T00:00:00Z",
  "updated_at": "2025-08-05T00:00:00Z"
}
```

---

## Project API

### Endpoints

- `GET /api/projects/` — Retrieve a list of all projects
- `POST /api/projects/` — Create a new project
- `GET /api/projects/{id}/` — Retrieve details of a specific project
- `PATCH /api/projects/{id}/` — Update an existing project
- `DELETE /api/projects/{id}/` — Delete a project

---

### Request Example: Create Project

```json
{
  "startup": 1,
  "title": "AI Platform",
  "description": "Smart analytics for business",
  "status": "draft",
  "duration": 30,
  "funding_goal": "100000.00",
  "current_funding": "5000.00",
  "category": 2,
  "email": "project@example.com",
  "has_patents": true,
  "is_participant": false,
  "is_active": true
}
```

### Response Example: Created Project (201 Created)

```json
{
  "id": 1,
  "startup": 1,
  "title": "AI Platform",
  "description": "Smart analytics for business",
  "status": "draft",
  "duration": 30,
  "funding_goal": "100000.00",
  "current_funding": "5000.00",
  "category": 2,
  "email": "project@example.com",
  "has_patents": true,
  "is_participant": false,
  "is_active": true,
  "created_at": "2025-08-05T00:00:00Z",
  "updated_at": "2025-08-05T00:00:00Z"
}
```

---

## Validation Rules

### Startup Profile

- company_name: required, unique
- description: required
- website: optional
- startup_logo: optional

### Project

- startup: required (must reference existing profile)
- title: required
- funding_goal: required if is_participant is true
- current_funding: must not exceed funding_goal
- business_plan: required if status is completed
- email: required, must be valid

---

## Token Refresh

Use `/api/token/refresh/` to obtain a new access token.

### Response Example

```json
{
  "refresh": "<your_refresh_token>",
  "access": "<your_new_access_token>"
}
```

# OAuth Authentication API Documentation

## Part 1

## Overview

This document describes the OAuth authentication endpoints for Google and GitHub integration.

---

## POST api/v1/auth/oauth/login/

### Description

Authenticate users using Google or GitHub OAuth providers. The endpoint exchanges OAuth provider tokens for application
JWT tokens and returns user information.

## Request

- **Headers:**  
  `Content-Type: application/json`

- **Body:**
  ```json
  {
    "provider": "google" | "github",
    "token": "<OAuth token>"
  }
  ```
    - **Response**
  ```json
  {
    "access": "jwt_access_token",
    "user": {
      "id": "user_123",
      "email": "user@example.com",
      "first_name": "John",
      "last_name": "Doe",
      "user_phone": "",
      "title": "",
      "role": "user"
    }
  }
  ```

**Status codes:**

|    Status Code    |                 Description                  |
|-------------------|----------------------------------------------|
| `400 Bad Request` | Invalid request parameters or malformed data |
| `403 Forbidden`   | Authenticated but insufficient permissions   |

## Part 2

## Callback URLs

The OAuth callback URLs are configured to handle redirects after successful authentication with the OAuth provider.
These URLs are used by the frontend to receive authorization codes or tokens.

### Configured Callback URLs

- **Production**: ----
- **Development**: `http://127.0.0.1:8000/oauth/callback/`

## Usage Instructions

1. **Initiate OAuth Flow**:
    - Redirect users to the OAuth provider's authorization endpoint (e.g., `https://provider.com/oauth/authorize`).
    - Include the appropriate `redirect_uri` parameter matching one of the configured callback URLs

2. **Handle Callback**:
    - After authentication, the OAuth provider will redirect the user to the specified callback URL with an
      authorization code or token in the query parameters (e.g., `https://yourapp.com/auth/callback?code=abc123`).
    - The frontend should extract the `code` from the URL query parameters using `URLSearchParams`.

3. **Extracting Query Parameters**:
    - Example of JavaScript to extract parameters from the callback URL:
      ```javascript
      const urlParams = new URLSearchParams(window.location.search);
      const code = urlParams.get('code');
      const state = urlParams.get('state');
      const error = urlParams.get('error');
      ```

4. **ExchangeCode for Token**:
   -Send the authorization code to your backend API `/users/oauth/login/` to exchange it for an access token.

## Notifications API (Communications)

All endpoints require authentication and are available under the base path: `/api/v1/communications/`.

### Endpoints

- `GET /notifications/` — List current user's notifications.
- `GET /notifications/unread_count/` — Get unread notifications count.
- `POST /notifications/{notification_id}/mark_as_read/` — Mark notification as read.
- `POST /notifications/{notification_id}/mark_as_unread/` — Mark notification as unread.
- `POST /notifications/mark_all_as_read/` — Mark all notifications as read.
- `POST /notifications/mark_all_as_unread/` — Mark all notifications as unread.
- `GET /notifications/{notification_id}/resolve/` — Get only redirect payload for a notification.
- `DELETE /notifications/{notification_id}/` — Delete a notification.

Creation of notifications via public API is disabled.

### Query Parameters (GET /notifications/)

- `is_read` — true | false (filter by read state: true = read, false = unread)
- `type` — notification type code (slug)
- `priority` — low | medium | high
- `created_after` — ISO datetime (e.g., 2025-08-05T00:00:00Z)
- `created_before` — ISO datetime

### Response Example (GET /notifications/)

```json
{
  "count": 1,
  "next": null,
  "previous": null,
  "results": [
    {
      "notification_id": "b6b9e6f4-8f5a-4e58-9e7f-2d3b1f7ac111",
      "notification_type": {
        "id": 3,
        "code": "message_new",
        "name": "New Message",
        "description": "A new message was received",
        "is_active": true
      },
      "title": "You have a new message",
      "message": "Investor John Doe sent you a message",
      "is_read": false,
      "priority": "medium",
      "priority_display": "Medium",
      "actor": {
        "type": "investor",
        "user_id": 42,
        "investor_id": 7,
        "display_name": "Acme Ventures"
      },
      "redirect": {
        "kind": "message",
        "id": 99,
        "url": "/messages/99"
      },
      "created_at": "2025-08-05T12:34:56Z",
      "updated_at": "2025-08-05T12:34:56Z",
      "expires_at": null
    }
  ]
}
```

### Actions Responses

- `POST /notifications/{id}/mark_as_read/` → `{ "status": "notification marked as read" }`
- `POST /notifications/{id}/mark_as_unread/` → `{ "status": "notification marked as unread" }`
- `POST /notifications/mark_all_as_read/` → `{ "status": "marked <n> notifications as read" }`
- `POST /notifications/mark_all_as_unread/` → `{ "status": "marked <n> notifications as unread" }`
- `GET /notifications/{id}/resolve/` → `{ "redirect": { ... } }`

# Company Binding API

## Overview

The Company Binding API allows authenticated users to associate themselves with a company (startup or investor) after
registration. Users can either bind to an existing company or create a new one.

## Endpoint

**POST** `/api/v1/auth/bind-company/`

## Authentication

- Requires authentication via JWT stored in an **HttpOnly cookie** named `access_token`.
- No `Authorization` header is needed; the backend reads the token from the cookie.

## Request Body

```json
{
  "company_name": "Tech Innovations Inc.",
  "company_type": "startup"
}
```

## Example Response

```json 
{
  "message": "Successfully bound to existing startup: Tech Innovations Inc.",
  "company_type": "startup",
  "company_id": 1
}
```
</file>

<file path="frontend/src/api/client.js">
import axios from "axios";
import Cookies from "js-cookie";
import { CSRF_COOKIE_NAME, fetchCsrfToken } from './csrfService';

/**
 * Creates an isolated API instance with support for single-flight refresh
 */
function createApiClient() {
    /**
     * single-flight refresh
     * @type {Promise<string | null> | null}
     */
    let refreshing = null;

    /**
     * Refreshes access-token by refresh-token
     * @returns {Promise<string | null>} New access token or null
     * if no update is possible
     */
    const refreshAccess = async () => {
        try {
            const res = await axios.post(
                `${process.env.REACT_APP_API_URL}/api/v1/auth/jwt/refresh/`
            );

            if (res.data && typeof res.data.access === "string" && res.data.access.trim() !== "") {
                return res.data.access;
            } else {
                console.warn("[refreshAccess] No access token in API response", res.data);
                return null;
            }
        } catch (err) {
            console.error("[refreshAccess] Failed to refresh access token", err);
            return null;
        }
    }

    // New instance
    const instance = axios.create({
        baseURL: process.env.REACT_APP_API_URL,
        withCredentials: true
    });

    // 401 handler (access token refresh)
    instance.interceptors.response.use(
        r => r,
        async (err) => {
            const original = err.config;

            if (err.response?.status === 401 && !original._retryAuth) {
                original._retryAuth = true;
                console.error("[refreshAccess] Refreshing access token", err);
                refreshing ??= refreshAccess().finally(() => (refreshing = null));

                const newAccess = await refreshing;

                if (newAccess) {
                    return instance(original);
                }
            }

            return Promise.reject(err);
        }
    );

    // 403 handler (CSRF refresh)
    instance.interceptors.response.use(
        r => r,
        async (err) => {
            const original = err.config;

            if (err.response?.status === 403 && !original._retryCsrf) {
                original._retryCsrf = true;
                console.error("[refreshAccess] Refreshing CSRF", err);
                refreshing ??= fetchCsrfToken().finally(() => (refreshing = null));

                const newCsrf = await refreshing;

                if (newCsrf) {
                    return instance(original);
                }
            }

            return Promise.reject(err);
        }
    );

    // CSRF set header if needed
    instance.interceptors.request.use(
        (config) => {
            const method = config.method?.toUpperCase();
            if (["POST", "PUT", "PATCH", "DELETE"].includes(method)) {
                const csrfToken = Cookies.get(CSRF_COOKIE_NAME);
                if (csrfToken) {
                    config.headers["X-CSRFToken"] = csrfToken;
                }
            }
            return config;
        },
        error => Promise.reject(error)
    );

    return instance;
}

export const api = createApiClient();
</file>

<file path="frontend/src/api/csrfService.js">
import Cookies from "js-cookie";
import { api } from './client';

export const CSRF_COOKIE_NAME = "csrftoken";

// How long do we consider cookies to be valid?
export const CSRF_REFRESH_THRESHOLD_MINUTES = 5;

/**
 * Checking whether there is a CSRF token and whether it will expire soon
 */
function needsCsrfRefresh() {
    const token = Cookies.get(CSRF_COOKIE_NAME);
    if (!token) return true; // token is expired
    return false; // token is fine
}

/**
 * Getter for CSRF
 * URL: /api/v1/csrf
 * Req: {  }
 * Res: 200 { csrfToken }
 * @returns {Promise<string>} csrfToken
 */
export async function fetchCsrfToken() {
    try {
        const { data } = await api.get("/api/v1/auth/csrf");
        return data?.csrfToken;
    } catch (err) {
        console.error("Error when requesting a CSRF token:", err);
    }
}

/**
 * CSRF initialization: if there is no token, or it has expired, obtain a new one
 */
export async function initCsrf() {
    if (needsCsrfRefresh()) {
        await fetchCsrfToken();
    }
}
</file>

<file path="frontend/src/pages/Registration/registration.jsx">
import './registration.css';
import { Link, useNavigate } from 'react-router-dom';
import { Validator } from '../../utils/validation/validate';
import Button from '../../components/Button/button';
import Panel, { PanelBody, PanelBodyTitle, PanelNavigation, PanelTitle } from '../../components/Panel/panel';
import TextInput from '../../components/TextInput/textInput';
import HiddenInput from '../../components/HiddenInput/hiddenInput';
import { useAuthContext } from '../../provider/AuthProvider/authProvider';
import bruteForce from '../../utils/bruteForce/bruteForce';
import { useFormWithProtection } from '../../hooks/useFormWithProtection';
import { useFormWithServerErrors } from '../../hooks/useFormWithServerErrors';

/**
 * Registration component handles user registration.
 * It includes form fields for company name, email, password, confirmation password,
 * last name, first name, representation of the company, and business type.
 * It validates the input data and submits the registration request.
 * If the registration is successful, it navigates to the confirmation page.
 * If there are validation errors or server-side errors, it displays appropriate messages.
 * @returns {JSX.Element}
 */
function Registration() {
    // This component handles user registration
    const { setUser, register } = useAuthContext();

    // Hook to navigate programmatically
    const navigate = useNavigate();

    // Brute force max attempts constant
    const MAX_ATTEMPTS = 5;

    // Form with protection hook
    const form = useFormWithProtection({
        email: "",
        password: "",
        confirmPassword: "",
        lastName: "",
        firstName: "",
        unexpected: "",
    });

    // Function to handle server-side errors
    const extractError = (error) => {
        if (error?.response?.data?.errors?.email) {
            return { email: Validator.serverSideErrorMessages.emailAlreadyExist };
        } else {
            return { unexpected: Validator.serverSideErrorMessages.unexpected };
        }
    };

    // Function to handle form submission with brute force protection
    const doSubmit = ({ form, handleError }) => {
        register(
            form.data.email,
            form.data.firstName,
            form.data.lastName,
            form.data.password,
            form.data.confirmPassword
        )
            .then((res) => {
                setUser({
                    id: res.data.user_id,
                    email: res.data.email
                });

                navigate('/auth/register/confirm');
            })
            .catch((error) => bruteForce(error, {
                attempts: form.attempts,
                setAttempts: form.setAttempts,
                setIsLocked: form.setIsLocked,
                handleError
            }))
            .finally(() => form.setIsLocked(false));
    };

    const { handleSubmit, handleChange } = useFormWithServerErrors({
        form,
        navigate,
        extractError,
        doSubmit,
    });

    return (
        <>
            <Panel aria-labelledby="register-form-title">
                <PanelTitle id="register-form-title">Реєстрація</PanelTitle>
                <PanelBody>
                    <PanelBodyTitle
                        title={'Обов’язкові поля позначені зірочкою'}
                    />
                    <div>
                        <PanelBodyTitle
                            id="email-label"
                            title={'Електронна пошта'}
                            className={'content--text-container__margin'}
                        />
                        <TextInput
                            id="email"
                            name="email"
                            autoComplete="off"
                            autoCorrect="off"
                            spellCheck="false"
                            value={form.data.email}
                            onChange={handleChange}
                            placeholder={'Введіть свою електронну пошту'}
                            className={
                                form.errors['email'] && 'input__error-border-color'
                            }
                            aria-labelledby="email-label"
                            aria-describedby={form.errors['email'] ? 'email-error' : undefined}
                            aria-invalid={!!form.errors['email']}
                            aria-required="true"
                        />
                        {form.errors['email'] && (
                            <p id="email-error"
                               className={'panel--danger-text'}
                               role="alert"
                            >
                                {form.errors['email']}
                            </p>
                        )}
                    </div>
                    <div>
                        <PanelBodyTitle
                            id="password-label"
                            title={'Пароль'}
                            className={'content--text-container__margin'}
                        >
                            Пароль повинен мати 8+ символів, містити принаймні
                            велику, малу літеру (A..Z, a..z) та цифру (0..9).
                        </PanelBodyTitle>
                        <HiddenInput
                            id="password"
                            name="password"
                            autoComplete="off"
                            autoCorrect="off"
                            spellCheck="false"
                            value={form.data.password}
                            onChange={handleChange}
                            placeholder={'Введіть пароль'}
                            className={
                                form.errors['password'] && 'input__error-border-color'
                            }
                            aria-labelledby="password-label"
                            aria-describedby={form.errors['password'] ? 'password-error' : undefined}
                            aria-invalid={!!form.errors['password']}
                            aria-required="true"
                        />
                        {form.errors['password'] && (
                            <p id="password-error"
                               className={'panel--danger-text'}
                               role="alert"
                            >
                                {form.errors['password']}
                            </p>
                        )}
                    </div>
                    <div>
                        <PanelBodyTitle
                            id="confirmPassword-label"
                            title={'Повторіть пароль'}
                            className={'content--text-container__margin'}
                        />
                        <HiddenInput
                            id="confirmPassword"
                            name="confirmPassword"
                            autoComplete="off"
                            autoCorrect="off"
                            spellCheck="false"
                            value={form.data.confirmPassword}
                            onChange={handleChange}
                            placeholder={'Введіть пароль ще раз'}
                            className={
                                form.errors['confirmPassword'] &&
                                'input__error-border-color'
                            }
                            aria-labelledby="confirmPassword-label"
                            aria-describedby={form.errors['confirmPassword'] ? 'confirmPassword-error' : undefined}
                            aria-invalid={!!form.errors['confirmPassword']}
                            aria-required="true"
                        />
                        {form.errors['confirmPassword'] && (
                            <p id="confirmPassword-error"
                               className={'panel--danger-text'}
                               role="alert"
                            >
                                {form.errors['confirmPassword']}
                            </p>
                        )}
                    </div>
                    <div>
                        <PanelBodyTitle
                            id="lastName-label"
                            title={'Прізвище'}
                            className={'content--text-container__margin'}
                        />
                        <TextInput
                            id="lastName"
                            name="lastName"
                            autoComplete="off"
                            autoCorrect="off"
                            spellCheck="false"
                            value={form.data.lastName}
                            onChange={handleChange}
                            placeholder={'Введіть ваше прізвище'}
                            className={
                                form.errors['lastName'] &&
                                'input__error-border-color'
                            }
                            aria-labelledby="lastName-label"
                            aria-describedby={form.errors['lastName'] ? 'lastName-error' : undefined}
                            aria-invalid={!!form.errors['lastName']}
                            aria-required="true"
                        />
                        {form.errors['lastName'] && (
                            <p id="lastName-error"
                               className={'panel--danger-text'}
                               role="alert"
                            >
                                {form.errors['lastName']}
                            </p>
                        )}
                    </div>
                    <div>
                        <PanelBodyTitle
                            id="firstName-label"
                            title={'Ім‘я'}
                            className={'content--text-container__margin'}
                        />
                        <TextInput
                            name="firstName"
                            autoComplete="off"
                            autoCorrect="off"
                            spellCheck="false"
                            value={form.data.firstName}
                            onChange={handleChange}
                            placeholder={'Введіть ваше ім’я'}
                            className={
                                form.errors['firstName'] &&
                                'input__error-border-color'
                            }
                            aria-labelledby="firstName-label"
                            aria-describedby={form.errors['firstName'] ? 'firstName-error' : undefined}
                            aria-invalid={!!form.errors['firstName']}
                            aria-required="true"
                        />
                        {form.errors['firstName'] && (
                            <p id="firstName-error"
                               className={'panel--danger-text'}
                               role="alert"
                            >
                                {form.errors['firstName']}
                            </p>
                        )}
                    </div>
                    {!form.isLocked && form.attempts >= (MAX_ATTEMPTS - 2 - 1) && (
                        <p className={'content--text'}
                           role="alert"
                        >
                            Залишилося спроб: {MAX_ATTEMPTS - form.attempts}
                        </p>
                    )}
                    {form.isLocked && form.attempts >= (MAX_ATTEMPTS + 1 - 1) && (
                        <p className={'panel--danger-text'}>
                            Повторіть спробу через 30 секунд
                        </p>
                    )}
                    {form.errors['unexpected'] && (
                        <p className={'panel--danger-text'}>
                            {form.errors['unexpected']}
                        </p>
                    )}
                </PanelBody>
                <PanelNavigation>
                    <Button
                        onClick={handleSubmit}
                        disabled={form.isDisabled || form.isLocked}
                        className={'button__padding panel--button'}
                        type="submit"
                    >
                        Зареєструватися
                    </Button>
                </PanelNavigation>
            </Panel>
            <div className={'panel--under-panel'}>
                <span>Ви вже зареєстровані у нас?</span>
                <Link className={'text-underline text-bold'} to={'/auth/login'}>
                    Увійти
                </Link>
            </div>
        </>
    );
}

export default Registration;
</file>

<file path="startups/views/startup.py">
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework.filters import SearchFilter
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework import status
from rest_framework.exceptions import ValidationError, NotFound
from startups.models import Startup
from startups.serializers.startup_full import StartupSerializer
from startups.serializers.startup_create import StartupCreateSerializer
from startups.views.startup_base import BaseValidatedModelViewSet
from users.cookie_jwt import CookieJWTAuthentication
from users.permissions import IsStartupUser, CanCreateCompanyPermission, IsAuthenticatedOr401
from communications.serializers import (
    UserNotificationPreferenceSerializer,
    UserNotificationTypePreferenceSerializer,
    UpdateTypePreferenceSerializer,
)
from communications.services import get_or_create_user_pref

class StartupViewSet(BaseValidatedModelViewSet):
    queryset = Startup.objects.select_related('user', 'industry', 'location') \
        .prefetch_related('projects')
    
    serializer_class = StartupSerializer
    permission_classes = [IsAuthenticatedOr401, IsStartupUser]
    authentication_classes = [CookieJWTAuthentication]
    filter_backends = [DjangoFilterBackend, SearchFilter]
    filterset_fields = ['industry', 'stage', 'location__country']
    search_fields = ['company_name', 'user__first_name', 'user__last_name', 'email']

    def _get_or_create_user_pref(self, request):
        """Fetch the current user's notification preferences, creating defaults if absent.
        Delegates to communications.services.get_or_create_user_pref to avoid duplication and
        to seed type preferences using each NotificationType.default_frequency.
        """
        return get_or_create_user_pref(request.user)

    @action(detail=False, methods=['get', 'patch'], url_path='preferences', url_name='preferences')
    def preferences(self, request):
        """Get or update the current startup user's notification channel preferences."""
        pref = self._get_or_create_user_pref(request)

        if request.method.lower() == 'get':
            serializer = UserNotificationPreferenceSerializer(pref, context={'request': request})
            return Response(serializer.data)

        # PATCH
        serializer = UserNotificationPreferenceSerializer(
            pref,
            data=request.data,
            partial=True,
            context={'request': request},
        )
        if not serializer.is_valid():
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        serializer.save()
        return Response(serializer.data)

    @action(detail=False, methods=['patch'], url_path='preferences/update_type', url_name='preferences-update-type')
    def update_type_preference(self, request):
        """Update the frequency for a specific notification type for the current startup user."""
        pref = self._get_or_create_user_pref(request)

        notification_type_id = request.data.get('notification_type_id')
        frequency = request.data.get('frequency')

        if notification_type_id is None or frequency is None:
            errors = {}
            if notification_type_id is None:
                errors['notification_type_id'] = ['This field is required.']
            if frequency is None:
                errors['frequency'] = ['This field is required.']
            return Response(errors, status=status.HTTP_400_BAD_REQUEST)

        try:
            nt_id = int(notification_type_id)
        except (TypeError, ValueError):
            return Response({'notification_type_id': ['A valid integer is required.']}, status=status.HTTP_400_BAD_REQUEST)

        serializer = UpdateTypePreferenceSerializer(
            data={'notification_type_id': nt_id, 'frequency': frequency},
            context={'pref': pref},
        )
        try:
            if not serializer.is_valid():
                errors = serializer.errors
                non_field = errors.get('non_field_errors') if isinstance(errors, dict) else None
                if non_field:
                    for err in non_field:
                        code = getattr(err, 'code', None)
                        if code == 'not_found' or str(err) == 'Notification type preference not found':
                            return Response({'error': 'Notification type preference not found'}, status=status.HTTP_404_NOT_FOUND)
                return Response(errors, status=status.HTTP_400_BAD_REQUEST)
        except NotFound:
            return Response({'error': 'Notification type preference not found'}, status=status.HTTP_404_NOT_FOUND)
        except ValidationError as exc:
            detail = getattr(exc, 'detail', None)
            return Response(detail or serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        type_pref = serializer.save()
        return Response(UserNotificationTypePreferenceSerializer(type_pref, context={'request': request}).data)


    def _get_or_create_user_pref(self, request):
        """Fetch the current user's notification preferences, creating defaults if absent.
        Delegates to communications.services.get_or_create_user_pref to avoid duplication and
        to seed type preferences using each NotificationType.default_frequency.
        """
        return get_or_create_user_pref(request.user)

    @action(detail=False, methods=['get', 'patch'], url_path='preferences', url_name='preferences')
    def preferences(self, request):
        """Get or update the current startup user's notification channel preferences."""
        pref = self._get_or_create_user_pref(request)

        if request.method.lower() == 'get':
            serializer = UserNotificationPreferenceSerializer(pref, context={'request': request})
            return Response(serializer.data)

        # PATCH
        serializer = UserNotificationPreferenceSerializer(
            pref,
            data=request.data,
            partial=True,
            context={'request': request},
        )
        if not serializer.is_valid():
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        serializer.save()
        return Response(serializer.data)

    @action(detail=False, methods=['patch'], url_path='preferences/update_type', url_name='preferences-update-type')
    def update_type_preference(self, request):
        """Update the frequency for a specific notification type for the current startup user."""
        pref = self._get_or_create_user_pref(request)

        notification_type_id = request.data.get('notification_type_id')
        frequency = request.data.get('frequency')

        if notification_type_id is None or frequency is None:
            errors = {}
            if notification_type_id is None:
                errors['notification_type_id'] = ['This field is required.']
            if frequency is None:
                errors['frequency'] = ['This field is required.']
            return Response(errors, status=status.HTTP_400_BAD_REQUEST)

        try:
            nt_id = int(notification_type_id)
        except (TypeError, ValueError):
            return Response({'notification_type_id': ['A valid integer is required.']}, status=status.HTTP_400_BAD_REQUEST)

        serializer = UpdateTypePreferenceSerializer(
            data={'notification_type_id': nt_id, 'frequency': frequency},
            context={'pref': pref},
        )
        try:
            if not serializer.is_valid():
                errors = serializer.errors
                non_field = errors.get('non_field_errors') if isinstance(errors, dict) else None
                if non_field:
                    for err in non_field:
                        code = getattr(err, 'code', None)
                        if code == 'not_found' or str(err) == 'Notification type preference not found':
                            return Response({'error': 'Notification type preference not found'}, status=status.HTTP_404_NOT_FOUND)
                return Response(errors, status=status.HTTP_400_BAD_REQUEST)
        except NotFound:
            return Response({'error': 'Notification type preference not found'}, status=status.HTTP_404_NOT_FOUND)
        except ValidationError as exc:
            detail = getattr(exc, 'detail', None)
            return Response(detail or serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        type_pref = serializer.save()
        return Response(UserNotificationTypePreferenceSerializer(type_pref, context={'request': request}).data)


    def get_permissions(self):
        """
        Instantiates and returns the list of permissions that this view requires.
        """
        if self.action == 'create':
            return [IsAuthenticatedOr401(), CanCreateCompanyPermission()]
        return [IsAuthenticatedOr401(), IsStartupUser()]

    def get_serializer_class(self):
        """
        Return the appropriate serializer class based on the request action.
        """
        if self.action == 'create':
            return StartupCreateSerializer
        return StartupSerializer
</file>

<file path="users/views/auth_views.py">
# Python standard library
import logging
import secrets
from urllib.parse import urljoin

# Django imports
from django.conf import settings
from django.contrib.auth import get_user_model
from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.utils import timezone
from drf_spectacular.utils import extend_schema, OpenApiResponse

# Third-party imports
from rest_framework import status
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from rest_framework.views import APIView

# Local application imports
from users.serializers.user_serializers import CurrentUserSerializer
from users.serializers.user_serializers import CustomUserCreateSerializer
from users.views.base_protected_view import CookieJWTProtectedView

logger = logging.getLogger(__name__)


@extend_schema(
    tags=["Auth"],
    summary="Register a new user",
    request=CustomUserCreateSerializer,
    responses={
        201: OpenApiResponse(description="User created and verification email sent"),
        400: OpenApiResponse(description="Validation errors"),
    },
)
class UserRegistrationView(APIView):
    """
    Handle user registration with email verification.
    """
    permission_classes = [AllowAny]
    authentication_classes = []
    serializer_class = CustomUserCreateSerializer

    def _generate_verification_token(self):
        """Generate a secure random token for email verification."""
        return secrets.token_urlsafe(32)

    def _send_verification_email(self, request, user, token):
        """Send verification email to the user."""
        verification_relative_url = settings.FRONTEND_ROUTES["verify_email"].format(
            user_id=user.user_id,
            token=token,
        )
        verification_url = urljoin(settings.FRONTEND_URL, verification_relative_url)

        context = {
            'user': user,
            'verification_url': verification_url,
        }

        subject = 'Verify Your Email'
        html_message = render_to_string('email/activation.html', context)
        plain_message = f"Please verify your email by visiting: {verification_url}"

        try:
            send_mail(
                subject=subject,
                message=plain_message,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[user.email],
                html_message=html_message,
                fail_silently=False,
            )
            return True
        except Exception as e:
            logger.error(f"Failed to send verification email to {user.email}: {str(e)}")
            return False

    def post(self, request, *args, **kwargs):
        """
        Handle user registration request.
        """
        logger.info("Received user registration request")
        serializer = self.serializer_class(data=request.data, context={'request': request})

        if not serializer.is_valid():
            logger.warning(f"Validation failed: {serializer.errors}")
            if 'email' in serializer.errors and User.objects.filter(
                    email=request.data.get('email')
            ).exists():
                return Response(
                    {'status': 'error', 'errors': serializer.errors},
                    status=status.HTTP_409_CONFLICT
                )
            return Response(
                {'status': 'error', 'errors': serializer.errors},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            user = serializer.save()
            verification_token = self._generate_verification_token()
            user.email_verification_token = verification_token
            user.email_verification_sent_at = timezone.now()
            user.save(update_fields=['email_verification_token', 'email_verification_sent_at'])

            logger.info(f"User {user.email} registered successfully")

            if not self._send_verification_email(request, user, verification_token):
                logger.error(f"Failed to send verification email to {user.email}")

            return Response(
                {
                    'status': 'success',
                    'message': 'Registration successful! Please check your email to verify your account.',
                    'user_id': user.user_id,
                    'email': user.email
                },
                status=status.HTTP_201_CREATED
            )

        except Exception as e:
            logger.error(f"Error during user registration: {str(e)}", exc_info=True)
            return Response(
                {
                    'status': 'error',
                    'message': 'An unexpected error occurred during registration.'
                },
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


User = get_user_model()


@extend_schema(
    operation_id="auth_me",
    summary="Retrieve the currently authenticated user",
    description=(
            "Returns the profile information of the currently authenticated user. "
            "Requires a valid JWT access token. "
            "If the token is missing or invalid, returns 401 Unauthorized."
    ),
    responses={
        200: CurrentUserSerializer,
        401: OpenApiResponse(description="Unauthorized - missing or invalid token"),
        403: OpenApiResponse(description="Forbidden - user account is inactive"),
        404: OpenApiResponse(description="Not Found - user no longer exists"),
    },
    tags=["Auth"],
)
class MeView(CookieJWTProtectedView):
    """Returns profile info of the currently authenticated user."""

    def get(self, request):
        serializer = CurrentUserSerializer(request.user)
        return Response(serializer.data)
</file>

<file path="users/views/token_views.py">
import logging
from drf_spectacular.utils import (
    extend_schema,
    OpenApiResponse,
    inline_serializer,
)
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
from rest_framework.views import APIView
from users.serializers.token_serializer import CustomTokenObtainPairSerializer
from rest_framework import status, serializers
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.response import Response
from rest_framework.permissions import AllowAny
from django.utils.decorators import method_decorator
from django.views.decorators.csrf import ensure_csrf_cookie
from django.middleware.csrf import get_token
from django.views.decorators.csrf import csrf_protect
from utils.cookies import set_auth_cookies, clear_auth_cookies
from validation.validate_token import safe_decode
from django.contrib.auth import authenticate

logger = logging.getLogger(__name__)


@extend_schema(
    tags=["Auth"],
    summary="Get CSRF token",
    description=(
            "Returns a CSRF token in JSON and sets the CSRF cookie. "
            "Call this before any POST/PUT/PATCH/DELETE requests."
    ),
    responses={
        200: OpenApiResponse(
            description="CSRF token retrieved successfully",
            response=inline_serializer(
                name="CsrfTokenResponse",
                fields={"csrfToken": serializers.CharField()},
            ),
        )
    },
)
class CSRFTokenView(APIView):
    permission_classes = [AllowAny]
    authentication_classes = []

    @method_decorator(ensure_csrf_cookie)
    def get(self, request, *args, **kwargs):
        """
        Returns a CSRF token in JSON and sets the `csrftoken` cookie.
        """
        token = get_token(request)
        return Response({"csrfToken": token})


@extend_schema(
    tags=["Auth"],
    summary="Obtain JWT (sets cookies)",
    description="Authenticates user, stores access/refresh tokens in HttpOnly cookies (access ~15m, refresh ~7d), returns minimal user info only.",
    request=CustomTokenObtainPairSerializer,
    responses={
        200: OpenApiResponse(
            description="Authenticated successfully",
            response=inline_serializer(
                name="LoginResponse",
                fields={"email": serializers.EmailField(), "user_id": serializers.IntegerField()},
            ),
        ),
        400: OpenApiResponse(
            description="Tokens missing or bad request",
            response=inline_serializer(name="LoginErrorResponse", fields={"detail": serializers.CharField()}),
        ),
        401: OpenApiResponse(
            description="Invalid credentials",
            response=inline_serializer(name="LoginUnauthorizedResponse", fields={"detail": serializers.CharField()})
        )
    },
)
@method_decorator(csrf_protect, name="post")
class CustomTokenObtainPairView(TokenObtainPairView):
    """
    Issues access & refresh tokens (in HttpOnly cookies) upon successful authentication.
    Response body contains minimal user info only (no tokens in body).
    """
    permission_classes = [AllowAny]
    authentication_classes = []
    serializer_class = CustomTokenObtainPairSerializer

    def post(self, request, *args, **kwargs):
        """
        Steps:
        1) Validate credentials via serializer (SimpleJWT).
        2) On success, set `refresh_token` & `access_token` cookies.
        3) Return user info in JSON (no tokens in body).
        """
        response = super().post(request, *args, **kwargs)
        if "access" not in response.data or "refresh" not in response.data:
            return Response({"detail": "Tokens missing."}, status=status.HTTP_400_BAD_REQUEST)

        set_auth_cookies(response, response.data["access"], response.data["refresh"])

        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.user

        response.data = {
            "detail": "Login successful",
            "email": user.email,
            "user_id": user.id
        }
        return response


@extend_schema(
    tags=["Auth"],
    summary="Refresh JWT access token (cookie-based)",
    description="Reads refresh_token from HttpOnly cookie, validates it, issues new access token in cookie. Does not return tokens in body.",
    responses={
        200: OpenApiResponse(
            description="Access token refreshed",
            response=inline_serializer(name="RefreshResponse", fields={"detail": serializers.CharField()}),
        ),
        404: OpenApiResponse(
            description="Refresh token missing",
            response=inline_serializer(name="RefreshMissingResponse", fields={"detail": serializers.CharField()}),
        ),
        205: OpenApiResponse(
            description="Refresh token invalid/expired; cookies cleared",
            response=inline_serializer(name="RefreshClearedResponse", fields={"detail": serializers.CharField()}),
        ),
        400: OpenApiResponse(
            description="Access token not generated",
            response=inline_serializer(name="RefreshBadResponse", fields={"detail": serializers.CharField()}),
        ),
    },
)
@method_decorator(csrf_protect, name="post")
class CustomTokenRefreshView(TokenRefreshView):
    """
    Refreshes the access token using the refresh token from HttpOnly cookie.
    Sets new access token in cookie. Does not return tokens in response body.
    """
    authentication_classes = []
    permission_classes = []

    def post(self, request, *args, **kwargs):
        """
        Steps:
        1) Read `refresh_token` from cookies.
        2) Validate/parse it. On error — clear cookies and return 205.
        3) Issue new access token and set it in `access_token` cookie.
        4) Return { "detail": "Access token refreshed" }.
        """
        refresh = request.COOKIES.get("refresh_token")
        if not refresh:
            return Response({"detail": "Refresh token missing."}, status=status.HTTP_404_NOT_FOUND)

        try:
            safe_decode(refresh)
        except Exception as e:
            response = Response({"detail": str(e)}, status=status.HTTP_205_RESET_CONTENT)
            clear_auth_cookies(response)
            return response

        serializer = self.get_serializer(data={"refresh": refresh})
        serializer.is_valid(raise_exception=True)
        access = serializer.validated_data.get("access")

        response = Response({"detail": "Token refreshed"}, status=status.HTTP_200_OK)
        set_auth_cookies(response, access)
        return response


@extend_schema(
    tags=["Auth"],
    summary="Logout (blacklist refresh token)",
    description=(
            "Attempts to blacklist the refresh token (if blacklist app enabled) "
            "and deletes both `refresh_token` and `access_token` cookies."
    ),
    responses={
        200: OpenApiResponse(
            description="Logout successful",
            response=inline_serializer(
                name="LogoutResponse",
                fields={"detail": serializers.CharField()},
            ),
        ),
    },
)
@method_decorator(csrf_protect, name="post")
class LogoutView(APIView):
    """
    Logs out the user by invalidating the refresh token (best-effort) and clearing cookies.
    Requires authentication (access token).
    """
    permission_classes = [AllowAny]
    authentication_classes = []

    def post(self, request, *args, **kwargs):
        """
        Steps:
        1) Read `refresh_token` from cookies.
        2) Try to blacklist it (if supported).
        3) Clear both cookies and return 205.
        """
        refresh_token = request.COOKIES.get("refresh_token")

        if refresh_token:
            try:
                token = RefreshToken(refresh_token)
                token.blacklist()
            except Exception as e:
                logger.warning(f"Failed to blacklist refresh token: {str(e)}")

        response = Response({"detail": "Logged out successfully"}, status=status.HTTP_200_OK)
        clear_auth_cookies(response)
        return response
</file>

<file path="investors/views.py">
import logging
from django.db import IntegrityError
from django.shortcuts import get_object_or_404

from rest_framework import viewsets, status
from rest_framework.exceptions import PermissionDenied, ValidationError
from rest_framework.response import Response
from rest_framework.views import APIView
from investors.models import Investor, SavedStartup
from investors.permissions import IsSavedStartupOwner
from investors.serializers.investor import InvestorSerializer, SavedStartupSerializer
from investors.serializers.investor_create import InvestorCreateSerializer
from users.cookie_jwt import CookieJWTAuthentication
from users.permissions import IsInvestor, CanCreateCompanyPermission, IsAuthenticatedOr401
from startups.models import Startup
from users.views.base_protected_view import CookieJWTProtectedView

logger = logging.getLogger(__name__)


class InvestorViewSet(viewsets.ModelViewSet):
    """
    ViewSet for managing Investor instances.
    Optimized with select_related to avoid N+1 queries when fetching related user, industry, and location.
    """
    queryset = Investor.objects.select_related("user", "industry", "location")
    serializer_class = InvestorSerializer
    authentication_classes = [CookieJWTAuthentication]
    permission_classes_by_action = {
        "create": [IsAuthenticatedOr401, CanCreateCompanyPermission],
        "default": [IsAuthenticatedOr401],
    }

    def get_permissions(self):
        """
        Instantiates and returns the list of permissions that this view requires.
        """
        perms = self.permission_classes_by_action.get(self.action, self.permission_classes_by_action["default"])
        return [perm() for perm in perms]

    def get_serializer_class(self):
        """
        Return the appropriate serializer class based on the request action.
        """
        if self.action == 'create':
            return InvestorCreateSerializer
        return InvestorSerializer


class SavedStartupViewSet(viewsets.ModelViewSet):
    """
    ViewSet for managing SavedStartup instances.
    Only authenticated investors who own the SavedStartup can modify/delete it.
    """
    permission_classes = [IsAuthenticatedOr401, IsInvestor, IsSavedStartupOwner]
    authentication_classes = [CookieJWTAuthentication]
    serializer_class = SavedStartupSerializer

    def get_queryset(self):
        user = self.request.user
        if not hasattr(user, "investor"):
            logger.warning(
                "SavedStartup list denied for non-investor",
                extra={"by_user": getattr(user, "pk", None)},
            )
            raise PermissionDenied("Only investors can list saved startups.")
        return SavedStartup.objects.filter(investor=self.request.user.investor)

    def create(self, request, *args, **kwargs):
        user = request.user

        if not hasattr(user, "investor"):
            logger.warning(
                "SavedStartup create denied for non-investor",
                extra={"by_user": getattr(user, "pk", None)},
            )
            raise ValidationError({"non_field_errors": ["Only investors can save startups."]})

        payload = request.data or {}

        if "startup" not in payload or payload.get("startup") in (None, "", []):
            logger.warning(
                "SavedStartup create failed: missing startup",
                extra={"by_user": user.pk},
            )

        status_val = payload.get("status")
        if status_val is not None:
            status_field = SavedStartup._meta.get_field("status")
            valid_status = {c[0] for c in status_field.choices}
            if status_val not in valid_status:
                logger.warning(
                    "SavedStartup create failed: invalid status",
                    extra={"status": status_val, "by_user": user.pk},
                )

        startup_id = payload.get("startup")
        if startup_id and SavedStartup.objects.filter(
                investor=user.investor, startup_id=startup_id
        ).exists():
            logger.warning(
                "SavedStartup create failed: duplicate",
                extra={"investor_id": user.investor.pk, "startup_id": startup_id, "by_user": user.pk},
            )

        serializer = self.get_serializer(data=payload)

        try:
            serializer.is_valid(raise_exception=True)
        except ValidationError as e:
            if startup_id and SavedStartup.objects.filter(
                    investor=user.investor, startup_id=startup_id
            ).exists():
                logger.warning(
                    "SavedStartup create failed: duplicate",
                    extra={"investor_id": user.investor.pk, "startup_id": startup_id, "by_user": user.pk},
                )
            detail = getattr(e, "detail", {})
            if isinstance(detail, dict):
                msgs = detail.get("startup")
                if msgs:
                    if not isinstance(msgs, (list, tuple)):
                        msgs = [msgs]
                    if any("own startup" in str(m).lower() for m in msgs):
                        logger.warning(
                            "SavedStartup create failed: own startup",
                            extra={"startup_id": startup_id, "by_user": getattr(user, "pk", None)},
                        )
            raise

        self.perform_create(serializer)
        headers = self.get_success_headers(serializer.data)
        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)

    def perform_create(self, serializer):
        user = self.request.user
        if not hasattr(user, "investor"):
            logger.warning(
                "SavedStartup create denied for non-investor",
                extra={"by_user": getattr(user, "pk", None)},
            )
            raise ValidationError({"non_field_errors": ["Only investors can save startups."]})

        startup = serializer.validated_data.get("startup")
        if startup is None:
            logger.warning("SavedStartup create failed: missing startup", extra={"by_user": user.pk})
            raise ValidationError({"startup": "This field is required."})

        status_field = SavedStartup._meta.get_field("status")
        valid_status = {choice[0] for choice in status_field.choices}
        status_val = serializer.validated_data.get("status")
        if status_val and status_val not in valid_status:
            logger.warning(
                "SavedStartup create failed: invalid status",
                extra={"status": status_val, "by_user": user.pk},
            )
            raise ValidationError({"status": f"Invalid status '{status_val}'."})

        if startup.user_id == user.pk:
            logger.warning(
                "SavedStartup create failed: own startup",
                extra={"startup_id": startup.pk, "by_user": user.pk},
            )
            raise ValidationError({"startup": "You cannot save your own startup."})

        try:
            instance = serializer.save(investor=user.investor)
        except IntegrityError:
            logger.warning(
                "SavedStartup create failed: duplicate",
                extra={"investor_id": user.investor.pk, "startup_id": startup.pk, "by_user": user.pk},
            )
            raise ValidationError({"non_field_errors": ["Already saved."]})

        logger.info(
            "SavedStartup created",
            extra={
                "investor_id": user.investor.pk,
                "startup_id": startup.pk,
                "saved_id": instance.pk,
                "by_user": user.pk,
            },
        )

    def partial_update(self, request, *args, **kwargs):
        instance = self.get_object()
        data = request.data.copy()
        data.pop("investor", None)
        data.pop("startup", None)

        serializer = self.get_serializer(instance, data=data, partial=True)
        try:
            serializer.is_valid(raise_exception=True)
        except ValidationError as e:
            logger.warning(
                "SavedStartup update validation error",
                extra={"saved_id": instance.pk, "by_user": request.user.pk, "errors": getattr(e, "detail", str(e))},
            )
            raise
        self.perform_update(serializer)

        logger.info(
            "SavedStartup updated",
            extra={"saved_id": serializer.instance.pk, "by_user": request.user.pk},
        )
        return Response(serializer.data)

    def perform_destroy(self, instance):
        logger.info(
            "SavedStartup deleted",
            extra={"saved_id": instance.pk, "by_user": self.request.user.pk},
        )
        super().perform_destroy(instance)

class SaveStartupView(CookieJWTProtectedView):

    def post(self, request, startup_id: int):
        """
        Allow an investor to save/follow a startup.
        Returns 201 if newly created, 200 if already saved.
        """
        startup = get_object_or_404(Startup, pk=startup_id)

        serializer = SavedStartupSerializer(
            data={"startup": startup.id},
            context={"request": request},
        )
        try:
            serializer.is_valid(raise_exception=True)
            obj = serializer.save()
            return Response(SavedStartupSerializer(obj).data, status=status.HTTP_201_CREATED)
        except Exception as exc:
            from rest_framework.exceptions import ValidationError as DRFValidationError
            if isinstance(exc, DRFValidationError) and "Already saved." in str(exc.detail):
                obj = SavedStartup.objects.get(investor=request.user.investor, startup=startup)
                return Response(SavedStartupSerializer(obj).data, status=status.HTTP_200_OK)
            raise
</file>

<file path="projects/views.py">
from rest_framework import viewsets, filters, status
from rest_framework.response import Response
from rest_framework.exceptions import ValidationError
from django_filters.rest_framework import DjangoFilterBackend
from elasticsearch.exceptions import ConnectionError, TransportError
from elasticsearch_dsl import Q
from projects.models import Project

from django_elasticsearch_dsl_drf.viewsets import DocumentViewSet
from django_elasticsearch_dsl_drf.filter_backends import (
    FilteringFilterBackend,
    OrderingFilterBackend,
    SearchFilterBackend,
)

from users.cookie_jwt import CookieJWTAuthentication
from users.permissions import IsAuthenticatedOr401
from .documents import ProjectDocument
from .permissions import IsOwnerOrReadOnly
from .serializers import ProjectDocumentSerializer, ProjectReadSerializer, ProjectWriteSerializer
import logging

logger = logging.getLogger(__name__)


class ProjectViewSet(viewsets.ModelViewSet):
    """
    API endpoint for viewing and editing projects.

    This ViewSet supports both read and write operations for projects.
    It optimizes database access by using `select_related` for related fields
    (`startup` and `category`) to avoid N+1 query issues.

    Features:
        - Read operations: list and retrieve project details.
        - Write operations: create, update, partially update, and delete projects.
        - Filtering: by `status`, `category`, and `startup`.
        - Searching: by `title`, `description`, and `email`.
        - Ordering: by `created_at`, `funding_goal`, and `current_funding`.
        - Default ordering: newest projects first (`-created_at`).

    Permissions:
        - Authenticated users can view all projects.
        - Only the owner can modify or delete their projects.
    """
    queryset = Project.objects.select_related('startup', 'category').all()
    permission_classes = [IsAuthenticatedOr401, IsOwnerOrReadOnly]
    authentication_classes = [CookieJWTAuthentication]

    filter_backends = [DjangoFilterBackend, filters.OrderingFilter, filters.SearchFilter]
    filterset_fields = ['status', 'category', 'startup']
    search_fields = ['title', 'description', 'email']
    ordering_fields = ['created_at', 'funding_goal', 'current_funding']
    ordering = ['-created_at']

    def get_serializer_class(self):
        """
        Return the appropriate serializer class depending on the action.

        - For read actions (`list`, `retrieve`), use `ProjectReadSerializer`
          to include detailed, read-only fields.
        - For write actions (`create`, `update`, `partial_update`, `destroy`),
          use `ProjectWriteSerializer` to handle validation and input data.
        """
        if self.action in ['list', 'retrieve']:
            return ProjectReadSerializer
        return ProjectWriteSerializer
    
    def perform_update(self, serializer):
        serializer.instance._last_editor = self.request.user
        serializer.save()

    def partial_update(self, request, *args, **kwargs):
        """
        Handle PATCH requests for partially updating a project.
        """
        if 'startup' in request.data or 'startup_id' in request.data:
            return Response(
                {"detail": "Cannot change the startup of a project."},
                status=status.HTTP_403_FORBIDDEN
            )
        return super().partial_update(request, *args, **kwargs)


class ProjectDocumentView(DocumentViewSet):
    """
    Elasticsearch-backed viewset for Project documents.
    Supports filtering, ordering, and full-text search with robust error handling.
    """
    permission_classes = [IsAuthenticatedOr401]
    authentication_classes = [CookieJWTAuthentication]
    document = ProjectDocument
    serializer_class = ProjectDocumentSerializer

    filter_backends = [
        FilteringFilterBackend,
        OrderingFilterBackend,
        SearchFilterBackend,
    ]

    filter_fields = {
        'category.name': 'category.name',
        'startup.company_name': 'startup.company_name',
    }

    ordering_fields = {
        'id': 'id',
        'title': 'title.raw',
    }

    search_fields = (
        'title',
        'description',
    )

    def filter_queryset(self, queryset):
        """
        Filters the queryset based on query parameters.
        Supports multiple values per filter field and partial matches for text fields.
        Raises ValidationError if invalid filter parameters are provided.
        """
        params = self.request.query_params
        allowed_params = set(self.filter_fields.keys()) | {'search'}

        invalid_params = set(params.keys()) - allowed_params
        if invalid_params:
            allowed = ', '.join(sorted(allowed_params))
            logger.warning(f"Invalid filter field(s) attempted: {sorted(invalid_params)}. Allowed fields: {allowed}")
            raise ValidationError({
                'error': f'Invalid filter field(s): {", ".join(sorted(invalid_params))}. Allowed fields: {allowed}'
            })

        must_queries = []

        for field, es_field in self.filter_fields.items():
            if field in params:
                values = params.getlist(field)
                if field in ['title', 'description']:
                    for val in values:
                        must_queries.append(Q('wildcard', **{es_field: f'*{val}*'}))
                else:
                    for val in values:
                        must_queries.append(Q('term', **{es_field: val}))

        search_terms = params.getlist('search')
        if search_terms:
            should_queries = []
            for term in search_terms:
                should_queries.append(Q('match', title=term))
                should_queries.append(Q('match', description=term))
            if should_queries:
                must_queries.append(Q('bool', should=should_queries, minimum_should_match=1))

        if must_queries:
            queryset = queryset.query(Q('bool', must=must_queries))

        return super().filter_queryset(queryset)

    def list(self, request, *args, **kwargs):
        """
        Overrides the list action.
        Relies on filter_queryset to validate query params and filter the queryset.
        Handles Elasticsearch connection errors gracefully with HTTP 503 response.
        """
        try:
            return super().list(request, *args, **kwargs)
        except ValidationError as ve:
            logger.warning(f"Validation error on filter params: {ve.detail}")
            return Response(ve.detail, status=status.HTTP_400_BAD_REQUEST)
        except (ConnectionError, TransportError) as e:
            logger.error("Elasticsearch connection error: %s", e)
            return Response(
                {"detail": "Search service is temporarily unavailable. Please try again later."},
                status=status.HTTP_503_SERVICE_UNAVAILABLE
            )
</file>

<file path="tests/search/test_search.py">
# from unittest import mock
# from django.urls import reverse
# from rest_framework.test import APITestCase
# from startups.models import Startup, Industry, Location
# from projects.models import Project
# from users.models import User, UserRole
#
#
# class SearchTests(APITestCase):
#     def setUp(self):
#         # Create user role
#         role, _ = UserRole.objects.get_or_create(role=UserRole.Role.USER)
#
#         # Create user
#         self.user = User.objects.create_user(
#             email="test@example.com",
#             password="password123",
#             role=role,
#         )
#
#         # Create industry (required for Startup)
#         self.industry = Industry.objects.create(name="Healthcare")
#
#         # Create location (required for Startup) using ISO code
#         self.location = Location.objects.create(city="Kyiv", country="UA")
#
#         # Create startup with all required fields
#         self.startup = Startup.objects.create(
#             user=self.user,
#             company_name="Test Startup",
#             description="AI Startup in healthcare",
#             stage="seed",
#             founded_year=2020,
#             industry=self.industry,
#             location=self.location,
#         )
#
#         # Create project linked to startup
#         self.project = Project.objects.create(
#             startup=self.startup,
#             title="Health AI",
#             description="AI project for healthcare",
#             status="active",
#             funding_goal=10000,
#         )
#
#     @mock.patch("search.views.StartupDocument.search")
#     def test_startup_search_mocked(self, mock_search):
#         """Test startup search with mocked Elasticsearch"""
#
#         # Prepare mock search result
#         mock_execute = mock.Mock()
#         mock_execute.__iter__ = lambda s: iter([mock.Mock(id=self.startup.id)])
#         mock_search.return_value.execute.return_value = mock_execute
#
#         # Call API
#         url = reverse("startup-search")
#         response = self.client.get(url, {"q": "AI"})
#
#         # Assertions
#         self.assertEqual(response.status_code, 200)
#         self.assertEqual(len(response.data), 1)
#         self.assertEqual(response.data[0]["company_name"], "Test Startup")
#
#     @mock.patch("search.views.ProjectDocument.search")
#     def test_project_search_mocked(self, mock_search):
#         """Test project search with mocked Elasticsearch"""
#
#         # Prepare mock search result
#         mock_execute = mock.Mock()
#         mock_execute.__iter__ = lambda s: iter([mock.Mock(id=self.project.id)])
#         mock_search.return_value.execute.return_value = mock_execute
#
#         # Call API
#         url = reverse("project-search")
#         response = self.client.get(url, {"q": "AI"})
#
#         # Assertions
#         self.assertEqual(response.status_code, 200)
#         self.assertEqual(len(response.data), 1)
#         self.assertEqual(response.data[0]["title"], "Health AI")
#
#     def test_startup_search_empty_query(self):
#         """Test empty query for startups should return empty list"""
#         url = reverse("startup-search")
#         response = self.client.get(url, {"q": ""})
#         self.assertEqual(response.status_code, 200)
#         self.assertEqual(len(response.data), 0)
#
#     def test_project_search_empty_query(self):
#         """Test empty query for projects should return empty list"""
#         url = reverse("project-search")
#         response = self.client.get(url, {"q": ""})
#         self.assertEqual(response.status_code, 200)
#         self.assertEqual(len(response.data), 0)
</file>

<file path="users/views/bind_company_view.py">
import traceback
from rest_framework import status
from rest_framework.response import Response
from django.db import transaction
from django.core.exceptions import ValidationError
from common.enums import Stage
from investors.models import Investor
from startups.models import Location, Industry, Startup
import datetime
import logging
from drf_spectacular.utils import extend_schema, OpenApiExample, OpenApiResponse
from drf_spectacular.types import OpenApiTypes
from users.serializers.company_bind_serializer import CompanyBindingSerializer
from users.views.base_protected_view import CookieJWTProtectedView

logger = logging.getLogger(__name__)


@extend_schema(
    summary="Bind user to company",
    description="Authenticated users can bind to existing companies or create new ones",
    request={
        'application/json': {
            'type': 'object',
            'required': ['company_name', 'company_type'],
            'properties': {
                'company_name': {
                    'type': 'string',
                    'maxLength': 254,
                    'example': "Tech Innovations Inc."
                },
                'company_type': {
                    'type': 'string',
                    'enum': ['startup', 'investor'],
                    'example': "startup"
                },
            },
        }
    },
    responses={
        200: OpenApiResponse(
            response=OpenApiTypes.OBJECT,
            description='Bound to existing company',
            examples=[
                OpenApiExample(
                    'Success response',
                    value={
                        "message": "Successfully bound to existing startup: Tech Innovations Inc.",
                        "company_type": "startup",
                        "company_id": 1
                    }
                )
            ]
        ),
        201: OpenApiResponse(
            response=OpenApiTypes.OBJECT,
            description='Created and bound to new company',
            examples=[
                OpenApiExample(
                    'Success response',
                    value={
                        "message": "Successfully created and bound to new startup: Tech Innovations Inc.",
                        "company_type": "startup",
                        "company_id": 1
                    }
                )
            ]
        ),
        400: OpenApiResponse(
            response=OpenApiTypes.OBJECT,
            description='Validation error',
            examples=[
                OpenApiExample(
                    'Error response',
                    value={"error": "User is already bound to a company."}
                )
            ]
        ),
        401: OpenApiResponse(description='Authentication required'),
        500: OpenApiResponse(
            response=OpenApiTypes.OBJECT,
            description='Server error',
            examples=[
                OpenApiExample(
                    'Error response',
                    value={"error": "An unexpected error occurred."}
                )
            ]
        )
    },
    tags=["Authentication"]
)
class CompanyBindingView(CookieJWTProtectedView):
    """
    API endpoint for binding users to companies after registration.

    Allows authenticated users to associate themselves with either:
    1. An existing company (startup or investor)
    2. A newly created company if no matching company exists
    """

    def post(self, request):
        """
        Handle company binding request.
        """
        serializer = CompanyBindingSerializer(data=request.data)

        if not serializer.is_valid():
            return Response({"error": serializer.errors}, status=status.HTTP_400_BAD_REQUEST)

        company_name = serializer.validated_data['company_name']
        company_type = serializer.validated_data['company_type']
        user = request.user

        if self._is_user_bound_to_company(user):
            return Response(
                {"error": "User is already bound to a company."},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            with transaction.atomic():
                if company_type == 'startup':
                    return self._bind_to_startup(user, company_name)
                else:
                    return self._bind_to_investor(user, company_name)

        except ValidationError as e:
            return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            logger.error(f"Company binding error: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            return Response(
                {"error": "An unexpected error occurred."},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    def _is_user_bound_to_company(self, user):
        """Check if user is already associated with any company."""
        return getattr(user, 'startup', None) is not None or getattr(user, 'investor', None) is not None

    def _bind_to_startup(self, user, company_name):
        """Bind user to an existing or new startup."""
        try:
            startup = Startup.objects.get(company_name__iexact=company_name)

            if startup.user is not None:
                return Response(
                    {"error": "Startup is already associated with another user."},
                    status=status.HTTP_400_BAD_REQUEST
                )
            startup.user = user
            startup.save()

            return Response({
                "message": f"Successfully bound to existing startup: {startup.company_name}",
                "company_type": "startup",
                "company_id": startup.id
            }, status=status.HTTP_200_OK)

        except Startup.DoesNotExist:
            startup = self._create_new_startup(user, company_name)
            return Response({
                "message": f"Successfully created and bound to new startup: {company_name}",
                "company_type": "startup",
                "company_id": startup.id
            }, status=status.HTTP_201_CREATED)

    def _bind_to_investor(self, user, company_name):
        """Bind user to an existing or new investor."""
        try:
            investor = Investor.objects.get(company_name__iexact=company_name)

            if investor.user is not None:
                return Response(
                    {"error": "Investor is already associated with another user."},
                    status=status.HTTP_400_BAD_REQUEST
                )
            investor.user = user
            investor.save()

            return Response({
                "message": f"Successfully bound to existing investor: {investor.company_name}",
                "company_type": "investor",
                "company_id": investor.id
            }, status=status.HTTP_200_OK)

        except Investor.DoesNotExist:
            investor = self._create_new_investor(user, company_name)
            return Response({
                "message": f"Successfully created and bound to new investor: {company_name}",
                "company_type": "investor",
                "company_id": investor.id
            }, status=status.HTTP_201_CREATED)

    def _create_default_industry_and_location(self):
        """Create or get default industry and location instances."""
        industry, _ = Industry.objects.get_or_create(
            name="Unknown",
            defaults={'description': 'Default unknown industry'}
        )

        # CountryField expects a string country code (e.g., "US")
        default_country = "US"

        location, _ = Location.objects.get_or_create(
            city="Unknown",
            country=default_country,
            defaults={
                'region': 'Unknown',
                'address_line': 'Default address',
                'postal_code': '00000'
            }
        )
        return industry, location

    def _create_new_startup(self, user, company_name):
        """Create a new startup instance with default values."""
        industry, location = self._create_default_industry_and_location()

        return Startup.objects.create(
            user=user,
            company_name=company_name,
            industry=industry,
            location=location,
            email=user.email,
            founded_year=datetime.datetime.now().year,
            team_size=1,
            stage=Stage.IDEA
        )

    def _create_new_investor(self, user, company_name):
        """Create a new investor instance with default values."""
        industry, location = self._create_default_industry_and_location()

        return Investor.objects.create(
            user=user,
            company_name=company_name,
            industry=industry,
            location=location,
            email=user.email,
            founded_year=datetime.datetime.now().year,
            team_size=1,
            stage=Stage.MVP,
            fund_size=0
        )
</file>

<file path="frontend/src/utils/validation/validate.js">
/**
 * Validator class for form validation.
 * It provides methods to validate individual fields and entire forms,
 * as well as handling changes in form fields.
 */
export class Validator {
    /**
     * Validators for different fields.
     * Each validator is a function that takes a value (and optionally the entire form data)
     * and returns true if the value is valid, or false otherwise.
     * @type {Object<string, function(value: any, data?: Object): boolean>}
     */
    static validators = {
        companyName: (value) => /^[\p{L}’ʼ-]{2,}$/u.test(value),
        email: (value) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value),
        password: (value) => /^(?=.*[A-Z])(?=.*\d).{8,}$/.test(value),
        confirmPassword: (value, data) => typeof value === "string" && value.trim() !== "" && value === data.password,
        firstName: (value) => /^[\p{L}’ʼ-]{2,}$/u.test(value),
        lastName: (value) => /^[\p{L}’ʼ-]{2,}$/u.test(value),
        representation: (value) => Object.values(value).some(v => v),
        businessType: (value) => Object.values(value).some(v => v)
    };

    /**
     * Error messages for fields that have zero length.
     * These messages are shown when a field is required but not filled.
     * The keys should match the keys in the `validators` object.
     * @type {Object<string, string>}
     */
    static errorZeroLengthMessages = {
        companyName: "Не ввели назву компанії",
        email: "Не ввели електронну пошту",
        password: "Не ввели пароль",
        confirmPassword: "Не ввели пароль ще раз",
        firstName: "Не ввели ім’я",
        lastName: "Не ввели прізвище",
        representation: "Виберіть кого ви представляєте",
        businessType: "Виберіть який суб’єкт господарювання ви представляєте"
    }

    /**
     * Error messages for fields that do not pass validation.
     * These messages are shown when a field is filled but does not meet the validation criteria.
     * The keys should match the keys in the `validators` object.
     * @type {Object<string, string>}
     */
    static errorValidationMessages = {
        companyName: "Назва компанії не відповідає вимогам",
        email: "Пошта не відповідає вимогам",
        password: "Пароль не відповідає вимогам",
        confirmPassword: "Паролі не співпадають. Будь ласка, введіть однакові паролі в обидва поля",
        firstName: "Ім’я не відповідає вимогам",
        lastName: "Прізвище не відповідає вимогам"
    }

    /**
     * Server-side error messages.
     * These messages are used when the server returns an error during form submission.
     * The keys should match the error codes returned by the server.
     * This is useful for displaying specific error messages based on server responses.
     * For example, if the server indicates that an email already exists,
     * the corresponding message will be shown to the user.
     * This helps in providing a better user experience by informing the user about specific issues.
     * @example
     * // Example usage:
     * const errorCode = "emailAlreadyExist"; // This would be returned by the server
     * const errorMessage = Validator.serverSideErrorMessages[errorCode];
     * console.log(errorMessage); // Outputs: "Ця електронна пошта вже зареєстрована"
     * @type {Object<string, string>}
     */
    static serverSideErrorMessages = {
        emailAlreadyExist: "Ця електронна пошта вже зареєстрована",
        companyAlreadyExist: "Компанія з такою назвою вже зареєстрована",
        noUserFoundByProvidedData: "Облікового запис за вказаними обліковими даними не знайдено",
        emailNotExists: "Зазначена електронна адреса не зареєстрована",
        unexpected: "Сталася непередбачена помилка. Будь ласка, спробуйте ще раз пізніше"
    }

    /**
     * Validates a single field based on its key, value, and the entire form data.
     * It checks if the field is required and has a zero length, and if it passes the validation criteria.
     * If the field is valid, it returns null; otherwise, it returns the corresponding error message.
     * @param key - The key/name of the field to validate.
     * @param value - The value of the field to validate.
     * @param data - The entire form data object, used for validation that requires context from other fields.
     * @param errorZeroLengthMessages - Error messages for fields that have zero length.
     * @param errorValidationMessages - Error messages for fields that do not pass validation.
     * @param validators - An object containing validation functions for each field.
     * @return {string|null} - Returns an error message if the field is invalid, or null if it is valid.
     */
    static validateField(
        key,
        value,
        data,
        errorZeroLengthMessages = Validator.errorZeroLengthMessages,
        errorValidationMessages = Validator.errorValidationMessages,
        validators = Validator.validators
    ) {
        const validator = validators[key];
        if (!validator) return null;
        const errorZeroLengthMessage = errorZeroLengthMessages[key];
        if (!errorZeroLengthMessage) return null;

        if (typeof value === "string" && value.trim() === "")
            return errorZeroLengthMessage;
        else if (typeof value === "object" && !Object.values(data[key]).some(v => v))
            return errorZeroLengthMessage;

        const errorValidationMessage = errorValidationMessages[key];
        if (!errorValidationMessage) return null;

        const isValid = validator.length === 2
            ? validator(value, data)
            : validator(value);

        return isValid ? null : errorValidationMessage;
    }

    /**
     * Validates an entire form by iterating over each field,
     * applying the `validateField` method to each field's value.
     * It returns an object where each key corresponds to a field and its value is either null
     * (if the field is valid) or an error message (if the field is invalid).
     * @param data - The form data object containing all fields to validate.
     * @param errorZeroLengthMessages - Error messages for fields that have zero length.
     * @param errorValidationMessages - Error messages for fields that do not pass validation.
     * @param validators - An object containing validation functions for each field.
     * @returns {Object<string, string|null>} - An object with field names as keys and error messages or null as values.
     */
    static validate(
        data,
        errorZeroLengthMessages = Validator.errorZeroLengthMessages,
        errorValidationMessages = Validator.errorValidationMessages,
        validators = Validator.validators
    ) {
        const errors = {};

        for (const key in data) {
            const value = data[key];
            errors[key] = Validator.validateField(key, value, data, errorZeroLengthMessages, errorValidationMessages, validators);
        }

        return errors;
    }

    /**
     * Handles the change event for form fields.
     * It updates the form data state and validates the field that changed.
     * If the field is part of a group (indicated by a dot in the name),
     * it updates the group and validates the entire group.
     * It also updates the errors state based on the validation results.
     * @param e - The change event object.
     * @param formData - The current form data state.
     * @param setFormData - Function to update the form data state.
     * @param setErrors - Function to update the errors state.
     * @param errorZeroLengthMessages - Error messages for fields that have zero length.
     * @param errorValidationMessages - Error messages for fields that do not pass validation.
     * @param validators - An object containing validation functions for each field.
     * @return {void}
     */
    static handleChange(
        e,
        formData,
        setFormData,
        setErrors,
        errorZeroLengthMessages = Validator.errorZeroLengthMessages,
        errorValidationMessages = Validator.errorValidationMessages,
        validators = Validator.validators
    ) {
        const { name, value, type, checked } = e.target;
        const realValue = type === "checkbox" ? checked : value;

        let argKey, argValue;
        if (name.includes(".")) {
            const [group, field] = name.split(".");

            const updatedGroup = {
                ...formData[group],
                [field]: realValue
            };

            setFormData(prev => ({
                ...prev,
                [group]: updatedGroup
            }));

            argKey = group;
            argValue = updatedGroup;
        } else {
            setFormData(prev => ({ ...prev, [name]: realValue }));

            argKey = name;
            argValue = realValue;
        }

        const error = Validator.validateField(argKey, argValue, {
            ...formData,
            [name]: realValue
        }, errorZeroLengthMessages, errorValidationMessages, validators);

        setErrors(prev => {
            const newErrors = { ...prev };
            if (!error) {
                delete newErrors[name];
            } else {
                newErrors[name] = error;
            }
            return newErrors;
        });
    };
}
</file>

<file path="investments/views.py">
from rest_framework.generics import CreateAPIView
from rest_framework.response import Response
from rest_framework import status
import logging

from users.cookie_jwt import CookieJWTAuthentication
from .models import Subscription
from projects.models import Project
from investments.serializers.subscription_create import SubscriptionCreateSerializer
from users.permissions import IsInvestor, IsAuthenticatedOr401

logger = logging.getLogger(__name__)

class SubscriptionCreateView(CreateAPIView):
    """
    API endpoint for creating a new investment subscription.

    - Requires authentication and investor role.
    - Validates funding constraints and prevents invalid investments.
    - Returns project funding status along with subscription details.
    """
    queryset = Subscription.objects.all()
    serializer_class = SubscriptionCreateSerializer
    authentication_classes = [CookieJWTAuthentication]
    permission_classes = [IsAuthenticatedOr401, IsInvestor]

    def create(self, request, *args, **kwargs):
        project_id = self.kwargs["project_id"]
        try:
            self.project = Project.objects.get(pk=project_id)
        except Project.DoesNotExist:
            return Response(
                {"project": "Project does not exist."},
                status=status.HTTP_404_NOT_FOUND,
            )
        serializer = self.get_serializer(data=request.data, context={"request": request, "project": self.project})
        serializer.is_valid(raise_exception=True)
        try:
            self.perform_create(serializer)
            subscription = serializer.instance

            self.project.current_funding += subscription.amount
            self.project.save()
            remaining_funding = self.project.funding_goal - self.project.current_funding
            project_status = "Fully funded" if remaining_funding <= 0 else "Partially funded"

            logger.info(
                "Subscription created successfully for project %s by user %s",
                self.project.id,
                request.user.id,
            )

            return Response(
                {
                    "message": "Subscription created successfully.",
                    "remaining_funding": remaining_funding,
                    "project_status": project_status,
                },
                status=status.HTTP_201_CREATED,
            )
        except Exception:
            logger.exception("Failed to create subscription for user %s", getattr(request.user, 'id', None))
            return Response(
                {"detail": "Failed to create subscription. Please try again."},
                status=status.HTTP_400_BAD_REQUEST,
            )
        
    def perform_create(self, serializer):
        """
        Persist a new subscription instance.

        - Retrieves the target project using the `project_id` from the URL.
        - Associates the subscription with the authenticated investor (`request.user.investor`).
        - Saves the subscription via the serializer.
        """
        serializer.save(
            investor=self.request.user.investor,
            project=getattr(self, 'project', None)
        )
</file>

<file path="frontend/src/pages/LogIn/logIn.jsx">
import './logIn.css';
import Panel, {
    PanelBody,
    PanelBodyBottomLink,
    PanelBodyTitle,
    PanelNavigation,
    PanelTitle,
} from '../../components/Panel/panel';
import TextInput from '../../components/TextInput/textInput';
import HiddenInput from '../../components/HiddenInput/hiddenInput';
import Button from '../../components/Button/button';
import { Link, useNavigate } from 'react-router-dom';
import { Validator } from '../../utils/validation/validate';
import { useAuthContext } from '../../provider/AuthProvider/authProvider';
import bruteForce from "../../utils/bruteForce/bruteForce";
import { useFormWithProtection } from '../../hooks/useFormWithProtection';
import { useFormWithServerErrors } from '../../hooks/useFormWithServerErrors';

/**
 * LogInPage component
 * @returns {JSX.Element}
 */
function LogInPage() {
    const { login } = useAuthContext();

    // Hook to navigate programmatically
    const navigate = useNavigate();

    // Brute force max attempts constant
    const MAX_ATTEMPTS = 5;

    // Form with protection hook
    const form = useFormWithProtection({
        email: "",
        password: "",
        unexpected: "",
    });

    // Function to handle server-side errors
    const extractError = (error) => {
        if (error?.response?.status === 404) {
            return { email: Validator.serverSideErrorMessages.noUserFoundByProvidedData };
        } else {
            return { unexpected: Validator.serverSideErrorMessages.unexpected };
        }
    };

    // Function to handle form submission with brute force protection
    const doSubmit = ({ form, handleError }) => {
        login(form.data.email, form.data.password)
            .then(() => navigate('/'))
            .catch((error) => bruteForce(error, {
                attempts: form.attempts,
                setAttempts: form.setAttempts,
                setIsLocked: form.setIsLocked,
                handleError
            }))
            .finally(() => form.setIsLocked(false));
    };

    const { handleSubmit, handleChange } = useFormWithServerErrors({
        form,
        navigate,
        extractError,
        doSubmit,
    });

    return (
        <>
            <Panel aria-labelledby="login-form-title">
                <PanelTitle id="login-form-title">Вхід на платформу</PanelTitle>
                <PanelBody>
                    <div>
                        <PanelBodyTitle
                            id="email-label"
                            title={'Електронна пошта'}
                            className={'content--text-container__margin'}
                            required={false}
                        />
                        <TextInput
                            id="email"
                            name="email"
                            autoComplete="off"
                            autoCorrect="off"
                            spellCheck="false"
                            value={form.data.email}
                            onChange={handleChange}
                            placeholder={'Введіть свою електронну пошту'}
                            className={
                                form.errors['email'] && 'input__error-border-color'
                            }
                            aria-labelledby="email-label"
                            aria-describedby={form.errors['email'] ? 'email-error' : undefined}
                            aria-invalid={!!form.errors['email']}
                            aria-required="true"
                        />
                        {form.errors['email'] && (
                            <p id="email-error"
                               className={'panel--danger-text'}
                               role="alert"
                            >
                                {form.errors['email']}
                            </p>
                        )}
                    </div>
                    <div>
                        <PanelBodyTitle
                            id="password-label"
                            title={'Пароль'}
                            className={'content--text-container__margin'}
                            required={false}
                        />
                        <HiddenInput
                            id="password"
                            name="password"
                            autoComplete="off"
                            autoCorrect="off"
                            spellCheck="false"
                            value={form.data.password}
                            onChange={handleChange}
                            placeholder={'Введіть пароль'}
                            className={
                                form.errors['password'] && 'input__error-border-color'
                            }
                            aria-labelledby="password-label"
                            aria-describedby={form.errors['password'] ? 'password-error' : undefined}
                            aria-invalid={!!form.errors['password']}
                            aria-required="true"
                        />
                        {form.errors['password'] && (
                            <p id="password-error"
                               className={'panel--danger-text'}
                               role="alert"
                            >
                                {form.errors['password']}
                            </p>
                        )}
                        <PanelBodyBottomLink
                            linkText="Забули пароль?"
                            to="/auth/forgot"
                        />
                    </div>
                    {!form.isLocked && form.attempts >= (MAX_ATTEMPTS - 2 - 1) && (
                        <p className={'content--text'}
                           role="alert"
                        >
                            Залишилося спроб: {MAX_ATTEMPTS - form.attempts}
                        </p>
                    )}
                    {form.isLocked && form.attempts >= (MAX_ATTEMPTS + 1 - 1) && (
                        <p className={'panel--danger-text'}>
                            Повторіть спробу через 30 секунд
                        </p>
                    )}
                    {form.errors['unexpected'] && (
                        <p className={'panel--danger-text'}>
                            {form.errors['unexpected']}
                        </p>
                    )}
                </PanelBody>
                <PanelNavigation>
                    <Button
                        onClick={handleSubmit}
                        disabled={form.isDisabled || form.isLocked}
                        className={'button__padding panel--button'}
                        type="submit"
                    >
                        Увійти
                    </Button>
                </PanelNavigation>
            </Panel>
            <div className={'panel--under-panel'}>
                <span>Вперше на нашому сайті?</span>
                <Link className={'text-underline text-bold'} to={'/auth/register'}>
                    Зареєструйтесь
                </Link>
            </div>
        </>
    );
}

export default LogInPage;
</file>

<file path="frontend/src/provider/AuthProvider/authProvider.jsx">
import {
    createContext,
    useCallback,
    useContext,
    useMemo,
    useState,
} from 'react';
import { api } from '../../api/client';
import PropTypes from 'prop-types';

/**
 * @typedef {Object} User - Represents a user in the application
 * @property {number} id - Unique identifier for the user
 * @property {string} first_name - First name of the user
 * @property {string} last_name - Last name of the user
 * @property {string} email - Email of the user
 * @property {string | null} role - Role of the user (e.g., 'admin', 'user')
 */

/**
 * @typedef {Object} Ctx
 * @property {User | null} user
 * @property {(function((User | null)): void)} setUser
 * @property {function(string, string): Promise<AxiosResponse<any>>} login
 * @property {function(string, (string | null), (string | null), string, string): Promise<AxiosResponse<any>>} register
 * @property {function(string, number): Promise<void>} resendRegisterEmail
 * @property {function(number, string): Promise<void>} confirmEmail
 * @property {function(string, ("startup" | "investor")): Promise<void>} bindCompanyToUser
 * @property {function(): Promise<void>} logout
 * @property {function(string): Promise<void>} requestReset
 * @property {function(string, string, string): Promise<void>} confirmReset
 */

/** @type {import('react').Context<Ctx | null>} */
const AuthCtx = createContext(null);

/**
 * Hook to access the authorization provider.
 * @returns {Ctx | null}
 */
const useAuthContext = () => useContext(AuthCtx);

/**
 * Authorization Context Provider.
 * Envelops the application and provides access to the authorization state.
 * @param {{ children: import('react').ReactNode }} props
 * @returns {JSX.Element}
 */
function AuthProvider({ children }) {
    const [user, setUser] = useState(null);

    /**
     * Register
     * URL: /api/v1/auth/register/
     * Req: { email, first_name, last_name, password, password2 }
     * Res: 201 { status, message, user_id, email }
     *
     * @param {string} email
     * @param {string | null} first_name
     * @param {string | null} last_name
     * @param {string} password
     * @param {string} confirmPassword
     */
    const register = useCallback(
        async (email, first_name, last_name, password, confirmPassword) => {
            try {
                return await api.post('/api/v1/auth/register/', {
                    email,
                    first_name,
                    last_name,
                    password,
                    password2: confirmPassword,
                });
            } catch (err) {
                console.error(err);
                throw err;
            }
        },
        []
    );

    /**
     * Resend register email
     * URL: /api/v1/auth/register/resend/
     * Req: { email, userId }
     * Res: 201 { status, message, user_id, email }
     *
     * @param {string} email
     * @param {number} userId
     */
    const resendRegisterEmail = useCallback(async (email, userId) => {
        await api
            .post('/api/v1/auth/resend-email/', {
                email: email,
                user_id: userId,
            })
            .catch((err) => {
                console.error(err);
                throw err;
            });
    }, []);

    /**
     * Confirm register email
     * URL: /api/v1/auth/verify-email/<int:user_id>/<string:token>/
     * Req: {  }
     * Res: 200
     *
     * @param {number} user_id
     * @param {string} token
     */
    const confirmEmail = useCallback(async (user_id, token) => {
        try {
            await api.get(`/api/v1/auth/verify-email/${user_id}/${token}/`);
        } catch (err) {
            console.error(err);
            throw err;
        }
    }, []);

    /**
     * Enable newly registered users to bind themselves to an existing or new company
     * URL: /api/v1/auth/bind-company/
     * Req: { company_name, company_type }
     * Res: 200
     *
     * @param {string} company_name
     * @param {'startup'|'investor'} company_type
     */
    const bindCompanyToUser = useCallback(async (company_name, company_type) => {
        try {
            await api.post(`/api/v1/auth/bind-company/`, {
                company_name,
                company_type
            });
        } catch (err) {
            console.error(err);
            throw err;
        }
    }, []);

    /**
     * Create
     * URL: /api/v1/auth/jwt/create/
     * Req: { email, password }
     * Res: 200 { access, refresh }
     *
     * @param {string} email
     * @param {string} password
     * @returns {Promise<AxiosResponse<any>>}
     */
    const login = useCallback(async (email, password) => {
        const res = await api
            .post('/api/v1/auth/jwt/create/', {
                email,
                password,
            })
            .catch((err) => {
                console.error(err);
                throw err;
            });

        /*
        TODO
        await loadUser();
        */
        return res;
    }, []);

    /**
     * Me
     * URL: /api/v1/auth/me/
     * Req: {  }
     * Res: 200 { id, email, role, ... }
     *
     * @returns {Promise<void>}
     */
    // eslint-disable-next-line
    const loadUser = useCallback(async () => {
        const { data } = await api.get('/api/v1/auth/me/')
            .then(() => {
                setUser(data);
            })
            .catch((err) => {
                if (err.response?.status === 404) {
                    setUser(null);
                } else {
                    throw err;
                }
            });
    }, []);

    /**
     * Logout
     * URL: /api/v1/auth/logout/
     * Req: {  }
     * Res: 205
     */
    const logout = useCallback(async () => {
        await api.post('/api/v1/auth/logout/').catch(() => {
            console.log('Logout');
        });
        setUser(null);
    }, []);

    /**
     * Password reset
     * URL: /api/v1/auth/password/reset/
     * Req: { email }
     * Res: 200
     *
     * @param {string} email
     * @returns {Promise<void>}
     */
    const requestReset = useCallback(async (email) => {
        return await api
            .post('/api/v1/auth/password/reset/', { email })
            .catch((err) => {
                console.error(err);
                // throw err;
            });
    }, []);

    /**
     * Password reset confirm
     * URL: /api/v1/auth/password/reset/confirm/
     * Req: { uid, token, new_password }
     * Res: 200
     *
     * @param {string} uid
     * @param {string} token
     * @param {string} new_password
     * @returns {Promise<void>}
     */
    const confirmReset = useCallback(async (uid, token, new_password) => {
        await api
            .post('/api/v1/auth/password/reset/confirm/', {
                uid,
                token,
                new_password,
            })
            .catch((err) => {
                console.error(err);
            });
    }, []);

    return (
        <AuthCtx.Provider
            value={useMemo(
                () => ({
                    user,
                    setUser,
                    login,
                    register,
                    resendRegisterEmail,
                    confirmEmail,
                    bindCompanyToUser,
                    logout,
                    requestReset,
                    confirmReset,
                }),
                [
                    user,
                    setUser,
                    login,
                    register,
                    resendRegisterEmail,
                    confirmEmail,
                    bindCompanyToUser,
                    logout,
                    requestReset,
                    confirmReset,
                ]
            )}
        >
            {children}
        </AuthCtx.Provider>
    );
}

AuthProvider.propTypes = {
    children: PropTypes.node,
};

AuthProvider.defaultProps = {
    children: null,
};

export { useAuthContext };
export default AuthProvider;
</file>

<file path="core/settings/third_party_settings.py">
import os
import sys
from decouple import config
from datetime import timedelta
import mongoengine
from typing import Any
from core.settings.base_settings import DEBUG, SECRET_KEY

AUTHENTICATION_BACKENDS = [
    'users.backends.EmailBackend',
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.github.GithubOAuth2',
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = config('GOOGLE_CLIENT_ID')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = config('GOOGLE_CLIENT_SECRET')

SOCIAL_AUTH_GITHUB_KEY = config('GITHUB_CLIENT_ID')
SOCIAL_AUTH_GITHUB_SECRET = config('GITHUB_CLIENT_SECRET')

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'users.pipelines.create_or_update_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': config('GOOGLE_CLIENT_ID'),
            'secret': config('GOOGLE_CLIENT_SECRET'),
            'key': '',
        },
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {
            'access_type': 'offline',
            'prompt': 'consent',
        },
        'FETCH_USERINFO': True,
    },

    'github': {
        'APP': {
            'client_id': config('GITHUB_CLIENT_ID'),
            'secret': config('GITHUB_CLIENT_SECRET'),
            'key': '',
        },
        'SCOPE': ['user:email'],
    }
}

# Ensure email is saved and verified
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_EMAIL_VERIFICATION = 'mandatory'
SOCIALACCOUNT_AUTO_SIGNUP = True

DEFAULT_SCHEMA_CLASS = 'drf_spectacular.openapi.AutoSchema'

REST_FRAMEWORK: dict[str, Any] = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "users.cookie_jwt.CookieJWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "users.permissions.IsAuthenticatedOr401",
    ),
    "UNAUTHENTICATED_USER": None,
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.UserRateThrottle",
        "rest_framework.throttling.AnonRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "user": "10/minute",
        "anon": "5/minute",
        "resend_email": "5/minute"
    },
    "DEFAULT_SCHEMA_CLASS": 'drf_spectacular.openapi.AutoSchema'
}

if 'test' in sys.argv:
    REST_FRAMEWORK['DEFAULT_THROTTLE_CLASSES'] = []

# drf-spectacular settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'Your API',
    'DESCRIPTION': 'REST API for authentication and account management (and more).',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    # gated by URLConf/env using DOCS_ENABLED
    'SERVE_PERMISSIONS': ['rest_framework.permissions.AllowAny'],
    'COMPONENT_SPLIT_REQUEST': True,
    'SECURITY': [{'bearerAuth': []}],
    'AUTHENTICATION_WHITELIST': [],
    'SWAGGER_UI_DIST': 'SIDECAR',
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
    'POSTPROCESSING_HOOKS': [],
    'CONTACT': {'name': 'Team', 'email': 'support@example.com'},
    'LICENSE': {'name': 'Proprietary'},
    'SCHEMA_PATH_PREFIX': r'/api/v1',
    'SERVE_URLCONF': None,
    'ENUM_NAME_OVERRIDES': {},
    'SCHEMA_EXTENSIONS': [],
    'SECURITY_SCHEMES': {
        'bearerAuth': {
            'type': 'http',
            'scheme': 'bearer',
            'bearerFormat': 'JWT',
        }
    },
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'BLACKLIST_AFTER_ROTATION': True,
    'ROTATE_REFRESH_TOKENS': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_TOKEN_CLASSES': (
        'rest_framework_simplejwt.tokens.AccessToken',
        'rest_framework_simplejwt.tokens.RefreshToken',
    ),
    'USER_ID_FIELD': 'user_id',
    'USER_ID_CLAIM': 'user_id',
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,

    # Cookie settings
    "AUTH_COOKIE": "access_token",
    "AUTH_COOKIE_DOMAIN": None,
    "AUTH_COOKIE_SECURE": not DEBUG,
    "AUTH_COOKIE_HTTP_ONLY": True,
    "AUTH_COOKIE_PATH": "/",
    "AUTH_COOKIE_SAMESITE": "Lax",
}

# CSRF
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_HTTPONLY = False
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = "Lax"

DJOSER = {
    'LOGIN_FIELD': 'email',
    'USER_CREATE_PASSWORD_RETYPE': True,
    # Pass recovery
    'CUSTOM_PASSWORD_RESET_CONFIRM_URL': 'users/reset_password_confirm/{uid}/{token}',  # link for front-end developer
    'PASSWORD_RESET_TIMEOUT': 3600,
    'PASSWORD_RESET_SHOW_EMAIL_NOT_FOUND': True,

    'SEND_ACTIVATION_EMAIL': True,
    'SEND_CONFIRMATION_EMAIL': True,
    'PASSWORD_CHANGED_EMAIL_CONFIRMATION': True,
    'USERNAME_CHANGED_EMAIL_CONFIRMATION': True,
    'PASSWORD_RESET_CONFIRM_URL': 'password/reset/confirm/{uid}/{token}',
    'USERNAME_RESET_CONFIRM_URL': 'email/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': 'activate/{uid}/{token}',
    'SERIALIZERS': {
        'user_create': 'users.serializers.CustomUserCreateSerializer',
        'user': 'users.serializers.CustomUserSerializer',
        'current_user': 'users.serializers.CustomUserSerializer',
        'activation': 'djoser.serializers.ActivationSerializer',
    },
    'EMAIL': {
        'activation': 'djoser.email.ActivationEmail',
        'confirmation': 'djoser.email.ConfirmationEmail',
    },
    'USER_ID_FIELD': 'user_id',
}

if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Email Configuration (for development)
    DEFAULT_FROM_EMAIL = 'noreply@yourdomain.com'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = config('EMAIL_HOST')
    EMAIL_PORT = 587
    EMAIL_HOST_USER = config('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
    EMAIL_USE_TLS = True
    DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default=EMAIL_HOST_USER)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='5432'),
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {'min_length': 8}
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'users.validators.CustomPasswordValidator',
    },
]

# CORS configuration for local development
CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:8000",
    "http://localhost:8000",
    "http://localhost:5173",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# CSRF configuration for local development
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

CORS_ALLOW_CREDENTIALS = True

# Elasticsearch DSL Configuration
ELASTICSEARCH_DSL = {
    'default': {
        'hosts': config('ELASTICSEARCH_HOST', default='http://localhost:9200'),
    },
}

# Override Elasticsearch index names for testing
if 'users' in sys.argv:
    ELASTICSEARCH_DSL['default']['hosts'] = config('ELASTICSEARCH_HOST', default='http://localhost:9200')

# Celery
CELERY_BROKER_URL = "redis://redis:6379/0"
CELERY_RESULT_BACKEND = "redis://redis:6379/0"

if 'test' in sys.argv:
    CELERY_TASK_ALWAYS_EAGER = True
    CELERY_TASK_EAGER_PROPAGATES = True

# Chat
ASGI_APPLICATION = "core.asgi.application"
REDIS_HOST = os.getenv("REDIS_HOST", "127.0.0.1")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
        },
    },
}

MONGO_DB = os.getenv("MONGO_DB", "chat")
MONGO_HOST = os.getenv("MONGO_HOST", "127.0.0.1")
MONGO_PORT = int(os.getenv("MONGO_PORT") or 27017)

mongoengine.connect(
    db=MONGO_DB,
    host=MONGO_HOST,
    port=MONGO_PORT,
    serverSelectionTimeoutMS=5000
)
</file>

<file path="projects/signals.py">
from django.db.models.signals import post_save, post_delete, pre_save
from django.dispatch import receiver
from django.contrib.auth import get_user_model

from projects.models import Project, ProjectHistory
from projects.documents import ProjectDocument

import logging
from investments.models import Subscription
from communications.services import create_in_app_notification
from elasticsearch.exceptions import ConnectionError, NotFoundError

TRACKED_FIELDS = ['title', 'description', 'funding_goal', 'status', 'website', 'technologies_used', 'milestones']

@receiver(pre_save, sender=Project)
def store_pre_save_instance(sender, instance, **kwargs):
    if instance.pk:
        try:
            instance._pre_save_instance = sender.objects.get(pk=instance.pk)
        except sender.DoesNotExist:
            instance._pre_save_instance = None
    else:
        instance._pre_save_instance = None

@receiver(post_save, sender=Project)
def handle_project_updates(sender, instance, created, **kwargs):
    """
    Tracks project updates, creates a history record, and sends
    notifications to subscribed investors.
    """
    if created:
        return

    try:
        old_instance = instance._pre_save_instance
    except AttributeError:
        return
    
    if not old_instance:
        return

    changes = {}
    for field in TRACKED_FIELDS:
        old_value = getattr(old_instance, field)
        new_value = getattr(instance, field)
        if old_value != new_value:
            changes[field] = {
                'old': str(old_value),
                'new': str(new_value)
            }

    if changes:
        ProjectHistory.objects.create(
            project=instance,
            user=getattr(instance, '_last_editor', None),
            changed_fields=changes
        )

        investor_user_ids = Subscription.objects.filter(project=instance).values_list('investor__user_id', flat=True).distinct()
        investor_users = get_user_model().objects.filter(user_id__in=investor_user_ids)
        
        for user in investor_users:
            title = f"Project '{getattr(instance, 'title', 'N/A')}' has been updated"
            startup_name = getattr(getattr(instance, 'startup', None), 'company_name', 'An anonymous startup')
            message = f"Startup '{startup_name}' has updated their project details."
            
            create_in_app_notification(
                user=user,
                type_code='project_updated',
                title=title,
                message=message,
            )

@receiver(post_delete, sender=Project)
def delete_project(sender, instance, **kwargs):
    try:
        ProjectDocument().delete(id=instance.id)
    except (ConnectionError, NotFoundError) as e:
        logging.error(
            f"Failed to delete project {instance.id} from Elasticsearch: {e}"
        )
</file>

</files>
