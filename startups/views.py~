from rest_framework.response import Response
from rest_framework import status, viewsets, filters
from django_elasticsearch_dsl_drf.viewsets import DocumentViewSet
from django_elasticsearch_dsl_drf.filter_backends import (
    FilteringFilterBackend,
    OrderingFilterBackend,
    SearchFilterBackend,
)
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework.decorators import action

from .documents import StartupDocument
from .serializers import StartupDocumentSerializer, StartupDetailSerializer
from .models import Startup


class StartupDocumentView(DocumentViewSet):
    """
    Elasticsearch-backed viewset for search.
    Endpoint: /.../search/
    """
    document = StartupDocument
    serializer_class = StartupDocumentSerializer
    lookup_field = 'id'

    filter_backends = [
        FilteringFilterBackend,
        OrderingFilterBackend,
        SearchFilterBackend,
    ]

    filter_fields = {
        'company_name': 'company_name.raw',
        'funding_stage': 'funding_stage',
        'location.country': 'location.country',
        'industries.name': 'industries.name',
        'investment_needs': 'investment_needs',
        'company_size': 'company_size',
        'is_active': 'is_active',
    }

    ordering_fields = {
        'company_name': 'company_name.raw',
        'funding_stage': 'funding_stage.raw',
        'location.country': 'location.country.raw',
        'company_size': 'company_size',
        'created_at': 'created_at',
    }

    ordering = ('-funding_stage',)

    search_fields = (
        'company_name',
        'description',
        'investment_needs',
    )

    def list(self, request, *args, **kwargs):
        try:
            return super().list(request, *args, **kwargs)
        except (ConnectionError, TransportError):
            return Response(
                {"detail": "Search service is temporarily unavailable. Please try again later."},
                status=status.HTTP_503_SERVICE_UNAVAILABLE
            )


class StartupViewSet(viewsets.ReadOnlyModelViewSet):
    """
    DB-backed API for startup list / detail.
    - GET /.../ → list of startups (supports filtering/search)
    - GET /.../{id}/ → detailed startup with nested projects
    """
    queryset = Startup.objects.all().prefetch_related('industries', 'projects__category')
    serializer_class = StartupDetailSerializer
    lookup_field = 'id'

    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]

    filterset_fields = {
        'industries__name': ['exact'],
        'funding_stage': ['exact', 'icontains'],
        'location__country': ['exact'],
        'projects__status': ['exact'],
        'projects__category__name': ['exact'],
        'is_active': ['exact'],
        'company_size': ['exact'],
    }

    search_fields = [
        'company_name',
        'description',
        'industries__name',
        'projects__title',
        'projects__description',
        'investment_needs',
    ]

    ordering_fields = ['company_name', 'created_at', 'funding_stage', 'company_size']
    ordering = ['company_name']

    @action(detail=True, methods=['get'], url_path='short')
    def short(self, request, id=None):
        """
        Returns a short representation (e.g. for card view).
        """
        instance = self.get_object()
        data = {
            "id": instance.id,
            "company_name": instance.company_name,
            "funding_stage": instance.funding_stage,
            "industries": [i.name for i in instance.industries.all()] if hasattr(instance, 'industries') else []
        }
        return Response(data)
