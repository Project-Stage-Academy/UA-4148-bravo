<<<<<<< HEAD
from django.test import TestCase
from django.urls import reverse
from rest_framework.test import APIClient
from rest_framework import status
from users.models import User
from startups.models import Startup, Industry, Location


class StartupElasticsearchTests(TestCase):
    """Test cases for Elasticsearch-powered startup search and filtering."""

    def setUp(self):
        """Prepare test data for all test cases."""
        self.client = APIClient()

        # Create and authenticate user
        self.user = User.objects.create_user(
            email="test@example.com",
            password="testpass123"
        )
        self.client.force_authenticate(user=self.user)

        # Create industries
        tech = Industry.objects.create(name="Technology")
        energy = Industry.objects.create(name="Energy")
        healthcare = Industry.objects.create(name="Healthcare")

        # Create locations
        usa = Location.objects.create(country="USA")
        germany = Location.objects.create(country="Germany")
        canada = Location.objects.create(country="Canada")

        # Create startups
        self.startup1 = Startup.objects.create(
            company_name="TechVision",
            description="Innovative AI solutions",
            location=usa,
            funding_stage="Seed",
            investment_needs="500000",
            company_size="Small",
            is_active=True
        )
        self.startup1.industries.add(tech)

        self.startup2 = Startup.objects.create(
            company_name="GreenFuture",
            description="Eco-friendly energy startup",
            location=germany,
            funding_stage="Series A",
            investment_needs="750000",
            company_size="Medium",
            is_active=True
        )
        self.startup2.industries.add(energy)

        self.startup3 = Startup.objects.create(
            company_name="MediCare Plus",
            description="Healthcare services for seniors",
            location=canada,
            funding_stage="Series B",
            investment_needs="1000000",
            company_size="Large",
            is_active=False
        )
        self.startup3.industries.add(healthcare)
=======
from unittest.mock import patch, MagicMock

from django.urls import reverse
from rest_framework import status
from rest_framework.test import APIClient, APITestCase

from common.enums import Stage
from startups.models import Startup, Industry, Location
from users.models import UserRole, User


@patch('startups.documents.StartupDocument._doc_type.mapping.save', MagicMock())
@patch('elasticsearch_dsl.Index.create', MagicMock())
@patch('elasticsearch_dsl.Index.delete', MagicMock())
class StartupElasticsearchTests(APITestCase):

    def setUp(self):
        role = UserRole.objects.get(role=UserRole.Role.USER)
        self.user1 = User.objects.create_user(
            email='apistartup@example.com',
            password='pass12345',
            first_name='Api',
            last_name='Startup',
            role=role,
        )
        self.user2 = User.objects.create_user(
            email='apistartup2@example.com',
            password='pass12345',
            first_name='Api2',
            last_name='Startup2',
            role=role,
        )
        self.client = APIClient()
        self.client.force_authenticate(user=self.user1)

        self.industry1 = Industry.objects.create(name="Fintech")
        self.industry2 = Industry.objects.create(name="E-commerce")

        self.location1 = Location.objects.create(country="US")
        self.location2 = Location.objects.create(country="DE")

        self.startup1 = Startup.objects.create(
            user=self.user1,
            industry=self.industry1,
            company_name="Fintech Solutions",
            description="Leading fintech platform",
            location=self.location1,
            email="ideastartup@example.com",
            founded_year=2020,
            team_size=10,
            stage=Stage.IDEA,
        )

        self.startup2 = Startup.objects.create(
            user=self.user2,
            industry=self.industry2,
            company_name="ShopFast",
            description="E-commerce made simple",
            location=self.location2,
            email="mvpstartup@example.com",
            founded_year=2020,
            team_size=15,
            stage=Stage.MVP,
        )
>>>>>>> 579349e35d4ed214871a13b01dedf76a92e8c3d6

    def test_empty_query_returns_all_startups(self):
        url = reverse('startup-search')
        response = self.client.get(url, {})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 3)

    def test_search_by_description(self):
        url = reverse('startup-search')
        response = self.client.get(url, {'q': 'AI'})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]['company_name'], "TechVision")

    def test_filter_by_company_size(self):
        url = reverse('startup-search')
        response = self.client.get(url, {'company_size': 'Medium'})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]['company_name'], "GreenFuture")

    def test_filter_by_industry_and_active_status(self):
        url = reverse('startup-search')
        response = self.client.get(url, {
<<<<<<< HEAD
            'industry': 'Healthcare',
            'is_active': 'false'
        })
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]['company_name'], "MediCare Plus")

    def test_filter_by_location_country(self):
        url = reverse('startup-search')
        response = self.client.get(url, {'location_country': 'Germany'})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]['company_name'], "GreenFuture")

    def test_no_results_for_non_existent_company_name(self):
        url = reverse('startup-search')
        response = self.client.get(url, {'q': 'NonExistent'})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 0)

    def test_ordering_by_company_name(self):
        url = reverse('startup-search')
        response = self.client.get(url, {'ordering': 'company_name'})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        names = [startup['company_name'] for startup in response.data]
        self.assertEqual(names, sorted(names))

    def test_search_by_investment_needs(self):
        url = reverse('startup-search')
        response = self.client.get(url, {'investment_needs': '500000'})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]['company_name'], "TechVision")

    def test_combined_filters_work_correctly(self):
        url = reverse('startup-search')
        response = self.client.get(url, {
            'industry': 'Technology',
            'location_country': 'USA',
            'is_active': 'true'
        })
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]['company_name'], "TechVision")

    def test_short_view_returns_minimal_data(self):
        url = reverse('startup-search')
        response = self.client.get(url, {'short': 'true'})
        self.assertEqual(response.status_code, status.HTTP_200_OK)

        if response.data:
            keys = list(response.data[0].keys())
            self.assertTrue(set(keys).issubset({'id', 'company_name'}))
=======
            'stage': Stage.MVP,
            'location.country': 'DE'
        })
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]['company_name'], "ShopFast")
>>>>>>> 579349e35d4ed214871a13b01dedf76a92e8c3d6
