# Generated by Django 5.2.4 on 2025-09-03 16:41

from django.db import migrations

def create_default_notifications(apps, schema_editor):
    User = apps.get_model("users", "User")
    NotificationType = apps.get_model("communications", "NotificationType")
    UserNotificationPreference = apps.get_model("communications", "UserNotificationPreference")
    UserNotificationTypePreference = apps.get_model("communications", "UserNotificationTypePreference")

    types = {
        "new_project": NotificationType.objects.get_or_create(
            code="new_project",
            defaults={"name": "New Project", "description": "Notify investors about new startup projects."}
        )[0],
        "investor_saved_startup": NotificationType.objects.get_or_create(
            code="investor_saved_startup",
            defaults={"name": "Investor Saved Startup", "description": "Notify startups when investors save them."}
        )[0],
        "weekly_digest": NotificationType.objects.get_or_create(
            code="weekly_digest",
            defaults={"name": "Weekly Digest", "description": "Weekly summary of activity."}
        )[0],
    }


    users_map = {
        "user1@example.com": ["investor_saved_startup", "weekly_digest"], 
        "user2@example.com": ["new_project", "weekly_digest"],             
    }

    for email, allowed_types in users_map.items():
        user = User.objects.filter(email=email).first()
        if not user:
            continue

        pref, _ = UserNotificationPreference.objects.get_or_create(
            user=user,
            defaults={"enable_in_app": True, "enable_email": True, "enable_push": False}
        )

        for code in allowed_types:
            nt = types.get(code)
            if nt:
                UserNotificationTypePreference.objects.get_or_create(
                    user_preference=pref,
                    notification_type=nt,
                    defaults={"frequency": "immediate"}
                )


def remove_default_notifications(apps, schema_editor):
    NotificationType = apps.get_model("communications", "NotificationType")
    NotificationType.objects.filter(
        code__in=["new_project", "investor_saved_startup", "weekly_digest"]
    ).delete()

class Migration(migrations.Migration):

    dependencies = [
        ('communications', '0003_remove_notification_related_project_id_and_more'),
        ("users", "0002_fill_default_users"),
    ]

    operations = [
        migrations.RunPython(create_default_notifications, remove_default_notifications),
    ]
